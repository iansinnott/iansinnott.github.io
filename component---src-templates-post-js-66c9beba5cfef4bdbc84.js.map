{"version":3,"sources":["webpack:///./src/templates/post.js","webpack:///./src/templates/post.module.styl"],"names":["cx","classnames","bind","s","formatDate","pipe","x","Date","format","getPost","path","getContext","Comments","style","textAlign","href","PostNav","prev","next","className","to","slug","BlogPost","render","this","props","errors","length","forEach","message","console","error","post","title","properties","marginRight","created","margin","dangerouslySetInnerHTML","__html","content_html","marginTop","React","Component","query","module","exports"],"mappings":"iVAcA,IAAMA,EAAKC,IAAWC,KAAKC,KAErBC,EAAaC,KACjB,SAACC,GAAD,OAAO,IAAIC,KAAKD,KAChBE,YAAO,eAGHC,EAAUC,IAAK,CAAC,OAAQ,SACxBC,EAAaD,IAAK,CAAC,gBAEnBE,EAAW,WACf,OACE,yBAAKC,MAAO,CAAEC,UAAW,WACvB,sDAC0B,IACxB,uBAAGC,KAAK,gCAAR,WAFF,sBAQAC,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACd,yBAAKC,UAAWnB,EAAG,YAChBiB,GAAQ,kBAAC,IAAD,CAAMG,GAAE,IAAMH,EAAKI,KAAX,KAAR,QACT,kBAAC,IAAD,CAAMD,GAAG,KAAT,aACCF,GAAQ,kBAAC,IAAD,CAAME,GAAE,IAAMF,EAAKG,KAAX,KAAR,UAIPC,E,gLACJC,OAAA,WACE,GAAIC,KAAKC,MAAMC,QAAUF,KAAKC,MAAMC,OAAOC,OAIzC,OAHAH,KAAKC,MAAMC,OAAOE,SAAQ,YAAkB,IAAfC,EAAc,EAAdA,QAC3BC,QAAQC,MAAR,qBAAmCF,MAGnC,6BACE,sCACA,wDAKN,IAAMG,EAAOvB,EAAQe,KAAKC,OAbnB,EAcgBd,EAAWa,KAAKC,OAA/BP,EAdD,EAcCA,KAAMD,EAdP,EAcOA,KAEd,OACE,kBAAC,IAAD,KACE,yBAAKE,UAAWnB,EAAG,SACjB,kBAAC,IAAD,CAAQiC,MAAUD,EAAKE,WAAWD,MAArB,mBACb,4BAAKD,EAAKE,WAAWD,OACrB,yBAAKd,UAAWnB,EAAG,SACjB,uBAAGmB,UAAWnB,EAAG,SACf,uBACEa,MAAO,CAAEsB,YAAa,IACtBhB,UAAU,2BAHd,cAKa,gCAASf,EAAW4B,EAAKE,WAAWE,WAEjD,uBAAGjB,UAAWnB,EAAG,UAAWa,MAAO,CAAEwB,OAAQ,UAA7C,MAQF,yBAAKC,wBAAyB,CAAEC,OAAQP,EAAKQ,gBAC7C,6BACA,kBAAC,IAAD,MACA,6BACA,kBAACxB,EAAD,CAASC,KAAMA,EAAMC,KAAMA,IAC3B,wBAAIL,MAAO,CAAE4B,UAAW,UACxB,kBAAC7B,EAAD,S,GA5Ca8B,IAAMC,WAmDdrB,YAGR,IAAMsB,EAAK,c,qBChGlBC,EAAOC,QAAU,CAAC,KAAO,2BAA2B,KAAO,2BAA2B,OAAS,6BAA6B,WAAa,iCAAiC,KAAO,2BAA2B,QAAU,gC","file":"component---src-templates-post-js-66c9beba5cfef4bdbc84.js","sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport Link from 'gatsby-link';\nimport pipe from 'ramda/src/pipe';\nimport path from 'ramda/src/path';\nimport classnames from 'classnames/bind';\nimport 'prismjs/themes/prism.css';\n\nimport s from './post.module.styl';\nimport { format } from '../lib/utils.js';\nimport Bio from '../components/Bio.js';\nimport Layout from '../layouts/index.js';\n\nconst cx = classnames.bind(s);\n\nconst formatDate = pipe(\n  (x) => new Date(x),\n  format('YYYY-MM-DD'), // What's a pretty format??\n);\n\nconst getPost = path(['data', 'post']);\nconst getContext = path(['pageContext']);\n\nconst Comments = () => {\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <em>\n        Thoughts? Let's chat on{' '}\n        <a href='https://twitter.com/ian_sinn'>Twitter</a> or via Email :)\n      </em>\n    </div>\n  );\n};\n\nconst PostNav = ({ prev, next }) => (\n  <div className={cx('PostNav')}>\n    {prev && <Link to={`/${prev.slug}/`}>Prev</Link>}\n    <Link to='/'>All Posts</Link>\n    {next && <Link to={`/${next.slug}/`}>Next</Link>}\n  </div>\n);\n\nclass BlogPost extends React.Component {\n  render() {\n    if (this.props.errors && this.props.errors.length) {\n      this.props.errors.forEach(({ message }) => {\n        console.error(`Blog render errr: ${message}`);\n      });\n      return (\n        <div>\n          <h2>Errors</h2>\n          <p>See console for details.</p>\n        </div>\n      );\n    }\n\n    const post = getPost(this.props);\n    const { next, prev } = getContext(this.props); // Not to be confused with react context...\n\n    return (\n      <Layout>\n        <div className={cx('Post')}>\n          <Helmet title={`${post.properties.title} | Ian Sinnott`} />\n          <h1>{post.properties.title}</h1>\n          <div className={cx('meta')}>\n            <p className={cx('date')}>\n              <i\n                style={{ marginRight: 10 }}\n                className='fa fa-calendar-check-o'\n              />\n              Published: <strong>{formatDate(post.properties.created)}</strong>\n            </p>\n            <p className={cx('middot')} style={{ margin: '0 1em' }}>\n              â€¢\n            </p>\n            {/* TODO: Where was this data coming from? The markdown plugin? I could calculate myself once I add a plain text or markdown renderer */}\n            {/* <p className={cx(\"timeToRead\")}> */}\n            {/*   <strong>{post.timeToRead}</strong> min read */}\n            {/* </p> */}\n          </div>\n          <div dangerouslySetInnerHTML={{ __html: post.content_html }} />\n          <hr />\n          <Bio />\n          <hr />\n          <PostNav prev={prev} next={next} />\n          <hr style={{ marginTop: '2rem' }} />\n          <Comments />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default BlogPost;\n\n// NOTE: The $id var is passed in via context in gatsby-node\nexport const query = graphql`\n  query PostById($id: String!) {\n    post: notionCollectionPosts(id: { eq: $id }) {\n      canonicalURL\n      content_html\n      properties {\n        tags\n        created\n        title\n        disqusId: dsq_thread_id\n      }\n    }\n  }\n`;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Post\":\"post-module--Post--cZXFE\",\"meta\":\"post-module--meta--2aiWT\",\"middot\":\"post-module--middot--1Fv2J\",\"timeToRead\":\"post-module--timeToRead--2sFTf\",\"date\":\"post-module--date--wxQK2\",\"PostNav\":\"post-module--PostNav--35dLv\"};"],"sourceRoot":""}