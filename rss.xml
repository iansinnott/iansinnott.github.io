<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Ian's RSS Feed]]></title><description><![CDATA[The personal blog of Ian Sinnott]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 29 Dec 2020 12:04:45 GMT</lastBuildDate><item><title><![CDATA[Functional Pipelines in JavaScript Using async/await]]></title><link>https://blog.iansinnott.com/functional-pipelines-in-javascript-using-asyncawait/</link><guid isPermaLink="false">https://blog.iansinnott.com/functional-pipelines-in-javascript-using-asyncawait/</guid><pubDate>Sat, 19 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Did you know that &lt;code &gt;async&lt;/code&gt;/&lt;code &gt;await&lt;/code&gt; syntax is great for &lt;span class=&quot;italic&quot;&gt;synchronous&lt;/span&gt; operations too? Really.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s say you want to perform some operations on a string:&lt;/p&gt;
&lt;pre&gt;let input = &amp;quot; some user input &amp;lt;script&amp;gt;alert(&amp;#39;pwnd!&amp;#39;);&amp;lt;/script&amp;gt;&amp;quot;;
input = input.trim();
input = sanitizeHTML(input);
input = `You submitted &amp;lt;pre&amp;gt;${input}&amp;lt;/pre&amp;gt;`; 
display(input);&lt;/pre&gt;
&lt;p&gt;This example is a bit contrived, but bear with me. The point here is that there are a number of self-contained operations we want to perform on our input string &lt;code &gt;input&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;How could we improve this?&lt;/h1&gt;
&lt;p&gt;There&amp;#39;s nothing wrong with the above example, however, reassigning a variable just doesn&amp;#39;t feel quite right... what we have here is a functional pipeline, so it would be ideal to be able to model our code as a functional pipeline as well.&lt;/p&gt;
&lt;h3&gt;Manual Functional Composition&lt;/h3&gt;
&lt;p&gt;One way we could change this code is to add a &lt;code &gt;pipe&lt;/code&gt; function that will let us actually create a functional pipeline.&lt;/p&gt;
&lt;pre&gt;const pipe = (...fns) =&amp;gt; fns.reduce((f, g) =&amp;gt; (x) =&amp;gt; g(f(x)));

// Build up a functional pipeline
const fn = pipe(
  x =&amp;gt; x.trim(),
	x =&amp;gt; sanitizeHTML(x),
	x =&amp;gt; `You submitted &amp;lt;pre&amp;gt;${input}&amp;lt;/pre&amp;gt;`,
  x =&amp;gt; display(x),
);

let input = &amp;quot; some user input &amp;lt;script&amp;gt;alert(&amp;#39;pwnd!&amp;#39;);&amp;lt;/script&amp;gt;&amp;quot;;
fn(input); // Run it&lt;/pre&gt;
&lt;p&gt;This is a valid approach and one I&amp;#39;ve used in the past many times. However, it has some drawbacks:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;This type of code is often opaque to new programmers or programmers without any background in functional programming.&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;For synchronous operations it requires building up a function even if you really just want to run a series of functions immediately and use the result.&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;For &lt;span class=&quot;italic&quot;&gt;async&lt;/span&gt; operations we can still use the approach above but may become harder to reason about and it will almost certainly exacerbate the first caveat, becoming less readable to outsiders.&lt;/li&gt;&lt;/ol&gt;
&lt;h2&gt;Promises can help&lt;/h2&gt;
&lt;p&gt;Now let&amp;#39;s rewrite this functionality using promises.&lt;/p&gt;
&lt;pre&gt;const main = async (input) =&amp;gt; {
  const x = await Promise.resolve(input)
		.then(x =&amp;gt; x.trim())
    .then(x =&amp;gt; sanitizeHTML(x))
		.then(x =&amp;gt; `You submitted &amp;lt;pre&amp;gt;${input}&amp;lt;/pre&amp;gt;`)
	
  display(x);
};

main().then(() =&amp;gt; console.log(&amp;#39;Complete.&amp;#39;));&lt;/pre&gt;
&lt;p&gt;Look at that, all our operations neatly pipeline without any external libraries. What&amp;#39;s more, we can now handle async operations and sync operations together in the same way.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s assume &lt;code &gt;display&lt;/code&gt; is an async operations. In the above example we could simply add an &lt;code &gt;await&lt;/code&gt; in front of it and our function would continue working as normally. Or we could include it in the pipeline:&lt;/p&gt;
&lt;pre&gt;Promise.resolve(input)
		.then(x =&amp;gt; x.trim())
    .then(x =&amp;gt; sanitizeHTML(x))
		.then(x =&amp;gt; `You submitted &amp;lt;pre&amp;gt;${input}&amp;lt;/pre&amp;gt;`)
    .then(x =&amp;gt; display(x)) // Even if display is async this will work &lt;/pre&gt;
&lt;h1&gt;The point&lt;/h1&gt;
&lt;p&gt;Promises are pretty flexible, and can be used to model both sync and async operations without any external library code.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What is going on with Quora's UI?]]></title><link>https://blog.iansinnott.com/what-is-going-on-with-quoras-ui/</link><guid isPermaLink="false">https://blog.iansinnott.com/what-is-going-on-with-quoras-ui/</guid><pubDate>Mon, 07 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;TL;DR&lt;/span&gt;: Quora&amp;#39;s UI actively discourages you from finding answers to your questions. This essay is me wondering aloud: Is it necessary for a content site to play zero-sum games with it&amp;#39;s audience in order to be a viable business?&lt;/p&gt;
&lt;h1&gt;Have you used Quora lately? &lt;/h1&gt;
&lt;p&gt;The site actively tries to discourage you from finding information. &lt;/p&gt;
&lt;p&gt;That&amp;#39;s a harsh statement to make about a company who&amp;#39;s mission is &amp;quot;Sharing and growing the world&amp;#39;s knowledge.&amp;quot;&lt;span &gt;*&lt;/span&gt; Just to be clear, I&amp;#39;m not saying Quora is useless—far from it. I am saying Quora does it&amp;#39;s best to reduce it&amp;#39;s own utility to any would-be knowledge seeker.&lt;/p&gt;
&lt;p&gt;Anyway, enough abstract claims. Let&amp;#39;s look at the UI. &lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F45d3cacb-ec42-4f66-aa97-535fa88bc983%2F2020-09-07_at_11.04_AM.png?table=block&amp;id=&quot; alt=&quot;From https://www.quora.com/What-does-it-mean-to-fork-a-processa,https://www.quora.com/What-does-it-mean-to-fork-a-process&quot;/&gt;&lt;figcaption&gt;From &lt;a href=&quot;https://www.quora.com/What-does-it-mean-to-fork-a-process&quot;&gt;https://www.quora.com/What-does-it-mean-to-fork-a-process&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;h2&gt;The Ad&lt;/h2&gt;
&lt;p&gt;Right when you jump in to seek knowledge you&amp;#39;re immediately prompted to go try a completely unrelated product. At best you ignore it. At worst, you actually the link and your attention is derailed. While seeking knowledge Quora successfully distracted you. Hopefully you will gain knowledge next time.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m not knocking Jira (although I&amp;#39;ve been known to do just that in the past), I&amp;#39;m pointing out that it&amp;#39;s not only irrelevant to your knowledge seeking but actively detrimental.&lt;/p&gt;
&lt;div class=&quot;callout&quot;&gt;&lt;span class=&quot;bold&quot;&gt;ASIDE&lt;/span&gt; Yes I use an ad-blocker but that Jira ad was fully &amp;quot;native,&amp;quot; as in plain HTML within the overall site. No &lt;code &gt;iframe&lt;/code&gt; no JS. Rather pleasant when compared with the standard crop of invasive online advertising, but an ad nonetheless.&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;What about the Google precedent?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Of course, there is a precedent for ads before knowledge in the form of Google search results. However, user experience (UX) isn&amp;#39;t a legal domain—Bad UX doesn&amp;#39;t become good simply because it&amp;#39;s been done before.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;What of knowledge?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Quora is even worse than Google though, because Quora is meant to be a repository of &lt;span class=&quot;italic&quot;&gt;knowledge&lt;/span&gt;. Users come to Quora &lt;span class=&quot;italic&quot;&gt;seeking knowledge&lt;/span&gt;. This is what makes distractions from that pursuit particularly egregious. &lt;/p&gt;
&lt;p&gt;At least with Google it&amp;#39;s not clear cut what the userbase wants. If someone is searching for shoes and Google shows them an offer to buy shoes at least the outcome has a veneer of relevance.&lt;/p&gt;
&lt;h2&gt;The Content&lt;/h2&gt;
&lt;p&gt;What we came for! This is why we&amp;#39;re here and for good reason—there&amp;#39;s real knowledge to be had here. Several answers (not just the top one) are well written and clearly took some non-trivial amount time to write.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;The content is good&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This of course is why Quora can have an ads program and can worsen it&amp;#39;s UI over time with some degree of impunity. As long as there are humans seeking knowledge, and that knowledge can be had on Quora, people will go there.&lt;/p&gt;
&lt;p&gt;In fact, I find it rather surprising that such good content can be had on a site with such poor UX. Of course there&amp;#39;s no inherent contradiction here, but it just feels odd. Quora is not the only game in town. Stackoverflow has quite nice UX, for example. &lt;/p&gt;
&lt;h2&gt;The &amp;quot;more&amp;quot; button&lt;/h2&gt;
&lt;p&gt;Would it have drawn your attention if I hadn&amp;#39;t drawn an arrow to it? It certainly didn&amp;#39;t draw mine, and yet that unassuming &amp;quot;more&amp;quot; button is hiding the exact thing I came here to find.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s small, unassuming, the opposite of a call to action. If this UI was consciously designed (and I suspect it was) the designer either did not consider the information priority to the user or had other incentives driving their design.&lt;/p&gt;
&lt;h2&gt;The &amp;quot;Engagement Box&amp;quot;&lt;/h2&gt;
&lt;p&gt;Two answers down there&amp;#39;s this gem:&lt;/p&gt;
&lt;img src=&quot;https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F022834eb-ff12-41d5-986e-68d2fe23c3ea%2F2020-09-07_at_12.01_PM.png?table=block&amp;id=&quot; /&gt;
&lt;p&gt;Rather than obtaining the knowledge I came here for maybe I&amp;#39;d prefer a distraction? &lt;/p&gt;
&lt;p&gt;I&amp;#39;m not sure if there&amp;#39;s a known design term for this type of UI, but I call it an &amp;quot;engagement box&amp;quot; because it seemingly exists for no reason other than to drive engagement metrics for the site owner. If increased page views or topic subscriptions is a good thing then this box makes perfect sense. If knowledge acquisition is what you&amp;#39;re after, this box actively tries to lead you astray.&lt;/p&gt;
&lt;p&gt;The fact that the title says &amp;quot;more answers below&amp;quot; seems an acknowledgement of the fact that the pair of eyeballs seeing this UI is probably interested in something else.  &lt;/p&gt;
&lt;p&gt;This type of UI appears on many sites these days and invariably it intentionally distracts from what you came to see. Twitter is another example: They like to throw &amp;quot;Who to follow&amp;quot; boxes in between the tweets of someone you&amp;#39;re &lt;span class=&quot;italic&quot;&gt;already&lt;/span&gt; interested in.&lt;/p&gt;
&lt;p&gt;Needless to say, I don&amp;#39;t like it. However, I&amp;#39;ve never tried operating a site like Quora or Twitter so if anyone thinks I&amp;#39;m being overly cynical I&amp;#39;d love to hear another perspective. &lt;/p&gt;
&lt;h1&gt;JS Unless... You&amp;#39;re Google&lt;/h1&gt;
&lt;p&gt;Now I depart form the specifics of the UI to the broader behavior of the site. Some people use the internet without JavaScript enabled in their browsers. Quora does &lt;span class=&quot;bold&quot;&gt;not&lt;/span&gt; like this.  &lt;/p&gt;
&lt;img src=&quot;https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fbfccdaa4-2c76-4369-bba2-9317e5a8ae82%2F2020-09-07_at_12.13_PM.png?table=block&amp;id=&quot; /&gt;
&lt;p&gt;As a developer I can partially empathize—if you&amp;#39;re site is built using JavaScript in a web browser it can be a pain to render it on a server. &lt;/p&gt;
&lt;p&gt;However, some sites have been known to create artificial barriers to their content for people without JS enabled. Why would they do this? I assume because it makes it difficult to track user metrics, but there are probably several reasons. &lt;/p&gt;
&lt;p&gt;The problem is, search engines might not have JavaScript enabled. This was definitely true in the past although I think these days (2020) several search engines will try to render JS. Regardless, unless you&amp;#39;re &lt;span class=&quot;italic&quot;&gt;sure&lt;/span&gt; search engines can index your JS-only pages it is worth while to render your content on the server.&lt;/p&gt;
&lt;p&gt;Looking at the source of the Quora page it appears that they don&amp;#39;t do this—they don&amp;#39;t render their content in such a way that search engines could definitely figure it out.&lt;/p&gt;
&lt;img src=&quot;https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F08ce885a-c478-4714-87f9-c2cd27a61658%2F2020-09-07_at_12.20_PM.png?table=block&amp;id=&quot; /&gt;
&lt;p&gt;Of course, that&amp;#39;s not the end of the story. Anyone making a request to a browser will send along some metadata telling the server who&amp;#39;s requesting the data. To be technical, I&amp;#39;m talking about the &lt;code &gt;User-Agent&lt;/code&gt; HTTP header.&lt;/p&gt;
&lt;p&gt;Curious as I am, I changed my user agent to mimic that of the Google search engine. This is quite easy to do within the Chrome devtools:&lt;/p&gt;
&lt;img src=&quot;https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F25a1ebdb-d638-487d-8939-fb9dd61a77ac%2F2020-09-07_at_12.24_PM.png?table=block&amp;id=&quot; /&gt;
&lt;p&gt;Now what did Quora return? Well, visibly it is still just a page requesting that I enable JS. However, the source changed quite a bit.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fe34a4478-e709-49b3-a32a-a2097366343c%2F2020-09-07_at_12.26_PM.png?table=block&amp;id=&quot; alt=&quot;This is just an excerpt since there&apos;s way to much code to put into a screenshot.&quot;/&gt;&lt;figcaption&gt;This is just an excerpt since there&amp;#39;s way to much code to put into a screenshot.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Now, pretending to be Google, all the content is available to me without JS. Of course it&amp;#39;s not very readable to my human brain, but that&amp;#39;s beside the point. Quora has the existing ability to render content on the server but chooses not to, which leads to some (undoubtedly small) subset of users not being able to seek knowledge through Quora.&lt;/p&gt;
&lt;h1&gt;Getting to the Point&lt;/h1&gt;
&lt;p&gt;This post turned into a bit of a rant so I feel I&amp;#39;ve done a poor job of elucidating the point, which is this:&lt;/p&gt;
&lt;blockquote&gt;Can a content site operate without engaging in zero-sum games with its users?&lt;/blockquote&gt;
&lt;p&gt;Quora&amp;#39;s UI seems to be very much &lt;span class=&quot;italic&quot;&gt;for Quora&lt;/span&gt; and not very much &lt;span class=&quot;italic&quot;&gt;for users&lt;/span&gt;. What I&amp;#39;m openly wondering about in this essay/rant is whether or not that&amp;#39;s necessary. As far as I can tell Quora has two goals:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Make money through ads&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Drive engagement, which will ultimately lead to making more money through ads&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;It&amp;#39;s not as if they can sell ads without users though, so they do have incentive to attract users to the site. Supposedly this is why there really is great content on Quora—they&amp;#39;re good at attracting knowledgable contributors.&lt;/p&gt;
&lt;p&gt;However, the strategy portrayed by their current site seems to be one of finding the minimum possible UX which won&amp;#39;t drive their users away, rather than trying to find positive-sum paths where users gain &lt;span class=&quot;italic&quot;&gt;and&lt;/span&gt; Quora gains.&lt;/p&gt;
&lt;h3&gt;Stackoverflow (SO) certainly makes it seem possible&lt;/h3&gt;

&lt;p&gt;If SO can make it work is it unreasonable to assume Quora could too? This is not meant to be a leading question.&lt;/p&gt;

&lt;div class=&quot;callout&quot;&gt;This post was written in September of 2020. If you&amp;#39;re reading this from the future then Quora&amp;#39;s site may have changed significantly.&lt;/div&gt;
</content:encoded></item><item><title><![CDATA[Why I Don't Paginate]]></title><link>https://blog.iansinnott.com/why-i-dont-paginate/</link><guid isPermaLink="false">https://blog.iansinnott.com/why-i-dont-paginate/</guid><pubDate>Sun, 06 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;TL;DR: &lt;/span&gt;Pagination is a poor user experience so I stopped doing it for my blog. This post is about why. &lt;/p&gt;
&lt;h1&gt;The Status Quo&lt;/h1&gt;
&lt;p&gt;Pagination has long been the status quo for content websites. News sites and blogs are the obvious examples.&lt;/p&gt;
&lt;p&gt;The concept of &amp;quot;pages&amp;quot; also has (obviously) a real world analogy in newspapers, books, magazines, etc. I would imagine the physical world limitations that constrained print had a significant impact on the early designs of the web.&lt;/p&gt;
&lt;p&gt;Then there&amp;#39;s network bandwidth. The web was initially a content platform. Content-focused sites have been around since the beginning, and in the beginning bandwidth was extremely limited compared to today&lt;span &gt;*&lt;/span&gt;. If you have tight bandwidth constraints it makes sense to break content up in some way so that a user can download &lt;span class=&quot;italic&quot;&gt;something&lt;/span&gt; in a reasonable amount of time.&lt;/p&gt;
&lt;p&gt;So, pagination has been the way to go for a long time and for good reason. However, modern websites have different constraints and viewership than in the past. Using pagination because &amp;quot;everyone paginates their websites&amp;quot; is not a good reason. Following the status quo is easy, but we can do better.&lt;/p&gt;
&lt;h1&gt;The Web from a Viewer&amp;#39;s Perspective&lt;/h1&gt;
&lt;p&gt;When you visit a content site, chances are you&amp;#39;re there for the content. If you buy in to this assumption (as I do) then it makes sense to minimize the friction of viewing your content.&lt;/p&gt;
&lt;p&gt;For example, I would assert: Scrolling presents less friction than scrolling and then clicking page 2 and then waiting for a new page load.&lt;/p&gt;
&lt;p&gt;When you&amp;#39;re looking through a content listing (blog or news homepage for example) simply scrolling until you find something of interest is a better experience than wading through multiple pages.&lt;/p&gt;
&lt;div class=&quot;callout&quot;&gt;Pagination is a worse user experience than a single list of posts.&lt;/div&gt;
&lt;h1&gt;Common Objections&lt;/h1&gt;
&lt;p&gt;Spoiler: I consider all these fair. I&amp;#39;m not an anti-pagination fundamentalist—do what works for you.&lt;/p&gt;
&lt;h2&gt;Large Collections&lt;/h2&gt;
&lt;p&gt;Yup. It&amp;#39;s one thing to list &lt;span class=&quot;italic&quot;&gt;dozens&lt;/span&gt; of blog posts without pagination, maybe even hundreds. However, any order of magnitude above triple digits will probably require some form of pagination or windowing.&lt;/p&gt;
&lt;h2&gt;The content will be too long&lt;/h2&gt;
&lt;p&gt;This is a fair concern. Lots and lots of content on your homepage will increase load time and potentially scare viewers away when they encounter a text-wall. Thus, if your homepage includes the &lt;span class=&quot;italic&quot;&gt;full content&lt;/span&gt; of each post  &lt;/p&gt;
&lt;h2&gt;My WordPress theme only does pagination...&lt;/h2&gt;
&lt;p&gt;Totally fair. Hacking on WordPress themes was one of my first &amp;quot;jobs&amp;quot; after learning to program and I fully empathize. PHP spaghetti is a dish best not served.&lt;/p&gt;
&lt;p&gt;There are reasons to consider a platform other than WordPress, but there are plenty of reasons to keep using it to. Do what works for you.&lt;/p&gt;
&lt;h2&gt;Pagination is vital for my ad impressions&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m not fan of ads, but a business needs to make money and if this is how you do it it&amp;#39;s not my place to judge. I would just point out that not all ad-based business paginate otherwise single-page content, so I would posit that it&amp;#39;s possible to run an ad business without excessive pagination. Still, changing your ads model requires time—your time, not mine. So it would be inauthentic of me to demand change on this front.&lt;/p&gt;
&lt;h1&gt;Prior Art&lt;/h1&gt;
&lt;p&gt;I make no claims to have first discovered that pagination is both unnecessary and inconsistent with good UX on a content site. I was first inspired by &lt;a href=&quot;https://www.bricolage.io/blog/&quot;&gt;Kyle Mathews&amp;#39; blog&lt;/a&gt; (he&amp;#39;s the creator of the framework that builds the blog you&amp;#39;re reading now). Since blogs change from time to time his homepage might be different than at the time of this writing (2020-09-06), but the gist was this:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A single page of blog post titles, which linked to full posts&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://paulgraham.com/articles.html&quot;&gt;Paul Graham does the same thing&lt;/a&gt; with his essays. He&amp;#39;s written a lot and been writing for a long time. If a single-page index works for him it can probably work for you as well.&lt;/p&gt;
&lt;div class=&quot;callout&quot;&gt;&lt;span class=&quot;bold&quot;&gt;ASIDE &lt;/span&gt;I attribute the fact it was Kyle&amp;#39;s site and not pg&amp;#39;s site that first inspired me to my life circumstances at the time. A JavaScript hacker interested in static sites (Kyle) was figuratively much more proximate than a startup luminary (pg). &lt;/div&gt;
&lt;h1&gt;So what?&lt;/h1&gt;
&lt;p&gt;Remove pagination from your site! ...ok that&amp;#39;s a bit overzealous. &lt;/p&gt;
&lt;p&gt;There are reasons this isn&amp;#39;t an easy option so the zero-pagination index page might be a non-starter for some people. &lt;/p&gt;
&lt;p&gt;However, if you have technical control over your site and are prone to considering the UX of your viewers then consider it. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Your Browsing History is not Your Own]]></title><link>https://blog.iansinnott.com/your-browsing-history-is-not-your-own/</link><guid isPermaLink="false">https://blog.iansinnott.com/your-browsing-history-is-not-your-own/</guid><pubDate>Thu, 03 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Were you using a web browser 10 years ago? What about 1 year ago? I know I was.&lt;/p&gt;
&lt;p&gt;But you know what? I couldn&amp;#39;t tell you the specifics of what I was doing on the internet. Could you tell me what sites you visited 728 days ago? Probably not.&lt;/p&gt;
&lt;p&gt;This situation I find quite appalling.&lt;/p&gt;
&lt;p&gt;Web browsers record what sites you visit so that you can revisit them in the future, right? Indeed, they do have this functionality. However, after a certain number of &lt;span class=&quot;italic&quot;&gt;months&lt;/span&gt; your history gets deleted.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Months, &lt;/span&gt;that&amp;#39;s right. In the case of Chrome it&amp;#39;s 3 months.&lt;/p&gt;
&lt;p&gt;This is why your browsing history is not true: It&amp;#39;s not a full history.&lt;/p&gt;
&lt;h1&gt;Why should you care?&lt;/h1&gt;
&lt;p&gt;Well, it&amp;#39;s not that you &lt;span class=&quot;italic&quot;&gt;should&lt;/span&gt; care it&amp;#39;s that I &lt;span class=&quot;italic&quot;&gt;do&lt;/span&gt; care. If you have zero curiosity about your past browsing history you can stop reading right now—the rest of this post probably won&amp;#39;t interest you. &lt;/p&gt;
&lt;p&gt;The reason you might care is that you value having access to your own data.&lt;/p&gt;
&lt;div class=&quot;callout&quot;&gt;&lt;span class=&quot;bold&quot;&gt;NOTE&lt;/span&gt; This is not a rant about privacy and how your data is being collected and used to sell ads. While also an interesting topic, that&amp;#39;s not the focus of this post. This post is concerned with actually using the data you generate.&lt;/div&gt;
&lt;p&gt;Every time you use a browser you generate &lt;span class=&quot;italic&quot;&gt;A LOT&lt;/span&gt; of data, but for the most part this data isn&amp;#39;t accessible.&lt;/p&gt;
&lt;p&gt;Have you ever wanted to recall something you read online a few months ago? If so, we&amp;#39;re in the same boat. In fact, that little situation is what led me to discover that Chrome only stores 3 months of browsing history! &lt;/p&gt;
&lt;h2&gt;The elephant in the room&lt;/h2&gt;
&lt;p&gt;The obvious objection to this talk of unlimited and persistent browsing history is that you don&amp;#39;t want to record every site you visit. Totally fair. That&amp;#39;s what private browsing is for. Chrome and Firefox literally don&amp;#39;t record&lt;span &gt;*&lt;/span&gt; what you do in a private tab, so everything I&amp;#39;m talking about here would not break the guarantees of private browsing.&lt;/p&gt;
&lt;h1&gt;What can you do? &lt;/h1&gt;
&lt;p&gt;As far as I know, not much. There is a &lt;a href=&quot;https://chrome.google.com/webstore/detail/history-trends-unlimited/pnmchffiealhkdloeffcdnbgdnedheme&quot;&gt;Chrome Plugin&lt;/a&gt; that will store your history in a separate database and thus keep it around for you. That&amp;#39;s a great start, but it has a few shortcomings:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Chrome only. If you use more than one browser you have incomplete data.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Single-device only. If you use more than one computer you have fragmented data.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Trust. That Plugin requires full access to all your browsing history and you have to trust that the developer is not doing nefarious things with your data.&lt;ul&gt;&lt;li&gt;I&amp;#39;m not implying they are, I&amp;#39;m just pointing out that&lt;span class=&quot;yellow_background&quot;&gt; having to trust a third party is a weak point of any service that deals with sensitive data&lt;/span&gt;. Even if you do trust the developer, their account could become compromised and thereby compromise all your browsing history.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;This problem would be somewhat mitigated if the project was open source, but as far as I can tell the code is not available for review. &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;An alternative&lt;/h1&gt;
&lt;p&gt;At long last I decided to take matters into my own hands. I&amp;#39;m building a tool to easily and continuously backup your browsing history while making it easy to search.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s what I&amp;#39;m thinking:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Continuous history backups for Chrome and Firefox so you never lose history.&lt;ul&gt;&lt;li&gt;Do many people use any of the other browsers? This is not a dig, I honestly don&amp;#39;t know anyone not using one or both of these. I&amp;#39;m sure the number is &lt;code &gt;&amp;gt; 0&lt;/code&gt; but is it significant? 🤷&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Search / Dashboard UI to give high level stats, a simple search box and of course allow you to run SQL against your history.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Optional cross-device syncing.&lt;ul&gt;&lt;li&gt;This would either be through a third-party service (Dropbox probably) or I&amp;#39;d have to create a back-end. Not sure what would make most sense yet. I&amp;#39;m still in the brainstorming phase.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div class=&quot;callout&quot;&gt;&lt;span class=&quot;bold&quot;&gt;NOTE&lt;/span&gt; There&amp;#39;s no mention of mobile browsers here because I&amp;#39;m honestly not sure how to pull that data. On iOS for example, could I create an app that simply exfiltrates browsing history? If so, where would I send the data? In this case it seems I&amp;#39;d &lt;span class=&quot;italic&quot;&gt;definitely&lt;/span&gt; need a server and possibly need to add some mobile UI to make Apple allow it through the app store.&lt;/div&gt;
&lt;h1&gt;A broader vision&lt;/h1&gt;
&lt;p&gt;Browsing history is just the tip of the iceberg. I&amp;#39;d also like to instantly be able to search over many things for which ample data exists but is not readily accessible:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Podcasts I&amp;#39;ve listened to&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Audiobooks I&amp;#39;ve listened to&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Songs I&amp;#39;ve listened to&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Ebooks I&amp;#39;ve read&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Highlights in ebooks I&amp;#39;ve read&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Youtube videos I&amp;#39;ve watched&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;etc...&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;We&amp;#39;re all generating so much data every day and yet we have very limited access to it. I&amp;#39;d like to change that. &lt;/p&gt;
&lt;p&gt;No more wondering &amp;quot;What was that interesting video I watched earlier this year?&amp;quot; and not being able to find an answer.&lt;/p&gt;
&lt;h1&gt;Interested?&lt;/h1&gt;
&lt;p&gt;If having access to your browsing history sounds at all interesting to you then &lt;a href=&quot;https://twitter.com/ian_sinn&quot;&gt;message me on Twitter: @ian_sinn&lt;/a&gt;. I&amp;#39;d be happy to share.&lt;/p&gt;
</content:encoded></item><item><title><![CDATA[Editor Overload]]></title><link>https://blog.iansinnott.com/editor-overload/</link><guid isPermaLink="false">https://blog.iansinnott.com/editor-overload/</guid><pubDate>Thu, 20 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Every so often my programming productivity takes a steep dive as I try to use a new text editor. &lt;/p&gt;
&lt;p&gt;Why do I put myself through this? Simply put, I&amp;#39;m a bit of an efficiency fanatic. Fanatic in the sense of pursuing some end with not-entirely-rational vigor and passion. I call it fanatical because the pursuit of ever more efficiency in and of itself takes quite a bit of time, thus actively working against my ostensible goal of being more productive.&lt;/p&gt;
&lt;p&gt;Whatever, it&amp;#39;s a hobby.&lt;/p&gt;
&lt;h1&gt;A History of Ian&amp;#39;s Text Editors&lt;/h1&gt;
&lt;p&gt;Let&amp;#39;s make a timeline. &lt;/p&gt;
&lt;h2&gt;&lt;code &gt;2011&lt;/code&gt; Dreamweaver&lt;/h2&gt;
&lt;p&gt;Oh yeah, I started there. This was when I first started learning web development and thought to myself &amp;quot;It&amp;#39;s just text and images, how much harder than Word could it be?&amp;quot;&lt;/p&gt;
&lt;p&gt;I&amp;#39;m not putting Dreamweaver down—it was actually a very good start. There were professional video tutorials about it since it was part of the Adobe suite. It even had code mode, which is just like any normal text editor.&lt;/p&gt;
&lt;p&gt;However, it was not to last. Even with code mode I felt like I wasn&amp;#39;t a &lt;span class=&quot;italic&quot;&gt;programmer&lt;/span&gt;, whatever that meant. I felt like I needed more of a hacker-ish interface on which to work my magic. &lt;/p&gt;
&lt;h2&gt;&lt;code &gt;2011&lt;/code&gt; Coda&lt;/h2&gt;
&lt;p&gt;Yes, same year as Dreamweaver. After a bit of Dreamweaver I discovered Coda, a pretty nifty text editor that&amp;#39;s &lt;a href=&quot;https://www.panic.com/coda/&quot;&gt;still around&lt;/a&gt; (as of 2020-08-20). Why do I say that as if it&amp;#39;s a big deal? Well, I&amp;#39;d be surprised if anyone who started programming after 2013 knows about it. This is not to say anything bad about the product, I just never met a single other programmer who had used it.&lt;/p&gt;
&lt;p&gt;The cool feature that drew me in to Coda was that it could know about your websites. As far as I remember it was pitched as a great editor for creating front-end sites (JS, CSS, HTML). Back then my move was to write some code, open an FTP app and then drag/drop the files into it. Coda handled this nicely and saved me time. &lt;/p&gt;
&lt;h2&gt;&lt;code &gt;2013&lt;/code&gt; Sublime Text&lt;/h2&gt;
&lt;p&gt;Then, the programming world collectively gasps as Sublime Text 2 sweeps over the industry (* I doubt the Vim/Emacs people cared much, but as  you can see I was not yet among their numbers).&lt;/p&gt;
&lt;p&gt;Sublime Text was just &lt;span class=&quot;italic&quot;&gt;awesome&lt;/span&gt;. It was &lt;span class=&quot;italic&quot;&gt;fast&lt;/span&gt;. It was minimal yet powerful which appealed to the power user in me. It was &lt;span class=&quot;bold&quot;&gt;not&lt;/span&gt; intuitive, it was &lt;span class=&quot;bold&quot;&gt;not&lt;/span&gt; discoverable, it was configured via JSON! It was exactly what I wanted.&lt;/p&gt;
&lt;p&gt;For two whole years Sublime Was my primary editor and it was great. Along the way it taught me the power of dedicated tools, rather than an integrated suite. I used different apps for my terminal, my FTP client and my editor. &lt;/p&gt;
&lt;p&gt;Of course my time with Sublime and the productivity it won me made me want more, and thus paved the way towards the black hole of text editors, the editor form which—once you have learned it—you will never fully detach yourself.&lt;/p&gt;
&lt;h2&gt;&lt;code &gt;2015&lt;/code&gt; Vim&lt;/h2&gt;
&lt;p&gt;In 2015 it finally clicked. This was something of a watershed moment in my text editing career. After years of false starts Vim finally took hold of my fingertips and things have never been the same since.&lt;/p&gt;
&lt;div class=&quot;callout&quot;&gt;For anyone unaware, Vim is an ancient text editor from the 70s¹ that might already be installed on your computer. It&amp;#39;s claim to fame is that it let&amp;#39;s you edit &lt;span class=&quot;italic&quot;&gt;any text&lt;/span&gt; with only the keyboard. No mouse interaction whatsoever. &lt;/div&gt;
&lt;p&gt;Vim is hard to learn. Significantly harder than learning touch-typing. Anyone who already knows how to program but does&amp;#39;t know Vim could probably pick it up in a month. However, it took me years. This was probably due to the fact that even I have my limits when it comes to &amp;quot;productivity hacking&amp;quot; and Vim will really, &lt;span class=&quot;italic&quot;&gt;really&lt;/span&gt; decrease your productivity for a time. So I never used it much, just gave it another try here and there and eventually it stuck.&lt;/p&gt;
&lt;h3&gt;Is it worth it? &lt;/h3&gt;
&lt;p&gt;Yes, but it&amp;#39;s not for everyone. &lt;/p&gt;
&lt;p&gt;If you write a lot of code, or even just prose, using Vim is nothing short of magical. It feels like being in the future already, when computers simply do what we think. &lt;/p&gt;
&lt;p&gt;A mouse is an imprecise device. Analog motion (i.e. your hand sliding a mouse across a desk) is relatively intuitive, but it&amp;#39;s slow compared to directly telling the computer what you want. Anyone who&amp;#39;s used software professionally for long enough understands this. Designers, architects, authors, anyone who uses a computer as a creative tool and uses it &lt;span class=&quot;italic&quot;&gt;a lot&lt;/span&gt; eventually feels the strain of repetitive interactions. That&amp;#39;s why professional software packages have numerous hotkeys. Even your operating system has numerous hotkeys, even if you don&amp;#39;t know them or use them much.&lt;/p&gt;
&lt;p&gt;When you&amp;#39;re using Vim, everything is a hotkey. Every action you take you take with keys, which offers a great deal of precision and speed when it comes to editing text. &lt;/p&gt;
&lt;p&gt;A quick example. Let&amp;#39;s say you want to select all the text &amp;quot;here, within these quotes.&amp;quot; What do you do? Normally, you just drag the mouse over all the text within the quotes and start typing. No problem! Now consider you have to do this many times a day, perhaps hundreds of times a day, with different text. Sometimes the text wraps around the screen, causing you to have to move your mouse further. Sometimes you accidentally drag too far or not far enough, causing you to have to hit undo and try again. This may all sound minor, but again, consider having to do it hundreds of times a day.&lt;/p&gt;
&lt;p&gt;Now, if you&amp;#39;re a Vim user you just type &lt;code &gt;ci&amp;quot;&lt;/code&gt;. Three characters. The mnemonic for this sequence is &amp;quot;change inner &lt;code &gt;&amp;quot;&lt;/code&gt;.&amp;quot; The interesting thing is you can use that same &lt;code &gt;ci&lt;/code&gt; &amp;quot;change inner ...&amp;quot; command with other characters. For instance &lt;code &gt;ci&amp;#39;&lt;/code&gt; will let you change all the text inside single quotes. &lt;code &gt;ci(&lt;/code&gt; will let you change all the text inside parens, and so on. It&amp;#39;s quite a flexible and highly productive system (once you learn it).&lt;/p&gt;
&lt;h2&gt;&lt;code &gt;2016&lt;/code&gt; Vim + Atom&lt;/h2&gt;
&lt;p&gt;Enter Atom. I actually don&amp;#39;t have a lot to say about Atom. I used it as my secondary editor since, again, once you&amp;#39;ve internalized Vim you never go back. However, Vim has a significant drawback: You have to program it to make it play nicely with new languages. That&amp;#39;s right, you have to write code just to get your editor to let you write more code in an appealing way.&lt;/p&gt;
&lt;p&gt;This is where Atom came in. It&amp;#39;s a mainstream text editor in the sense that it has lots of features built-in and it will do its best to help you along the way. It also has a plugin repository where you can search for new plugins that do things like support new programming languages. It even has—and this is key—a plugin to emulate Vim!&lt;/p&gt;
&lt;p&gt;So I ended up using Atom whenever I had to work with code that I hadn&amp;#39;t yet configured Vim for. It worked out of the box, it was intuitive and it sort of supported Vim-like editing. &lt;/p&gt;
&lt;p&gt;Perhaps most importantly, at this point my company had hired other developers and as the senior member of the team I needed to be able to recommend a way to edit our codebase—that recommendation was Atom.&lt;/p&gt;
&lt;h2&gt;&lt;code &gt;2018&lt;/code&gt; Vim + VSCode&lt;/h2&gt;
&lt;p&gt;So after a couple of years I decided to revisit VSCode. I honestly don&amp;#39;t know why, but it became hugely popular and so it came across my radar again. It&amp;#39;s a great text editor, but in my view it fills the space that Atom was in so I&amp;#39;m not sure why anyone switched 🤷‍♂️.&lt;/p&gt;
&lt;p&gt;Regardless, I tried it out and thought &amp;quot;this is ok.&amp;quot; The thing was, at this point I was a much more experienced programmer and &lt;span class=&quot;bold&quot;&gt;really didn&amp;#39;t want&lt;/span&gt; to spend time not directly solving whatever problem I was working on. I had little patience for configuring text editors, so whenever I tried a new language I would just open up VSCode instead of Vim since it would either immediately work well or have a plugin I could install.&lt;/p&gt;
&lt;p&gt;VSCode still filled the space of secondary text editor until one day I discovered &lt;a href=&quot;https://github.com/asvetliakov/vscode-neovim&quot;&gt;a plugin for VSCode that embeds Vim&lt;/a&gt;... 🤯 &lt;/p&gt;
&lt;p&gt;Thus the balance switched. Now I use VSCode (in Vim mode) as my primary text editor and Vim as the secondary.&lt;/p&gt;
&lt;h2&gt;&lt;code &gt;2020&lt;/code&gt; Vim + VSCode + Emacs&lt;/h2&gt;
&lt;p&gt;And finally we&amp;#39;re caught up. 2020 and I&amp;#39;m trying a new text editor. Why? Blame Clojure. Emacs and Lisp languages go very well together so I decided to try out Emacs, and it&amp;#39;s pretty neat.&lt;/p&gt;
&lt;div class=&quot;callout&quot;&gt;For anyone who doesn&amp;#39;t know, Emacs is as old as Vim and has a similar keyboard-centric philosophy. It&amp;#39;s also &lt;span class=&quot;italic&quot;&gt;even more&lt;/span&gt; customizable than Vim, which is saying quite a lot. However, Emacs is unfortunately famous for forcing your hands into contortions to use various functions. &lt;/div&gt;
&lt;p&gt;I only recently started using Emacs, so I can&amp;#39;t actually speak to it&amp;#39;s long-term utility but it&amp;#39;s definitely interesting. Aside from being a lisp-based editor, which highly appeals to me, it also seems to &lt;span class=&quot;italic&quot;&gt;fully&lt;/span&gt; support Vim. It emulates Vim but it does it so well that as far as I can tell you get the best of both worlds.&lt;/p&gt;
&lt;h1&gt;Pursue Your Hobbies&lt;/h1&gt;
&lt;p&gt;Since I haven&amp;#39;t exactly come to any specific point, it&amp;#39;s fortunate I didn&amp;#39;t start writing this intending to make one. If there was one it would simply be: Pursue your hobbies. &lt;/p&gt;
&lt;p&gt;Believe it or not fiddling with text editors brings me joy, so despite the occasional dips in productivity I continue to tinker. Besides, there&amp;#39;s always the off chance that I&amp;#39;ll become more productive. &lt;/p&gt;

&lt;p&gt;This post was discussed on Hacker News: &lt;a href=&quot;https://news.ycombinator.com/item?id=24290128&quot;&gt;https://news.ycombinator.com/item?id=24290128&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#footnate&quot;&gt;¹&lt;/a&gt; Vim has become something of a catchall term for Vi and Vim, which are separate editors. Vi was first and Vim didn&amp;#39;t show up until the 90s. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Work Culture]]></title><link>https://blog.iansinnott.com/work-culture/</link><guid isPermaLink="false">https://blog.iansinnott.com/work-culture/</guid><pubDate>Thu, 20 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I have held exactly &lt;span class=&quot;bold&quot;&gt;one&lt;/span&gt; &amp;quot;serious&amp;quot; job thus far, so my perspective is bound to be a bit offset from the norm (if such a thing exists). That being said, I have to wonder about Work Culture™, especially in the tech industry.&lt;/p&gt;
&lt;h1&gt;Work Culture&lt;/h1&gt;
&lt;p&gt;A mode of thinking and social culture characterized by the following (this is a non-exhaustive list):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A belief that losing one&amp;#39;s job is a catastrophe.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;A belief that one should &lt;span class=&quot;bold&quot;&gt;not&lt;/span&gt; partake in certain activities that might negatively effect one&amp;#39;s &amp;quot;employability.&amp;quot;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;A notable example of that last point is not taking time off to do whatever you want, also known as taking sabbatical in more polite circles. Taking, let&amp;#39;s say 1-2 years, off work is seen as a negative because when employers ask you why there&amp;#39;s a 2 year gap in employment what will you say?!&lt;/p&gt;
&lt;p&gt;(Coincidentally, as I write this, I&amp;#39;ve jus hit the 2 year anniversary of leaving my last job)&lt;/p&gt;
&lt;h2&gt;Would you prefer a life boat or a parachute? &lt;/h2&gt;
&lt;p&gt;These are terms often used in the context of job loss to describe helping soon-to-be-unemployed people find a new job before they drown or hit the ground at high velocity. At least that seems to be the metaphor implied by such phrases.&lt;/p&gt;
&lt;p&gt;An example: &lt;a href=&quot;https://parachutelist.com/&quot;&gt;parachutelist.com&lt;/a&gt;. A site to help employers find newly laid off employees. Sounds pretty neat, and it may well be pretty neat. &lt;/p&gt;
&lt;p&gt;This is just one example, completely anecdotal., but its a reflection of Work Culture and therefore useful to this author for illustrative purposes. &lt;/p&gt;
&lt;p&gt;The product itself is not the point. The point is the implicit metaphor. You were flying high and now you&amp;#39;re falling, the only way to keep from hitting the ground is to find a parachute (in midair I suppose).&lt;/p&gt;
&lt;p&gt;Or to put it more simply: &amp;quot;No work. Bad!&amp;quot;&lt;/p&gt;
&lt;p&gt;This is not necessarily the case. &lt;/p&gt;
&lt;h1&gt;Work Culture Considered Harmful...&lt;/h1&gt;
&lt;p&gt;...by me, of course.&lt;/p&gt;
&lt;p&gt;So, what&amp;#39;s the harm? &lt;/p&gt;
&lt;p&gt;Work Culture is building up a dogmatic belief that  employment is good and necessary. To be sure, we all need food and shelter. In modern economic society this requires some amount of money, but full time, salaried employment is just one way to acquire money.&lt;/p&gt;
&lt;p&gt;Let me be clear. If you lost your job or left your job and &lt;span class=&quot;italic&quot;&gt;you want a new job&lt;/span&gt; then by all means you should get one. If you have help along the way all the better. &lt;/p&gt;
&lt;p&gt;Where I feel Work Culture has gone too far is in promoting full-time employment as &lt;span class=&quot;bold yellow_background&quot;&gt;the way&lt;/span&gt; to live ones live. Work Culture says &amp;quot;You&amp;#39;re unemployed, oh no!&amp;quot; In reality, not having a job is a tradeoff, and by definition a tradeoff has both downside &lt;span class=&quot;bold&quot;&gt;and upside&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;It is by not acknowledging the upside that Work Culture is harming people. &lt;/p&gt;
&lt;p&gt;Clear decision making requires clear thinking. Work Culture, as described in this essay, does not help people think clearly. &lt;/p&gt;
&lt;h1&gt;Am I Anti-employment?&lt;/h1&gt;
&lt;p&gt;Up until this point you&amp;#39;re either nodding along or, much more likely, you think I&amp;#39;m completely out of touch with actual job loss. Perhaps even anti-employment! That&amp;#39;s not the case.&lt;/p&gt;
&lt;p&gt;Helping people find jobs is good. Not giving people room to consider their options is not good. &lt;/p&gt;
&lt;p&gt;Thus I&amp;#39;ve been capitalizing Work Culture as if it&amp;#39;s some deeply insightful term I&amp;#39;ve invented because I want to refer to a specific culture, a specific mindset, which has some negative implications for clear thinking and living the best life for you.&lt;/p&gt;
&lt;p&gt;In a situation such as job loss it might be worthwhile to take a moment and consider the situation without a negative stigma.&lt;/p&gt;
&lt;p&gt;As Robert Glover suggests, try asking yourself:&lt;/p&gt;
&lt;blockquote&gt;How would my view of this situation change if I saw it as a gift?&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Note Taking]]></title><link>https://blog.iansinnott.com/note-taking/</link><guid isPermaLink="false">https://blog.iansinnott.com/note-taking/</guid><pubDate>Wed, 19 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A friend recently told me he never takes notes (!). I was surprised. I don&amp;#39;t expect everyone to take notes, but this particular friend is also a member of the likes-to-study-things camp. If you study things you take notes, right? &lt;/p&gt;
&lt;h1&gt;The case for note taking&lt;/h1&gt;
&lt;ul&gt;&lt;li&gt;You can refer to your notes later and jog your memory.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;You will retain more of what you study.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;That&amp;#39;s it. Two points. Want more detail? Here we go.&lt;/p&gt;
&lt;h2&gt;Refer back to past information&lt;/h2&gt;
&lt;p&gt;This one is pretty obvious so I&amp;#39;ll just point out one particular nuance I&amp;#39;ve found beneficial—notes created by your past self are &lt;span class=&quot;italic&quot;&gt;extremely&lt;/span&gt; well tailored to your way of thinking.&lt;/p&gt;
&lt;p&gt;Reviewing old notes can be like having the worlds best tutor, because the author new your brain better than anyone else.&lt;/p&gt;
&lt;p&gt;Your own notes work much than reviewing whatever material helped you create your notes in the past.&lt;/p&gt;
&lt;h2&gt;Retain more information&lt;/h2&gt;
&lt;p&gt;This is the big on. The primary reason I advocate note taking. I myself don&amp;#39;t go back and read past notes very often, but the fact that I took them adds to my retention of any topic.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Reading non-fiction? 👉Take some notes.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Learning a new subject? 👉Take some notes.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Just met a new person and want to remember what you talked about? 👉Take some notes.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;If you don&amp;#39;t believe me just try it for yourself. In some area you&amp;#39;re currently studying try taking notes for a week. &lt;/p&gt;
&lt;h1&gt;A note taking workflow&lt;/h1&gt;
&lt;p&gt;So that covers the &amp;quot;why,&amp;quot; now let&amp;#39;s get into &amp;quot;how.&amp;quot;&lt;/p&gt;
&lt;div class=&quot;callout&quot;&gt;Disclaimer. There are a million note-taking apps for a reason. People work in different ways. The specifics here are all subjective.&lt;/div&gt;
&lt;h2&gt;The types of notes&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Reference material.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Spontaneous musings.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;It&amp;#39;s important to distinguish different types of note taking. In my life there are currently these two kinds.&lt;/p&gt;
&lt;h3&gt;Reference Material&lt;/h3&gt;
&lt;p&gt;This is classic note taking. You learn something and write something down about it.&lt;/p&gt;
&lt;p&gt;Reference material is anything you might want to reference in the future. Examples:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Quotes from books your reading&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Websites&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Momentous thoughts&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Business ideas&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;etc&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;Spontaneous Musings&lt;/h3&gt;
&lt;p&gt;These can be anything, but what separates spontaneous musings from reference material is that they aren&amp;#39;t meant to be referenced. You write something down and forget about it. Maybe you review it, maybe you don&amp;#39;t.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll repeat that since &amp;quot;musings&amp;quot; might not be clear on its own: This type of note is &lt;span class=&quot;bold&quot;&gt;not meant to be reviewed&lt;/span&gt; later. It can be, but there&amp;#39;s no expectation. &lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Journaling&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Thoughts on books or podcasts&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Rants&lt;ul&gt;&lt;li&gt;This is an important one. Most likely no one wants to hear your rants, but dumping a rant into a note and forgetting about it can be therapeutic. &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Anything else&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;Workflow&lt;/h3&gt;
&lt;p&gt;So how do I personally put this into practice? I use two apps:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Notion: For reference material.&lt;ul&gt;&lt;li&gt;When studying something I take notes on it. Books, programming languages, business ideas, etc.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Day One: For spontaneous musings.&lt;ul&gt;&lt;li&gt;I really like this one. It supports ver long audio snippets which is extremely useful for note taking while walking. I listen to a lot of books / podcasts so this is super handy.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;The journal functionality is good, although there are a million options for journaling. I just like their UI and feature set for my personal use case.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;Fin&lt;/h1&gt;
&lt;p&gt;That&amp;#39;s all. Go take some notes! &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Coming To Clojure from JavaScript]]></title><link>https://blog.iansinnott.com/coming-to-clojure-from-javascript/</link><guid isPermaLink="false">https://blog.iansinnott.com/coming-to-clojure-from-javascript/</guid><pubDate>Tue, 11 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Clojure and JavaScript have a surprising amount in common. I&amp;#39;ve been pleasantly surprised that a lot of what I know already coming from the JS world applies in Clojure too.&lt;/p&gt;
&lt;h2&gt;Functional Programming&lt;/h2&gt;
&lt;p&gt;JS is a very flexible language in that it does not enforce any particular ideology. In particular it gives you both classes and first-class functions, which means out of the box you can write your programs in an extremely object-oriented way or  an extremely functional way. &lt;/p&gt;
&lt;p&gt;I was never indoctrinated into the Cult of OOP so naturally I&amp;#39;ve tended to write most of my code in a functional style. For example, in JS:&lt;/p&gt;
&lt;pre&gt;// First I need to define a few things that are included 
// in Clojure but not in JS

// comp is short for &amp;quot;compose&amp;quot;. It combines functions
// from right to left
const comp = (...fns) =&amp;gt; 
	fns.reduce((f, g) =&amp;gt; (...args) =&amp;gt; f(g(..args)));

// str converts its args to strings and joins them
const str = (...args) =&amp;gt; 
	args.map(String).join(&amp;quot;&amp;quot;);

// inc, short for &amp;quot;increment&amp;quot;, will increment an integer 
const inc = (x) =&amp;gt; 
	x + 1;

// Now combine some functions to make a new one. Note
// that the functions will be composed starting at the
// bottom. So the multiplication comes first.
const func = compose(
	str, 
	inc, 
	x =&amp;gt; x * 100);

func(1); // =&amp;gt; &amp;quot;101&amp;quot;&lt;/pre&gt;
&lt;p&gt;In Clojure:&lt;/p&gt;
&lt;pre&gt;; This code may appear much more concise than the 
; JS code, but that&amp;#39;s largely because clojure includes
; the functions we need out of the box
(def func (comp 
	str
	inc
	#(* % 100)))

(func 1) ; =&amp;gt; &amp;quot;101&amp;quot;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;So similar!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re not used to functional program this may all look like gibberish, however, coming from a background of using functional programming in JS clojure feels oddly familiar. &lt;/p&gt;
&lt;h2&gt;Destructuring and &amp;quot;rest&amp;quot; parameters&lt;/h2&gt;
&lt;p&gt;In JS and in Clojure we can extract values from collections in a structural way. I imagine that this syntax is foreign to anyone coming from a language that doesn&amp;#39;t have it, but if you&amp;#39;re familiar with it then you&amp;#39;ll be quick to start using it in Clojure too.&lt;/p&gt;
&lt;p&gt;JS:&lt;/p&gt;
&lt;pre&gt;const arr = [1, 2, 3, 4, 5];
const [a, b, ...remaining] = arr;
console.log(a, b, remaining); // =&amp;gt; 1 2 [3, 4, 5]&lt;/pre&gt;
&lt;p&gt;Clojure:&lt;/p&gt;
&lt;pre&gt;(def arr [1 2 3 4 5])
(let [[a b &amp;amp; remaining] arr]
	(println a b remaining)) ; =&amp;gt; 1 2 (3 4 5)&lt;/pre&gt;
&lt;p&gt;There are of course some differences here, but the two parts to focus on are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;[a, b, ...remaining] = arr&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;[a b &amp;amp; remaining] arr&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;See the similarity? To make it ever more explicit we can use commas (&lt;code &gt;,&lt;/code&gt;) in the Clojure example: &lt;code &gt;[a, b, &amp;amp; remaining] arr&lt;/code&gt;. Commas are considered whitespace in Clojure.&lt;/p&gt;
&lt;p&gt;The key differences to notice are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The use of &lt;code &gt;...&lt;/code&gt; in javascript vs &lt;code &gt;&amp;amp;&lt;/code&gt; in clojure.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;JS uses the &lt;code &gt;=&lt;/code&gt; symbol for assignment, whereas the &lt;code &gt;let&lt;/code&gt; construct in clojure simply uses a space.&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Immutable Data (What?!)&lt;/h2&gt;
&lt;p&gt;This one is a bit subjective since JS does &lt;span class=&quot;bold&quot;&gt;NOT&lt;/span&gt; force you to use immutable data, however it is possible and is even necessary in certain architectures. Namely, lots of front-end programming over the past years has made use of immutable data.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re worked with React and especially if you&amp;#39;re worked with Redux then you&amp;#39;ve used immutable data before, even if it&amp;#39;s taken the form of manually returning new objects or arrays.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;const incCountState = (state) =&amp;gt; ({
	count: state.count + 1, 
	...state 
});&lt;/pre&gt;
&lt;p&gt;In this example we &lt;span class=&quot;italic&quot;&gt;manually&lt;/span&gt; create a new object using the spread operator on state, thus our new state is a different object from the old state which has not mutated.&lt;/p&gt;
&lt;p&gt;Example 2, for anyone who&amp;#39;s ever used Immutable.js:&lt;/p&gt;
&lt;pre&gt;// Here we assume state is an Immutable.Map
const incCountState = (state) =&amp;gt; state.set(&amp;quot;count&amp;quot;, state.get(&amp;quot;count&amp;quot;) + 1);&lt;/pre&gt;
&lt;p&gt;As the name implies, Immutable.js is very similar to Clojure&amp;#39;s data structures. It does not allow you to mutate anything except very explicitly.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to Disable Live Reload in create-react-app]]></title><link>https://blog.iansinnott.com/how-to-disable-live-reload-in-create-react-app/</link><guid isPermaLink="false">https://blog.iansinnott.com/how-to-disable-live-reload-in-create-react-app/</guid><pubDate>Sat, 08 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;How to disable live reload in create-react-app&lt;/h1&gt;
&lt;p&gt;Here you go, insert this code into your HTML file. Probably located at &lt;code &gt;public/index.html&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&amp;lt;% if (process.env.REACT_APP_DISABLE_LIVE_RELOAD === &amp;quot;true&amp;quot;) { %&amp;gt;
&amp;lt;!-- 
  Live Reload was causing issues for us. Disable it by starting the app with
  REACT_APP_DISABLE_LIVE_RELOAD=true
--&amp;gt;
&amp;lt;script&amp;gt;
  {
    var WS = window.WebSocket;
    function DevWebSocket(s) {
      if (s === &amp;quot;ws://localhost:3000/sockjs-node&amp;quot;) {
        console.info(&amp;quot;[DEV NOTICE] Live Reload Has Been Disabled&amp;quot;);
        return {};
      } else {
        // Pass through other usage of sockets
        return new WS(s);
      }
    }
    window.WebSocket = DevWebSocket;
  }
&amp;lt;/script&amp;gt;
&amp;lt;% } %&amp;gt;&lt;/pre&gt;
&lt;p&gt;Then on the command line just set that environment variable when you start the app:&lt;/p&gt;
&lt;pre&gt;REACT_APP_DISABLE_LIVE_RELOAD=true yarn start&lt;/pre&gt;
&lt;h1&gt;A quick explanation&lt;/h1&gt;
&lt;p&gt;create-react-app uses web sockets to trigger a refresh in the browser. Since there is no option to disable this behavior we can take matters into our own hands. We do this by overwriting the global &lt;code &gt;WebSocket&lt;/code&gt; constructor. Then if we detect that create-react-app is trying to set up live reload we just return an empty object. Voila. &lt;/p&gt;
&lt;h1&gt;Why?&lt;/h1&gt;
&lt;p&gt;Fair question. Usually live reload is a boon to development. However, I have a project where I&amp;#39;m using an app in development as a CMS. In a sense I&amp;#39;m running a &amp;quot;production&amp;quot; app in dev mode, which is admittedly odd. &lt;/p&gt;
&lt;p&gt;The point though is that I&amp;#39;m using it as a CMS. That means I&amp;#39;m creating and editing content in the browser. If I notice something in the app that I want to change I might make a code change as well. A live reload could easily destroy any unsaved content I&amp;#39;ve created. Think of it like when your computer used to freeze in the middle of writing a long essay in Word. You might just lose all your progress, which is not great.&lt;/p&gt;
&lt;p&gt;The broader point though is that philosophically I believe software should be configurable. This is doubly true for dev software. In the world of JS there seems to have been a trend away from configuration. I understand this since too much configuration (Webpack...) can turn developers away from otherwise interesting and useful projects. However, we can have the best of both worlds. Having sensible defaults &lt;span class=&quot;italic&quot;&gt;that can be changed&lt;/span&gt; is the answer. Similar to the Ruby on Rails philosophy perhaps. &lt;/p&gt;
&lt;p&gt;Have defaults, but let me configure them if my use case requires it.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The State of the Art]]></title><link>https://blog.iansinnott.com/the-state-of-the-art/</link><guid isPermaLink="false">https://blog.iansinnott.com/the-state-of-the-art/</guid><pubDate>Sun, 31 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;The State of the Art&lt;/h1&gt;
&lt;p&gt;There&amp;#39;s a lot going on in the world. I wanted to take a few moments to reflect on the state of things and make a few predictions. The driving motivation is that I wish I had done this a decade ago and could look back on it now to see what I was thinking, what stood out at the time, and of course how close my predictions came to reality. &lt;/p&gt;
&lt;p&gt;Let&amp;#39;s dive in.&lt;/p&gt;
&lt;h1&gt;The past decade&lt;/h1&gt;
&lt;p&gt;Here are some things that stand out in my memory. Lot&amp;#39;s more happened of course but this is a subjective perspective:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Massive economic growth. I&amp;#39;m talking mostly from the perspective of the US stock market. The 10 year run after the financial crisis of the previous decade was huge and as of this writing it hasn&amp;#39;t ended yet. Covid hit and there was a blip of downward pressure, but with the exception of a few notable verticles (airline industry...) prices are right back up.&lt;ul&gt;&lt;li&gt;There was more centralization of talent and rising housing prices. I have no data about rural areas, but there seems to have been a flight to cities where economic opportunities were strongest.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;The decade of mobile&lt;ul&gt;&lt;li&gt;Apps took over the world, and not in a good way. These days every company seems to feel the need for an app, even when it&amp;#39;s not justified. Some great things have happened in the world of apps to be sure, but it&amp;#39;s gone a bit overboard.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;The rise of apps also means the rise of closed systems and the need permission-granting entities (i.e. those who control the app stores). This is an unfortunate trend. The internet in the past thrived on being permission-less.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;VR was going to be cool and then was just... meh.&lt;ul&gt;&lt;li&gt;I was swept up in the VR fervor so it&amp;#39;s a bit disappointing it hasn&amp;#39;t quite changed the world, but I&amp;#39;m still hopeful for it. More on this later.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;SpaceX started landing their own rockets. &lt;ul&gt;&lt;li&gt;Even now in 2020 the implications of advances in rocketry haven&amp;#39;t played out, but it was supremely exciting to see the progress made in this field.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;They also launched a Tesla into space, which was mostly just a media sensation but fun to watch nonetheless.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;The decade to come&lt;/h1&gt;
&lt;p&gt;This section is a mix of observation and prediction. It should go without saying but I like to be explicit: I may be totally wrong about any predictions made here.&lt;/p&gt;
&lt;p&gt;That being said, let&amp;#39;s look at some trends.&lt;/p&gt;
&lt;h2&gt;COVID-19&lt;/h2&gt;
&lt;p&gt;A pandemic the likes of which we&amp;#39;ve not seen in the lifetime of anyone living. This pandemic forced hundreds of millions to isolate themselves and minimize their exposure to the world outside their immediate dwelling.&lt;/p&gt;
&lt;div class=&quot;toggle&quot;&gt;&lt;input id=toggle-1087970520937096 type=&quot;checkbox&quot; /&gt;&lt;label for=toggle-1087970520937096 class=&quot;toggle-title&quot;&gt;&lt;span class=&quot;bold&quot;&gt;Prediction:&lt;/span&gt; This will have long-lasting, transformational consequences. &lt;/label&gt;&lt;div class=&quot;toggle-body&quot;&gt;&lt;p&gt;I&amp;#39;m wholly unsure about the direct effects on future travel. I think the state of world travel will return to normal, but it will take at least a year. Even after lockdowns end in most or all countries, people may still be semi-confined to their country for a longer period of time.&lt;/p&gt;&lt;p&gt;Many countries had very different outcomes as they tried to deal with COVID. It&amp;#39;s not clear how that will play out. For example, what does reinstating travel look like between a country that fully contained the virus and a country where the virus spread wildly? &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Remote work and working from home (WFH)&lt;/h2&gt;
&lt;p&gt;I distinguish the two because they are slightly different.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Remote: You work somewhere other than an office, full time. No geo restrictions. &lt;ul&gt;&lt;li&gt;Ex: You can work for a Hong Kong based company while living in Lisbon.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;WFH: You work outside the office but generally reside in the same geographic area as the office. You might mix a few days a week of WFH with a few days of &amp;quot;work from office.&amp;quot;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;There&amp;#39;s some overlap here to be sure. The core distinction is that WFH is &lt;span class=&quot;italic&quot;&gt;generally&lt;/span&gt; still geographically tied to the company you work for, while remote isn&amp;#39;t.&lt;/p&gt;
&lt;div class=&quot;callout&quot;&gt;Working from home is &lt;span class=&quot;bold&quot;&gt;NOT&lt;/span&gt; the same as isolation. What people are experiencing under COVID is being called WFH because people are physically at home, but WFH is a very different experience than isolating yourself from your peers and the outside world. 

Many people are understandably quite dissatisfied with working from isolation. I hope over the longer term WFH doesn&amp;#39;t become stigmatized due to the associations created during COVID.&lt;/div&gt;
&lt;div class=&quot;toggle&quot;&gt;&lt;input id=toggle-22101733894093734 type=&quot;checkbox&quot; /&gt;&lt;label for=toggle-22101733894093734 class=&quot;toggle-title&quot;&gt;&lt;span class=&quot;bold&quot;&gt;Prediction:&lt;/span&gt; More people will work remotely than ever before.&lt;/label&gt;&lt;div class=&quot;toggle-body&quot;&gt;&lt;p&gt;Remote work means decoupling work from locale. &lt;/p&gt;&lt;p&gt;For anyone who chooses you can also continue to work at an office in the city of your company. The remote trend doesn&amp;#39;t mean you have to work remotely, it just means you can if you want to.&lt;/p&gt;&lt;p&gt;Some people really enjoy working form an office. Some do not. Now both types of person can have a more ideal work situation.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Urban Dispersion&lt;/h2&gt;
&lt;div class=&quot;toggle&quot;&gt;&lt;input id=toggle-7217074164933066 type=&quot;checkbox&quot; /&gt;&lt;label for=toggle-7217074164933066 class=&quot;toggle-title&quot;&gt;&lt;span class=&quot;bold&quot;&gt;Prediction&lt;/span&gt;: More people will move to smaller cities .&lt;/label&gt;&lt;div class=&quot;toggle-body&quot;&gt;&lt;p&gt;My prediction is this—while many will choose to remain in dense cities some subset of the current residents will choose to move because moving does not mean living their job.&lt;/p&gt;&lt;p&gt;There may also be people that simply want are already living outside a city and commuting in. I expect that given the chance many of these people would work from home during the week and commute in occasionally for social events or other non-work activities.&lt;/p&gt;&lt;p&gt;Longer term I expect this dispersion to create downward pressure on property values in the most urbanized areas. &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Decreased Business Travel&lt;/h2&gt;
&lt;div class=&quot;toggle&quot;&gt;&lt;input id=toggle-3125194089157275 type=&quot;checkbox&quot; /&gt;&lt;label for=toggle-3125194089157275 class=&quot;toggle-title&quot;&gt;&lt;span class=&quot;bold&quot;&gt;Prediction:&lt;/span&gt; Business travel will decrease significantly.&lt;/label&gt;&lt;div class=&quot;toggle-body&quot;&gt;&lt;p&gt;You may be thinking that conferencing—both video and audio—has been around for a while. Webex was around long before Zoom (indeed it was supposedly the genesis of Zoom), but there was still quite a lot of international travel strictly for the sake of meetings. My prediction is that this will change. Video conferencing is far cheaper in human time and monetary cost.&lt;/p&gt;&lt;p&gt;For companies interested in reducing costs without reducing productivity (read: all companies) this could be a significant boon.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Better VR&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m super biased here, because I really want VR to be a thing. So far it&amp;#39;s been very lackluster but if the trend towards more remote interactions increase I predict... &lt;/p&gt;
&lt;div class=&quot;toggle&quot;&gt;&lt;input id=toggle-43366974953843784 type=&quot;checkbox&quot; /&gt;&lt;label for=toggle-43366974953843784 class=&quot;toggle-title&quot;&gt;&lt;span class=&quot;bold&quot;&gt;Prediction:&lt;/span&gt; Increased market pressure for social VR. &lt;/label&gt;&lt;div class=&quot;toggle-body&quot;&gt;&lt;p&gt;My completely-biased hope is that the coming decade will show us the first killer app for VR. My prediction is that that app will be related to hangouts. You don&amp;#39;t need to solve VR locomotion, you just need people to be able to hang out and maybe do interesting VR stuff while their at it.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Could Notion be More Than Just Another App?]]></title><link>https://blog.iansinnott.com/could-notion-be-more-than-just-another-app/</link><guid isPermaLink="false">https://blog.iansinnott.com/could-notion-be-more-than-just-another-app/</guid><pubDate>Mon, 04 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Lately, I&amp;#39;ve been using &lt;a href=&quot;http://notion.so&quot;&gt;Notion.so&lt;/a&gt; quite a lot. I use it for my own personal note-taking, I use it for my startup, and I use it for writing this blog. &lt;/p&gt;
&lt;p&gt;It&amp;#39;s a &lt;span class=&quot;italic&quot;&gt;very&lt;/span&gt; flexible product that has such &lt;span class=&quot;bold&quot;&gt;promise&lt;/span&gt;.&lt;/p&gt;
&lt;h1&gt;The potential for greatness&lt;/h1&gt;
&lt;p&gt;Notion and tools like it get me excited because they make certain digital tasks much easier or more enjoyable. Unlike Evernote, I can actually imagine Notion becoming my second brain and storing &lt;span class=&quot;italic&quot;&gt;all my data&lt;/span&gt; about everything that doesn&amp;#39;t have a dedicated database (I&amp;#39;m not going to store users for an app in here, but for things like task lists or blog posts it&amp;#39;s great).&lt;/p&gt;
&lt;h1&gt;Signs of trouble&lt;/h1&gt;
&lt;p&gt;That being said, I&amp;#39;m worried for Notion. Not Notion the company—by all accounts they&amp;#39;re doing great and hiring ravenously during peak Covid—but the potential product. The product as-is is quite good, and will certainly remain quite good for a large swath of users. This is why I&amp;#39;m not worried for the company. However that &lt;span class=&quot;italic&quot;&gt;great potential&lt;/span&gt; the product has seems to be in danger.&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;Notion has thus far embraced flexibility, striking a nice balance between flexibility and being a UI-based program (UI-based software can never be as flexible as code). The database feature is extremely useful for certain types of data.&lt;/p&gt;
&lt;p&gt;The thing is, its not quite flexible enough to capture many use cases for databases. Most notably: &lt;/p&gt;
&lt;div class=&quot;callout&quot;&gt;A database has to interact with other systems to be useful.&lt;/div&gt;
&lt;h2&gt;Where&amp;#39;s the API?&lt;/h2&gt;
&lt;p&gt;This is where Notion currently falls short. There is no API*. No way for Notion to talk to other services or other services to talk to Notion. &lt;/p&gt;
&lt;h3&gt;Why this matters&lt;/h3&gt;
&lt;p&gt;There are many use cases which Notion could &lt;span class=&quot;italic&quot;&gt;potentially&lt;/span&gt; serve but isn&amp;#39;t yet equipped to do so. For example:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Backend database for data&lt;ul&gt;&lt;li&gt;Database for data? That sounds redundant. What I mean is that Notion probably won&amp;#39;t be the backend for your next social media app, but it could be the backend for email signups as you validate your next startup idea.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;CMS for anything &lt;ul&gt;&lt;li&gt;Like I currently do for my blog&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Notion has two killer features: Content authoring and databases. Using Notion as a CMS combines both. The editing experience is top-notch (if you like markdown) and the databases provide a great content creation and management experience for authors.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Source of truth for disparate data sources (dashboards)&lt;ul&gt;&lt;li&gt;With an API you could pull in and sync data from numerous other sources. Giving insight to teams that don&amp;#39;t want to interact with APIs or don&amp;#39;t want to open 12 tabs to see all the information they need.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The flexibility is the key. Many companies exist to provide visual databases, CMSs, dashboards. However they either lack flexibility or don&amp;#39;t offer the oddly effective marriage of prose editor and spreadsheet application that Notion does.&lt;/p&gt;
&lt;h1&gt;&lt;span class=&quot;italic&quot;&gt;Just&lt;/span&gt; another app?&lt;/h1&gt;
&lt;p&gt;So many apps these days don&amp;#39;t play nicely with other apps. They in fact try to lock you in or keep you within their walled garden as much as possible. For example, consider how many social apps will open links within the app and obfuscate the the button to open in a browser (maybe this is only relevant to iOS users). &lt;/p&gt;
&lt;p&gt;It&amp;#39;s not just apps though. Notion reminds me of Apple (not an app, I know. Bear with me). &lt;/p&gt;
&lt;p&gt;It&amp;#39;s an unfair comparison, but the reason is this: Apple makes good products, &lt;span class=&quot;yellow_background&quot;&gt;but their products are hampered by artificial limitations imposed by the company&lt;/span&gt;. iPhones and iPads cannot be great products because Apple locks them down and intentionally limits their usefulness. Apple does at times expand the usefulness of their products, but they do it at their own pace and on a one-off basis. They do not improve Siri&amp;#39;s AI, they add useful-yet-limited integrations like sports, weather, movie tickets, etc. They open up the API Siri API but only for approved use cases rather than opening it completely and/or letting Siri accomplish &lt;span class=&quot;italic&quot;&gt;existing&lt;/span&gt; tasks by integrating it with the OS. They dictate how their products will be used, which stifles creativity. A &amp;quot;bicycle for the mind&amp;quot; should adapt to you, not the other way around.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m worried Notion could go the same path. I&amp;#39;m worried they won&amp;#39;t add an API, or it will be watered down and only support &amp;quot;approved&amp;quot; use cases. I&amp;#39;m worried Notion will try to address integrating with other apps by adding limited one-off integrations over time, such as adding new types of embeds. I&amp;#39;m worried the community won&amp;#39;t be empowered to give Notion superpowers.&lt;/p&gt;
&lt;p&gt;I hope I&amp;#39;m wrong. Notion could be a life-changing tool.&lt;/p&gt;
&lt;p&gt;* There is an API, which is how I can write my blog in Notion and have it published to my website, but it&amp;#39;s Notion&amp;#39;s private API that the Notion apps themself use. This means it will almost certainly break at some point as they iterate on their product, requiring more work to update and maintain integrations like this blog. Moreover, since there are no docs the process of figuring out how to work with the notion API is much like reverse engineering.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[On Productivity]]></title><link>https://blog.iansinnott.com/on-productivity/</link><guid isPermaLink="false">https://blog.iansinnott.com/on-productivity/</guid><pubDate>Tue, 21 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Lately I&amp;#39;m not feeling particularly productive. I&amp;#39;m getting things done to be sure, but it all feels sluggish and dull.&lt;/p&gt;
&lt;h1&gt;What productivity feels like&lt;/h1&gt;
&lt;p&gt;You know it when you feel it. It&amp;#39;s exhilarating. It&amp;#39;s a sense of accomplishment accompanied by a desire to do more. This is the defining characteristic of the productivity I&amp;#39;m talking about:&lt;/p&gt;

&lt;div class=&quot;callout&quot;&gt;After getting work done you&amp;#39;re energized and ready for more.&lt;/div&gt;

&lt;p&gt;When I&amp;#39;m feeling my most productive sleep feels like a chore. There&amp;#39;s just so much to do and I know I can do it! &lt;/p&gt;
&lt;p&gt;Compare this to the more general feeling &amp;quot;getting things done&amp;quot; where there&amp;#39;s a sense of completion or even accomplishment but not a desire to do more.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;After getting things done I want a beer 🍺&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;After a day of productivity I want to do more work 👨‍💻&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;There&amp;#39;s nothing wrong with the former—that&amp;#39;s how I feel after doing my taxes for example—but it&amp;#39;s the latter that I&amp;#39;m pursuing when working on a new project.&lt;/p&gt;
&lt;h1&gt;Being productive on new projects&lt;/h1&gt;
&lt;p&gt;I have some thoughts on what&amp;#39;s going on. I think it&amp;#39;s the new domain of knowledge I find myself needing that is leading to this lack of productivity. When starting a new programming project it is in many ways not &amp;quot;new&amp;quot; because I&amp;#39;m very familiar with the core activity (programming). &lt;/p&gt;
&lt;p&gt;However, when starting out trying to sell a product the domain of knowledge is very different, and that&amp;#39;s what I find myself grappling with at present.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Discoverability and Productivity]]></title><link>https://blog.iansinnott.com/discoverability-and-productivity/</link><guid isPermaLink="false">https://blog.iansinnott.com/discoverability-and-productivity/</guid><pubDate>Sat, 18 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Recently I&amp;#39;ve been exploring options for solving technical problems that I just don&amp;#39;t want to get into, or for which there are already ample solutions in the wild. Things like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Authentication and authorization with third-party APIs&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Scheduling (cron) &lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Server side functions without a server&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;An Example: CRON&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Do I use cron often enough to learn the commands? at present the answer is a clear no. But is cron occasionally useful? Hell yes. When it&amp;#39;s useful it&amp;#39;s extremely useful, which is to say it&amp;#39;s straight up super useful I just don&amp;#39;t need it that often.&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;An example: Dev ops related tasks&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Do I manage infrastructure often enough to learn all the &lt;code &gt;gcloud&lt;/code&gt; commands? No. However, when I need some infrastructure a good UI is very much appreciated. Also, I &lt;span class=&quot;italic&quot;&gt;do&lt;/span&gt; manage infrastructure, just not very often. So I don&amp;#39;t have much incentive to become a dev ops wizard and yet I still need to do the task sometimes.&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;Exploring the options&lt;/h1&gt;
&lt;p&gt;Let&amp;#39;s look at some of whats available in the wild right now&lt;/p&gt;

&lt;div class=&quot;toggle&quot;&gt;&lt;input id=toggle-735083283470503 type=&quot;checkbox&quot; /&gt;&lt;label for=toggle-735083283470503 class=&quot;toggle-title&quot;&gt;Zapier (the expensive one)&lt;/label&gt;&lt;div class=&quot;toggle-body&quot;&gt;&lt;ul&gt;&lt;li&gt;They really tend towards NoCode as opposed to LowCode, which means their UI is quite advanced but if you are inclined to actually write some code you might find yourself meandering through the UI for minutes on end just to write the equivalent of a simple function. I&amp;#39;m thinking specifically of logic statements, filtering and data mapping.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Their integrations &lt;span class=&quot;italic&quot;&gt;really work&lt;/span&gt; which is impressive. It&amp;#39;s no mean feat to support ever-changing APIs.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;toggle&quot;&gt;&lt;input id=toggle-13115751125121955 type=&quot;checkbox&quot; /&gt;&lt;label for=toggle-13115751125121955 class=&quot;toggle-title&quot;&gt;Integromat&lt;/label&gt;&lt;div class=&quot;toggle-body&quot;&gt;&lt;ul&gt;&lt;li&gt;Not much else to say about them since I just started playing with the service, but I&amp;#39;m a fan.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;toggle&quot;&gt;&lt;input id=toggle-5959268832576059 type=&quot;checkbox&quot; /&gt;&lt;label for=toggle-5959268832576059 class=&quot;toggle-title&quot;&gt;&lt;a href=&quot;https://n8n.io/integrations&quot;&gt;n8n&lt;/a&gt;&lt;/label&gt;&lt;div class=&quot;toggle-body&quot;&gt;&lt;ul&gt;&lt;li&gt;Free to use but not for commercial interests. Still, may well work for personal automation. The reason this is more worrying is that if it doesn&amp;#39;t work out as a business it may completely lose traction.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Here&amp;#39;s the repo: &lt;a href=&quot;https://github.com/n8n-io/n8n&quot;&gt;https://github.com/n8n-io/n8n&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;toggle&quot;&gt;&lt;input id=toggle-49984821999432527 type=&quot;checkbox&quot; /&gt;&lt;label for=toggle-49984821999432527 class=&quot;toggle-title&quot;&gt;IFTTT&lt;/label&gt;&lt;div class=&quot;toggle-body&quot;&gt;&lt;ul&gt;&lt;li&gt;Abysmal UX, although it is possible to get things done. It&amp;#39;s a non-trivial product so I know some people put a lot of time and effort into it. This is certainly not a critique of those people, but I feel I should not pull any punches here. I gave up on using IFTTT &lt;span class=&quot;italic&quot;&gt;multiple times&lt;/span&gt; before ever getting it to do anything meaningful because I couldn&amp;#39;t figure out how to create a new workflow. Hard to describe in words, but I found myself expecting a &amp;quot;create new&amp;quot; button &lt;span class=&quot;italic&quot;&gt;so much&lt;/span&gt; that I didn&amp;#39;t even go looking in other parts of the UI for it. I thought it was impossible to do anything other than use premade workflows.&lt;figure&gt;&lt;img src=&quot;https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fdd7e3145-7f69-4804-916c-53031f987d64%2F2020-04-18_at_2.24_PM.png?table=block&amp;id=&quot; alt=&quot;The actual area to &quot;Create&quot; a new workflow is in the profile dropdown menu... why? &quot;/&gt;&lt;figcaption&gt;The actual area to &amp;quot;Create&amp;quot; a new workflow is in the profile dropdown menu... why? &lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;toggle&quot;&gt;&lt;input id=toggle-8263993509867495 type=&quot;checkbox&quot; /&gt;&lt;label for=toggle-8263993509867495 class=&quot;toggle-title&quot;&gt;OneGraph&lt;/label&gt;&lt;div class=&quot;toggle-body&quot;&gt;&lt;ul&gt;&lt;li&gt;Currently certain endpoints (like YouTube) are pretty limited, but they&amp;#39;re actively working on it. &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://nodered.org/&quot;&gt;Node-red&lt;/a&gt;&lt;ul&gt;&lt;li&gt;I saved this for last since it&amp;#39;s probably the most promising of the self-hosted solutions. Looks very powerful and fairly intuitive to use. More importantly it looks &lt;span class=&quot;italic&quot;&gt;extensible&lt;/span&gt; and community supported.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;What&amp;#39;s troubling is that I&amp;#39;m not sure why it exists. It seems to be an IBM project, but why? If it remains free and open source, what&amp;#39;s the incentive for IBM? They do offer to set it up quickly for you in their cloud infrastructure, but that doesn&amp;#39;t seem like a big enough lift to put them on a competitive footing with AWS or GCP.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;I&amp;#39;ve been playing around with Node-red recently and so far it seems like it might just hit the sweet spot of not overemphasizing &amp;quot;No code&amp;quot; while still providing useful UI abstractions over many common functions.&lt;/p&gt;
&lt;h1&gt;A middle ground&lt;/h1&gt;
&lt;p&gt;My thinking has gravitated to this idea, that there must be a middle ground where you know in your soul and muscle memory that which is relevant most often (this makes you productive) and for all the rest you have a discoverable UI that let&amp;#39;s you be productive enough given how little you use the service or function.&lt;/p&gt;
&lt;p&gt;The tricky part is it&amp;#39;s going to be different for everyone. For some, the hyper specific &lt;code &gt;gcloud&lt;/code&gt; or &lt;code &gt;aws&lt;/code&gt; commands are extremely relevant and it pays to know them and use them. For others, maybe the &lt;span class=&quot;italic&quot;&gt;No&lt;/span&gt;Code approach is good enough and nothing specific enough to warrant real code is ever needed.&lt;/p&gt;
&lt;p&gt;I of course am somewhere in the middle. My thesis is this:&lt;/p&gt;
&lt;div class=&quot;callout&quot;&gt;LowCode solutions could prove to be the perfect medium to capture all the marginal use cases. All the use cases where it&amp;#39;s not worth it to learn the thing well, but prior to LowCode learning it well was the only option.&lt;/div&gt;
</content:encoded></item><item><title><![CDATA[Searching vs Filtering]]></title><link>https://blog.iansinnott.com/searching-vs-filtering/</link><guid isPermaLink="false">https://blog.iansinnott.com/searching-vs-filtering/</guid><pubDate>Tue, 14 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;It struck me today that the way I use a search engines is often not to search, per se, but to find something I know I&amp;#39;ve visited in the past.&lt;/p&gt;

&lt;p&gt;What... 🤯&lt;/p&gt;

&lt;p&gt;The difference between searching and filtering is not exactly mind blowing, however, I generally like to use the best tool for a given job and in this case I was not. Search engines provide a ton of value to be sure, but they are decidedly not great at finding things you&amp;#39;ve already visited. If you&amp;#39;ve ever tried to remember specific keywords just to get Google to surface some article you read a while back you know what I mean.&lt;/p&gt;
&lt;h1&gt;The right tool for the job&lt;/h1&gt;
&lt;p&gt;Yesterday I discovered &lt;a href=&quot;https://www.stclairsoft.com/HistoryHound/&quot;&gt;HistoryHound&lt;/a&gt;, a macOS desktop app that reads all your browsing history from all your browsers and builds a search intex from it. The real killer feature is that it will download the full webpage and use the contents of the page to build the index, not just the title of the page. This means searching becmes much easier—titles aren&amp;#39;t always what you expect or remember.&lt;/p&gt;
&lt;h1&gt;The ideal tool&lt;/h1&gt;
&lt;p&gt;The ideal tool would do the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Index browsing history based on full-text as well as titles&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Distill a minimal, content-mostly copy fo the web page and archive it &lt;ul&gt;&lt;li&gt;In case the site goes down or changes. Automatically submitting your browser history to &lt;a href=&quot;http://archive.org&quot;&gt;archive.org&lt;/a&gt; might also be an option, but offline would be faster.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;This is similar to a number of browser plugins or iOS&amp;#39;s reader feature that remove most irrelevant elements of a page to focus on the content.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt; Keep the archive forever&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Allow programmatic access&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;HistoryHound does some of this currently:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;✅ Index browser history&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;❌ Archive pages&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;❌ Keep pages forever&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;❌ Programmatic access&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;So I&amp;#39;m still on the search for the ideal tool. Or perhaps HistoryHound actually does do some of this but I&amp;#39;m unaware of it. I sent an email to their support site with a few questions. Fingers crossed.&lt;/p&gt;

&lt;p&gt;The big sticking point is programmatic access. For common tasks I use commands, not clicks and I want to incorporate history search into my workflow. &lt;/p&gt;


</content:encoded></item><item><title><![CDATA[On turning 30]]></title><link>https://blog.iansinnott.com/on-turning-30/</link><guid isPermaLink="false">https://blog.iansinnott.com/on-turning-30/</guid><pubDate>Wed, 19 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Today I&amp;#39;m 30 years old. Thinking about this day in particular made me want to write something.&lt;/p&gt;
&lt;p&gt;Today I have no special plans. What should I do for my 30th?&lt;/p&gt;
&lt;h2&gt;&lt;span class=&quot;bold&quot;&gt;🛸 Take a vacation?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;This would be quite appealing, but not nearly as much so now that I&amp;#39;m living in Taiwan. I&amp;#39;m essentially where I want to be for now. I&amp;#39;m not on a beach as I write this, so there&amp;#39;s still plenty of room for vacationing, but the drive to immediately jump ship for somewhere more tropical or novel is simply not there. I&amp;#39;m happy here.&lt;/p&gt;
&lt;h2&gt;&lt;span class=&quot;bold&quot;&gt;🤑 Buy something?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Also plenty of options here. There are a bunch of material things I&amp;#39;d like to have, but nothing pressing. Nothing I want so bad that I simply need to go out and get it immediately.&lt;/p&gt;
&lt;p&gt;The most important bits are all taken care of:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Comfortable place to live&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Access to delicious food&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Computer + phone (i.e. electronics to meet my needs)&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Gym membership&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Access to a social circle, events&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;All my basic needs are met so all the various things I might buy just don&amp;#39;t feel pressing enough.&lt;/p&gt;
&lt;h2&gt;&lt;span class=&quot;bold&quot;&gt;🥂 Go out and party?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;The classic! I have certainly done this one on many past birthdays and I&amp;#39;m sure there will be many more nights of revelry in the future. There&amp;#39;s just no need for a reason to revel—if I want to go out I will and tonight I don&amp;#39;t feel the desire.&lt;/p&gt;
&lt;h2&gt;&lt;span class=&quot;bold&quot;&gt;🧘‍♂️ In closing&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;To be clear, I haven&amp;#39;t decided that I&amp;#39;m now too &lt;span class=&quot;italic&quot;&gt;old&lt;/span&gt;, too &lt;span class=&quot;italic&quot;&gt;mature&lt;/span&gt;, too &lt;span class=&quot;italic&quot;&gt;whatever&lt;/span&gt; for any of the above, I just don&amp;#39;t feel the need to do something special as I once did.&lt;/p&gt;
&lt;p&gt;In a sense, everything feels to be on track, and that&amp;#39;s the best birthday gift I could wish for.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Migrating my blog to Gatsby (Part 2 of Gatsby migration)]]></title><link>https://blog.iansinnott.com/migrating-my-blog-to-gatsby-part-2-of-gatsby-migration/</link><guid isPermaLink="false">https://blog.iansinnott.com/migrating-my-blog-to-gatsby-part-2-of-gatsby-migration/</guid><pubDate>Mon, 21 Aug 2017 00:00:00 GMT</pubDate><content:encoded>
&lt;h1&gt;Migrating a blog to Gatsby&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;NOTE:&lt;/span&gt; This is part 2 of my Gatsby migration series. You can find part 1 here: &lt;a href=&quot;http://blog.iansinnott.com/migrating-to-gatsbyjs-part-1/&quot;&gt;Migrating to GatsbyJS Part 1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Abstract:&lt;/span&gt; Gatsby is a great tool for building a blog. In part 1 I did the more simple task of migrating an existing React site to Gatsby. This time I migrated my blog, which was a lot more involved and required a lot more Gatsby-specific knowledge.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s the gist of what I&amp;#39;m going to cover:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Preparing an existing blog for migration&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Configuring Gatsby to handle markdown&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Querying your markdown files using GraphQL&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Adding custom data to the generated GraphQL schema&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Turning all your markdown files into static pages&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Let&amp;#39;s jump in.&lt;/p&gt;
&lt;h2&gt;Preparing your existing blog for migration&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;NOTE:&lt;/span&gt; If you don&amp;#39;t already have a blog or want to create one from scratch there&amp;#39;s a &lt;a href=&quot;https://www.gatsbyjs.org/blog/2017-07-19-creating-a-blog-with-gatsby/&quot;&gt;tutorial for exactly that on Gatsby&amp;#39;s website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s move some files around. Gatsby gives you a good amount of flexibility when it comes to file structure, but for consistency with the docs I&amp;#39;m going to use their suggested file structure for migrating my blog. How you handle this step will depend on what you&amp;#39;re migrating from. I am migrating form Hexo, which is very similar to Jekyll in how it structures files.&lt;/p&gt;
&lt;h3&gt;Clean up your source repo&lt;/h3&gt;
&lt;p&gt;For the first step, clear everything other than your actual post content out of the repo. For me, this meant everything that wasn&amp;#39;t under the &lt;code &gt;source/&lt;/code&gt; directory (that&amp;#39;s a Hexo convention). One way to do this is to take everything not relevant to the upcoming Gatsby blog and move it into its own directory that doesn&amp;#39;t interfere with anything. I chose to create &lt;code &gt;hexo.bak/&lt;/code&gt; where all my old blog files would live (except for the content).&lt;/p&gt;
&lt;p&gt;You could also simply delete everything other than your raw content. It&amp;#39;s up to you. But once your done with this cleanup you should have made a decision on where to hold your content, and moved everything else away or removed it.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s what that looks like for me:&lt;/p&gt;
&lt;pre&gt;.
├── content
│   ├── _drafts
│   │   └── [ Draft markdown files ... ]
│   └── _posts
│       └── [ Post markdown files ... ]
└── hexo.bak
    └── [ All my old hexo related files ... ]
&lt;/pre&gt;
&lt;p&gt;For the rest of this post I&amp;#39;ll ignore the &lt;code &gt;hexo.bak/&lt;/code&gt; directory because it&amp;#39;s not relevant to Gatsby.&lt;/p&gt;
&lt;h2&gt;Set up Gatsby&lt;/h2&gt;
&lt;p&gt;You need to copy all the standard Gatsby boilerplate into your directory. There are many ways you could do this but I&amp;#39;ll go over what I did.&lt;/p&gt;
&lt;p&gt;To get all the Gatsby files you can use the Gatsby CLI.&lt;/p&gt;
&lt;pre&gt;npm install -g gatsby-cli   # Install gatsby CLI
gatsby new temp-gatsby-files # Initialize gatsby in a temp directory
cp -R temp-gatsby-files/* ./ # Copy all the files into your root directory
rm -rf temp-gatsby-files     # Remove the temp directory
&lt;/pre&gt;
&lt;p&gt;However you get Gatsby initialized in your repository root, afterwards you should have a file structure that looks something like this:&lt;/p&gt;
&lt;pre&gt;.
├── content
│   └── [ Markdown files ... ]
├── public
│   └── index.html
├── src
│   ├── layouts
│   │   ├── index.css
│   │   └── index.js
│   └── pages
│       ├── 404.js
│       ├── index.js
│       └── page-2.js
├── gatsby-config.js
└── package.json
&lt;/pre&gt;
&lt;p&gt;Now run the Gatsby dev server to make sure everything works:&lt;/p&gt;
&lt;pre&gt;npm run develop&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;NOTE:&lt;/span&gt; If you open up &lt;code &gt;package.json&lt;/code&gt; you can see what the &lt;code &gt;develop&lt;/code&gt; script is doing.&lt;/p&gt;
&lt;p&gt;Boom 💥! The default site is up.&lt;/p&gt;
&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/Screen%20Shot%202017-08-26%20at%2012.57.40%20PM.png?table=block&amp;id=&quot; /&gt;
&lt;h2&gt;Rendering a list of posts&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s customize that landing page to render a list of posts. You will also probably want to customize the header and overall layout.&lt;/p&gt;
&lt;h3&gt;Customizing the layout&lt;/h3&gt;
&lt;p&gt;This is pretty simple. Just modify the primary layout file that was generated:&lt;/p&gt;
&lt;pre&gt;src/layouts/index.js
&lt;/pre&gt;
&lt;p&gt;You can also customize the styles in &lt;code &gt;src/layouts/index.css&lt;/code&gt;. Stylus, Sass, Less, etc are also supported if you add the appropriate plugin. &lt;a href=&quot;https://github.com/gatsbyjs/gatsby/tree/master/packages&quot;&gt;Here&amp;#39;s the list&lt;/a&gt; (there&amp;#39;s a page on the website too, but the source is more up to date).&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Sidenote:&lt;/span&gt; You can also create your own plugin to do whatever you want, which I talked about in part 1.&lt;/p&gt;
&lt;h3&gt;Customizing the landing page&lt;/h3&gt;
&lt;p&gt;Also straightforward, just edit:&lt;/p&gt;
&lt;pre&gt;src/pages/index.js
&lt;/pre&gt;
&lt;p&gt;This file is where we&amp;#39;ll actually render out the list of posts. So where the hell does that data come from??&lt;/p&gt;
&lt;h3&gt;Querying data with GraphQL&lt;/h3&gt;
&lt;p&gt;Now we&amp;#39;re getting in to the meat of Gatsby and one of the areas where it really shines: Data sources. You can pull in data from anywhere to be rendered in your blog, but for our use case the only data source will be the file system (aka the markdown files stored on your hard drive).&lt;/p&gt;
&lt;p&gt;But first, let&amp;#39;s check out &lt;a href=&quot;https://github.com/graphql/graphiql&quot;&gt;GraphiQL&lt;/a&gt;. It&amp;#39;s an excellent playground for testing out GraphQL queries in any GraphQL project. Gatsby ships with it enabled by default, thank goodness. GraphQL can actually be oddly opaque without this excellent tool.&lt;/p&gt;
&lt;p&gt;Visit &lt;a href=&quot;http://localhost:8000/___graphql&quot;&gt;http://localhost:8000/___graphql&lt;/a&gt; in the browser and you&amp;#39;ll be greeted with this lovely dev tool:&lt;/p&gt;
&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/Screen%20Shot%202017-08-26%20at%201.31.08%20PM.png?table=block&amp;id=&quot; /&gt;
&lt;p&gt;I recommend getting to know this tool if you&amp;#39;re not already familiar. You will be coming back to this often to find the right query to pull data for your pages.&lt;/p&gt;
&lt;h3&gt;Querying the file system&lt;/h3&gt;
&lt;p&gt;If you play around with GraphiQL you&amp;#39;ll notice there&amp;#39;s not that much there. Let&amp;#39;s fix that. We need to teach Gatsby how to query the file system. Luckily this is so common it&amp;#39;s been done for you. Install the file system source plugin:&lt;/p&gt;
&lt;pre&gt;yarn add gatsby-source-filesystem
&lt;/pre&gt;
&lt;p&gt;Now modify &lt;code &gt;gatsby-config.js&lt;/code&gt; to both use the plugin and tell it what directory to source files from. Add this to the &lt;code &gt;plugins&lt;/code&gt; array:&lt;/p&gt;
&lt;pre&gt;{
  resolve: &amp;#39;gatsby-source-filesystem&amp;#39;,
  options: {
    name: &amp;#39;posts&amp;#39;, // Name this source
    path: path.resolve(&amp;#39;./content/_posts&amp;#39;), // Tell it where to find the files
  },
}
&lt;/pre&gt;
&lt;p&gt;As you can see on my system I keep all my markdown files under &lt;code &gt;content/_posts/&lt;/code&gt; which is reflected in the &lt;code &gt;path&lt;/code&gt; option for the plugin.&lt;/p&gt;
&lt;p&gt;Now restart the dev server and open GraphiQL up again. You should have access to the &lt;code &gt;allFile&lt;/code&gt; root type. Try running this query:&lt;/p&gt;
&lt;pre&gt;query {
  allFile {
    edges {
      node {
        ext
        name
      }
    }
  }
}
&lt;/pre&gt;
&lt;p&gt;This will list all the files in the directory you specified to the plugin. You can query all sorts of information about the files. Just investigate the fields available to you under &lt;code &gt;node&lt;/code&gt; in GraphQL.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Pro tip:&lt;/span&gt; Hit &amp;lt;kbd&amp;gt;ctrl&amp;lt;/kbd&amp;gt;&amp;lt;kbd&amp;gt;space&amp;lt;/kbd&amp;gt; to trigger autocomplete and bring up the list of all available fields.&lt;/p&gt;
&lt;h3&gt;Handling Markdown&lt;/h3&gt;
&lt;p&gt;Being able to query files is a big win, and if you have a directory of HTML files this is all you will need. But if you want to render markdown files as HTML you will need another plugin. Let&amp;#39;s add that now:&lt;/p&gt;
&lt;pre&gt;yarn add gatsby-transformer-remark
&lt;/pre&gt;
&lt;p&gt;As before, add it to the &lt;code &gt;plugins&lt;/code&gt; field in &lt;code &gt;gatsby-config.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;{
  resolve: &amp;#39;gatsby-transformer-remark&amp;#39;,
  options: {
    plugins: [],
  },
}
&lt;/pre&gt;
&lt;p&gt;This particular plugin can also take &lt;span class=&quot;italic&quot;&gt;its own&lt;/span&gt; plugins via the &lt;code &gt;plugins&lt;/code&gt; option. I&amp;#39;ve left it empty but this is where you can add things like syntax highlighting or auto-linking of headers. Here&amp;#39;s the current list: &lt;a href=&quot;https://www.npmjs.com/search?q=gatsby-remark&quot;&gt;https://www.npmjs.com/search?q=gatsby-remark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Save and restart your dev server, then go into GraphiQL and try out the new &lt;code &gt;allMarkdownRemark&lt;/code&gt; field:&lt;/p&gt;
&lt;pre&gt;query {
  allMarkdownRemark {
    edges {
      node {
        html
      }
    }
  }
}
&lt;/pre&gt;
&lt;p&gt;This query gives you the full HTML for all your markdown files. If you are using frontmatter you can also access that here. I&amp;#39;m assuming you have a &lt;code &gt;title&lt;/code&gt; field in your frontmatter:&lt;/p&gt;
&lt;pre&gt;query {
  allMarkdownRemark {
    edges {
      node {
        frontmatter {
          title
        }
        html
      }
    }
  }
}
&lt;/pre&gt;
&lt;p&gt;Now you have access to the full HTML of your posts as well as the titles. With this we have enough information to render a list of posts on the front page.&lt;/p&gt;
&lt;h3&gt;Getting GraphQL data into your components&lt;/h3&gt;
&lt;p&gt;Gatsby has the concept of the &lt;code &gt;pageQuery&lt;/code&gt;. For every page you create you can specify a &lt;code &gt;pageQuery&lt;/code&gt; that will pass data into the default export of that page.&lt;/p&gt;
&lt;pre&gt;// src/pages/index.js
import React from &amp;#39;react&amp;#39;;

export default class BlogIndex extends React.Component {
  render() {
    // Handle graphql errors
    if (this.props.errors &amp;amp;&amp;amp; this.props.errors.length) {
      this.props.errors.forEach(({ message }) =&amp;gt; {
        console.error(`BlogIndex render errr: ${message}`);
      });
      return &amp;lt;h1&amp;gt;Errors found: Check the console for details&amp;lt;/h1&amp;gt;;
    }

    return (
      &amp;lt;div&amp;gt;
        &amp;lt;h2&amp;gt;Some things I wrote&amp;lt;/h2&amp;gt;
        {this.props.data.allMarkdownRemark.edges.map(({ node }, i) =&amp;gt; (
          &amp;lt;a key={i}&amp;gt;{node.frontmatter.title}&amp;lt;/a&amp;gt;
        ))}
      &amp;lt;/div&amp;gt;
    );
  }
}

export const pageQuery = graphql`
  query {
    allMarkdownRemark {
      edges {
        node {
          frontmatter { title }
        }
      }
    }
  }
`;
&lt;/pre&gt;
&lt;p&gt;This is a simplified example, but there are a few things going on that might not be intuitive.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;In the render method we first check for errors, and return early if any are found&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;If no error are found we render a link for each item in the array: &lt;code &gt;this.props.data.allMarkdownRemark.edges&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;We export a &lt;code &gt;pageQuery&lt;/code&gt; variable that is constructed using the magic &lt;code &gt;graphql&lt;/code&gt; global&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The error handling is pretty straightforward, if a bit verbose, as long as you know what graphql responses look like. In case you didn&amp;#39;t know, if you get an error in a graphql query the response will contain the &lt;code &gt;errors&lt;/code&gt; array. We check for this array and handle it accordingly.&lt;/p&gt;
&lt;p&gt;Now let&amp;#39;s looks specifically at where we render a link for each blog post:&lt;/p&gt;
&lt;pre&gt;{this.props.data.allMarkdownRemark.edges.map(({ node }, i) =&amp;gt; (
  &amp;lt;a key={i}&amp;gt;{node.frontmatter.title}&amp;lt;/a&amp;gt;
))}
&lt;/pre&gt;
&lt;p&gt;Notice that the data shape is exactly what we specified in the GraphQL query. This may seem like a lot of nesting just to get at an array of data, but GraphQL emphasizes &lt;span class=&quot;italic&quot;&gt;clarity&lt;/span&gt; over conciseness. You&amp;#39;ll notice that if you run your GraphQL query in GraphiQL the data will have the exact shape described above.&lt;/p&gt;
&lt;p&gt;And that brings us finally to the page query:&lt;/p&gt;
&lt;pre&gt;export const pageQuery = graphql`
  query {
    allMarkdownRemark {
      edges {
        node {
          frontmatter { title }
        }
      }
    }
  }
`;
&lt;/pre&gt;
&lt;p&gt;This is how you get data from Gatsby into your react components. Make sure you don&amp;#39;t misspell &lt;code &gt;pageQuery&lt;/code&gt; otherwise you won&amp;#39;t get what you want.&lt;/p&gt;
&lt;p&gt;Also note that &lt;code &gt;graphql&lt;/code&gt; is just some magic global variable. Your linter will probably complain about it being undefined and you will just have to ignore it. Personally I think it would be more clear if &lt;code &gt;graphql&lt;/code&gt; was imported from Gatsby, but the project is still young so the API could change at some point ¯\\\&lt;span class=&quot;italic&quot;&gt;(ツ)\&lt;/span&gt;/¯&lt;/p&gt;
&lt;h3&gt;Linking to blog posts&lt;/h3&gt;
&lt;blockquote&gt;But the links don&amp;#39;t link anywhere... where&amp;#39;s that href?&lt;/blockquote&gt;
&lt;p&gt;Let&amp;#39;s remedy that. Import the &lt;code &gt;gatsby-link&lt;/code&gt; component and swap it for the simple &lt;code &gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag that was in there before:&lt;/p&gt;
&lt;pre&gt;import React from &amp;#39;react&amp;#39;;
import Link from &amp;#39;gatsby-link&amp;#39;;

export default class BlogIndex extends React.Component {
  render() {
    // Handle graphql errors
    if (this.props.errors &amp;amp;&amp;amp; this.props.errors.length) {
      this.props.errors.forEach(({ message }) =&amp;gt; {
        console.error(`BlogIndex render errr: ${message}`);
      });
      return &amp;lt;h1&amp;gt;Errors found: Check the console for details&amp;lt;/h1&amp;gt;;
    }

    return (
      &amp;lt;div&amp;gt;
        &amp;lt;h2&amp;gt;Some things I wrote&amp;lt;/h2&amp;gt;
        {this.props.data.allMarkdownRemark.edges.map(({ node }, i) =&amp;gt; (
          &amp;lt;Link to={/* ??? */} key={i}&amp;gt;{node.frontmatter.title}&amp;lt;/Link&amp;gt;
        ))}
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/pre&gt;
&lt;blockquote&gt;But what does it link to? What is the URL of each blog post?&lt;/blockquote&gt;
&lt;p&gt;That&amp;#39;s an open question because it depends on your data and how you structured it before. For example, if you included the intended URL in the frontmatter of each post it&amp;#39;s a simple matter of updating your query to include that:&lt;/p&gt;
&lt;pre&gt;export const pageQuery = graphql`
  query {
    allMarkdownRemark {
      edges {
        node {
          frontmatter {
            title
            url # &amp;lt;-------------  New!
          }
        }
      }
    }
  }
`;
&lt;/pre&gt;
&lt;pre&gt;{this.props.data.allMarkdownRemark.edges.map(({ node }, i) =&amp;gt; (
  &amp;lt;Link to={node.frontmatter.url} key={i}&amp;gt;{node.frontmatter.title}&amp;lt;/Link&amp;gt;
))}
&lt;/pre&gt;
&lt;p&gt;Many existing Gatsby examples use &lt;code &gt;path&lt;/code&gt; within each markdown file&amp;#39;s frontmatter to designate the url. For example:&lt;/p&gt;
&lt;pre&gt;---
title: My Post
path: my-post
---

# My post
&lt;/pre&gt;
&lt;p&gt;In this case &lt;code &gt;node.frontmatter.path&lt;/code&gt; would be used to construct URLs. If this is the case for you then you&amp;#39;re probably all set for the index page.&lt;/p&gt;
&lt;blockquote&gt;But what if the URL for each post is NOT in the frontmatter?&lt;/blockquote&gt;
&lt;p&gt;This was exactly my situation. The URL was actually derived from the title of the post so I had to figure out how to augment the GraphQL fields with my own data. Namely the URL of the post derived from the post title.&lt;/p&gt;
&lt;h2&gt;Adding custom data to the GraphQL schema&lt;/h2&gt;
&lt;p&gt;If I have a post named &amp;quot;Isn&amp;#39;t this a fun title&amp;quot; then I want the URL to be &amp;quot;isnt-this-a-fun-title&amp;quot;. Notice that spaces turn into hyphens and special characters are removed. This is simple enough to do in JavaScript, but it felt wrong to do it on the fly when rendering components. This is &lt;span class=&quot;italic&quot;&gt;data&lt;/span&gt; so I wanted to be able to query it through GraphQL.&lt;/p&gt;
&lt;p&gt;Enter &lt;code &gt;setFieldsOnGraphQLNodeType&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Aside:&lt;/span&gt; Gatsby is super extensible. It&amp;#39;s the primary reason I switched from Hexo which worked well enough for my use case.&lt;/p&gt;
&lt;p&gt;In order to extend this particular part of Gatsby you need to create a &lt;code &gt;gatsby-node.js&lt;/code&gt; file. This file let&amp;#39;s you work with all of Gatsby&amp;#39;s plugin hooks that are run in node. The GraphQL server is run in node, so this is where we add custom fields. Example:&lt;/p&gt;
&lt;pre&gt;// gatsby-node.js
const { GraphQLString } = require(&amp;#39;graphql&amp;#39;);

const getURL = (node) =&amp;gt; {
  /* See the source link below for implementation */
};

exports.setFieldsOnGraphQLNodeType = ({ type }) =&amp;gt; {
  if (type.name !== &amp;#39;MarkdownRemark&amp;#39;) {
    return {};
  }

  return Promise.resolve({
    url: {
      type: GraphQLString,
      resolve: node =&amp;gt; getURL(node),
    },
  });
};
&lt;/pre&gt;
&lt;blockquote&gt;Source code for gatsby-node.js here.&lt;/blockquote&gt;
&lt;p&gt;If you&amp;#39;ve worked with GraphQL before this should look very familiar. In fact, as you can see the string type is imported directly from GraphQL and not from Gatsby.&lt;/p&gt;
&lt;p&gt;Basically you check the type of node and if it&amp;#39;s a type your interested in you resolve with some fields. Fields in GraphQL require a &lt;code &gt;type&lt;/code&gt; and a way to &lt;code &gt;resolve&lt;/code&gt; the value.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve omitted the implementation of &lt;code &gt;getURL&lt;/code&gt; here, but you can see the &lt;a href=&quot;https://github.com/iansinnott/iansinnott.github.io/blob/gatsby-migration/gatsby-node.js#L17&quot;&gt;source code here&lt;/a&gt; (NOTE: in the source it&amp;#39;s called &lt;code &gt;getSlug&lt;/code&gt; instead of &lt;code &gt;getURL&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;You can use this technique to add any field you want to your GraphQL schema. Now you should be all set to render &lt;code &gt;Link&lt;/code&gt; components that actually point somewhere interesting 👍.&lt;/p&gt;
&lt;h2&gt;Generating pages from markdown files&lt;/h2&gt;
&lt;p&gt;This is where it all comes together. If you finished the last section you would have ended up with a bunch of links that point to the correct URL but when you tried visiting the URL there was nothing there 😕. This is because Gatsby hasn&amp;#39;t yet generated an additional pages. It&amp;#39;s still just rendering whatever is in your &lt;code &gt;src/pages/&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;By default, Gatsby will create a static HTML page for everything under &lt;code &gt;src/pages/&lt;/code&gt;. At this point we&amp;#39;ve discussed &lt;code &gt;src/pages/index.js&lt;/code&gt; extensively. It will be the &lt;code &gt;index.html&lt;/code&gt; page of your site, and thus your landing page.&lt;/p&gt;
&lt;p&gt;For any stand-alone pages, simply create a corresponding js file in the &lt;code &gt;pages/&lt;/code&gt; directory and you are good to go. For example, &lt;code &gt;src/pages/about.js&lt;/code&gt; would generate an &lt;code &gt;about.html&lt;/code&gt; page. Simple.&lt;/p&gt;
&lt;p&gt;But almost everyone will want to generate some pages based on data, not on the files in the pages directory. Gatsby let&amp;#39;s us do this.&lt;/p&gt;
&lt;h3&gt;Generating custom pages&lt;/h3&gt;
&lt;p&gt;The key here is again to hook in to one of Gatsby&amp;#39;s many plugin hooks. In this case, &lt;code &gt;createPages&lt;/code&gt;. In the same &lt;code &gt;gatsby-node.js&lt;/code&gt; file as before:&lt;/p&gt;
&lt;pre&gt;// gatsby-node.js

// .. other stuff from before...

exports.createPages = ({ boundActionCreators }) =&amp;gt; {
  const { createPage } = boundActionCreators;
  const postTemplate = path.resolve(&amp;#39;./src/templates/custom-page.js&amp;#39;);

  // Create a custom page!
  createPage({
    path: `/my-custom-page/`,
    component: postTemplate,
    context: {} // Context will be passed in to the page query as graphql variables
  });
};
&lt;/pre&gt;
&lt;p&gt;At the most basic level this method of page creation is quite simple: Grab the &lt;code &gt;createPage&lt;/code&gt; function from the API and call it with some props.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;path&lt;/code&gt; is required. This is the path that your page will have as a generated HTML file. It&amp;#39;s the URL of your final page.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;component&lt;/code&gt; is also required. It&amp;#39;s the file containing the react component that will be used to render this particular page.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;context&lt;/code&gt; is optional but I&amp;#39;ve included it here because it will be important soon. This lets you pass data down to the react component specified in the &lt;code &gt;component&lt;/code&gt; option as well as the &lt;code &gt;pageQuery&lt;/code&gt; (if any).&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The API is actually pretty simple: To generate a new page call &lt;code &gt;createPage&lt;/code&gt; with some props. So in pseudo code:&lt;/p&gt;
&lt;pre&gt;// Get all markdown files
// Call create page for each one
markdownFiles.forEach(post =&amp;gt; {
  createPage({
    path: post.url,
    component: &amp;#39;./src/templates/post.js&amp;#39;,
    context: {
      id: post.id,
    },
  });
});
&lt;/pre&gt;
&lt;p&gt;I&amp;#39;ve included the pseudo code to highlight the fact that nothing too magical is going on here. We just need to call create page for every post we want to create. The implementation is a bit more verbose, but that&amp;#39;s still all it&amp;#39;s doing.&lt;/p&gt;
&lt;p&gt;So in order to make this work we also need to be able to query GraphQL just like we do in the page query. Gatsby let&amp;#39;s us do exactly that by giving us access to the &lt;code &gt;graphql&lt;/code&gt; object and letting us return a promise so that we can do async work.&lt;/p&gt;
&lt;pre&gt;
// NOTE: I&amp;#39;m using async/await to simplify the code since it&amp;#39;s now natively supported
// in Node 8.x. This means that our function will return a promise
exports.createPages = async ({ graphql, boundActionCreators }) =&amp;gt; {
  const { createPage } = boundActionCreators;
  const postTemplate = path.resolve(&amp;#39;./src/templates/post.js&amp;#39;);

  // Using async await. Query will likely be very similar to your pageQuery in index.js
  const result = await graphql(`
    query {
      allMarkdownRemark {
        edges {
          node { id url }
        }
      }
    }
  `);

  if (result.errors) {
    console.log(result.errors);
    throw new Error(&amp;#39;Things broke, see console output above&amp;#39;);
  }

  // Create blog posts pages.
  result.data.allMarkdownRemark.edges.forEach(({ node }) =&amp;gt; {
    createPage({
      path: node.url,
      component: postTemplate,
      context: { // Context will be passed in to the page query as graphql vars
        id: node.id,
      },
    });
  });
};
&lt;/pre&gt;
&lt;p&gt;Notice that the query is very similar to the &lt;code &gt;pageQuery&lt;/code&gt; in index.js but it&amp;#39;s not identical. This time we actually want the &lt;code &gt;id&lt;/code&gt; because it will allow the post template to use the ID to query one single blog post.&lt;/p&gt;
&lt;h2&gt;Rendering individual posts&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;ve made it to this point rendering individual posts is quite straightforward. You need to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Create the &lt;code &gt;postTemplate&lt;/code&gt; file referenced in &lt;code &gt;createPages&lt;/code&gt; above&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Export your template component as the default export&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Add a &lt;code &gt;pageQuery&lt;/code&gt; that will fetch the blog post to render&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Here it is in all it&amp;#39;s glory:&lt;/p&gt;
&lt;pre&gt;// src/templates/post.js
import React from &amp;#39;react&amp;#39;;

export default class BlogPost extends React.Component {
  render() {
    const post = this.props.data.markdownRemark;

    return (
      &amp;lt;div className=&amp;#39;Post&amp;#39;&amp;gt;
        &amp;lt;h1&amp;gt;{post.frontmatter.title}&amp;lt;/h1&amp;gt;
        &amp;lt;div dangerouslySetInnerHTML={{ __html: post.html }} className=&amp;#39;content&amp;#39; /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

// NOTE: The $id var is passed in via context when calling createPage in gatsby-node.js
export const pageQuery = graphql`
  query PostById($id: String!) {
  	markdownRemark(id: { eq: $id }) {
      frontmatter {
        title
      }
      html
  	}
  }
`;
&lt;/pre&gt;
&lt;p&gt;If you&amp;#39;re not used to GraphQL syntax the &lt;code &gt;pageQuery&lt;/code&gt; might be a little intimidating, but it&amp;#39;s all standard GraphQL so if you take the time to learn GraphQL on its own you will be able to use that knowledge here. I.e. it is not Gatsby-specific.&lt;/p&gt;
&lt;p&gt;The important thing to note here is that &lt;code &gt;$id&lt;/code&gt; is passed in via &lt;code &gt;context&lt;/code&gt; in &lt;code &gt;gatsby-node.js&lt;/code&gt;. That&amp;#39;s how the post data and processed HTML string make their way into props. Then it&amp;#39;s just a matter of rendering as you would with any other component.&lt;/p&gt;
&lt;h2&gt;Where to go from here&lt;/h2&gt;
&lt;p&gt;There&amp;#39;s a lot more you can do with Gatsby and it&amp;#39;s not always obvious how to proceed, but you have the full power of JavaScript at your disposal. So as long as you don&amp;#39;t mind reading a bit of source code to figure out how something works there&amp;#39;s no limit to what you can implement.&lt;/p&gt;
&lt;p&gt;Here are some ideas:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Add previous and next buttons to each post&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Create a remark plugin to add custom block types&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Aggregate tags from your frontmatter and generate pages for all posts of a specific tag&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Some of these—such as pagination—are implemented on my blog (the one your reading right now). You can find the source code here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/iansinnott/iansinnott.github.io/tree/gatsby-migration&quot;&gt;Source code for the blog&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;In my opinion Gatsby provides a few killer features:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Extensible through a powerful plugin API.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Supports arbitrary data sources that can be easily queried using GraphQL.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Splits your code automatically so you don&amp;#39;t have to worry about bundle size increasing as a function of the number of pages you render.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;It&amp;#39;s not a perfect project (looking at you global &lt;code &gt;graphql&lt;/code&gt; object) and it&amp;#39;s still under heavy development, so you may run in to bugs, but in my view the pros heavily outweigh the cons. It&amp;#39;s a best-in-class static site generator and well worth the adoption time if you want to customize your blog.&lt;/p&gt;
&lt;p&gt;If anything was unclear or you have more questions feel free to ask me on &lt;a href=&quot;https://twitter.com/ian_sinn&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Migrating to GatsbyJS Part 1]]></title><link>https://blog.iansinnott.com/migrating-to-gatsbyjs-part-1/</link><guid isPermaLink="false">https://blog.iansinnott.com/migrating-to-gatsbyjs-part-1/</guid><pubDate>Sun, 09 Jul 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Abstract:&lt;/span&gt; Migrating a static site to &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt; is pretty simple. I&amp;#39;ll walk through how I did it and the pitfalls along the way.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby 1.0&lt;/a&gt; was just recently published and I got excited. I&amp;#39;ve been excited about static sites for &lt;span class=&quot;italic&quot;&gt;a while&lt;/span&gt;, especially in combination with React. I&amp;#39;ve &lt;a href=&quot;https://www.youtube.com/watch?v=_1k2HEPH6fY&quot;&gt;spoken publicly about building static sites with React&lt;/a&gt; and two of my top repositories on GitHub are just for building static sites with React...&lt;/p&gt;
&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/blurred-repos.png?table=block&amp;id=&quot; /&gt;
&lt;p&gt;So I was pretty pumped to see Gatsby hit 1.0. And so far it has not disappointed.&lt;/p&gt;
&lt;h2&gt;Migrating to Gatsby 1.0&lt;/h2&gt;
&lt;p&gt;OK, enough context! Let&amp;#39;s migrate something. I chose to start by migrating &lt;a href=&quot;https://www.iansinnott.com&quot;&gt;my personal site&lt;/a&gt; since it&amp;#39;s already built with React and is literally 1 page. Here it is—the entire site:&lt;/p&gt;
&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/www.iansinnott.com-screenshot-2017-07-09.png?table=block&amp;id=&quot; /&gt;
&lt;h3&gt;Adding Gatsby to an exiting project&lt;/h3&gt;
&lt;p&gt;Step 1 is to &lt;span class=&quot;bold&quot;&gt;install Gatsby&lt;/span&gt;. I&amp;#39;m also adding &lt;code &gt;gatsby-link&lt;/code&gt; and the react helmet plugin because I knew I would need them:&lt;/p&gt;
&lt;pre&gt;yarn add gatsby gatsby-link gatsby-plugin-react-helmet&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Create a &lt;/span&gt;&lt;code class=&quot;bold&quot;&gt;gatsby-config.js&lt;/code&gt;&lt;span class=&quot;bold&quot;&gt; file&lt;/span&gt; in the project root and drop the following into it:&lt;/p&gt;
&lt;pre&gt;// gatsby-config.js
module.exports = {
siteMetadata: {
title: &lt;code &gt;Gatsby Default Starter&lt;/code&gt;,
},
plugins: [&lt;code &gt;gatsby-plugin-react-helmet&lt;/code&gt;],
}&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Run Gatsby&lt;/span&gt; to make sure everything is working.&lt;/p&gt;
&lt;pre&gt;gatsby develop&lt;/pre&gt;
&lt;p&gt;This will start a local server. Point your browser to whatever local port it gives you and try it out. You should see a Gatsby 404 page. This is because it expects your source code to be in the &lt;code &gt;src/&lt;/code&gt; directory. In my project all my source is in my &lt;code &gt;client/&lt;/code&gt; directory so Gatsby has nothing to find.&lt;/p&gt;
&lt;p&gt;However, when I loaded up the dev server in the browser I was greeted by this hot error 😐 (note, this may well not happen for you):&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/Screen%20Shot%202017-07-08%20at%2012.07.49%20PM.png?table=block&amp;id=&quot; alt=&quot;Gatsby dev server build error&quot;/&gt;&lt;figcaption&gt;Gatsby dev server build error&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;If you &lt;span class=&quot;italic&quot;&gt;do&lt;/span&gt; see something like that not to worry. It&amp;#39;s an issue with conflicting versions of react-proxy probably resulting from differing versions of react-hot-loader. You can check this with &lt;code &gt;npm ls react-proxy&lt;/code&gt;. Anyway, blow away your &lt;code &gt;node_modules&lt;/code&gt; folder and install from scratch. Also check your &lt;code &gt;package.json&lt;/code&gt; dependencies to make sure you aren&amp;#39;t depending on any hot loading packages. In fact, now would be a good time to remove almost all your devDependencies from package.json. Gatsby is an entire build pipeline that will take care of most things for you, so consider critically every one of your dev dependencies. After manually pruning mine looked like this:&lt;/p&gt;
&lt;pre&gt;&amp;quot;devDependencies&amp;quot;: {
	&amp;quot;babel-eslint&amp;quot;: &amp;quot;^7.2.3&amp;quot;,
	&amp;quot;eslint&amp;quot;: &amp;quot;^4.1.1&amp;quot;,
	&amp;quot;eslint-config-zen&amp;quot;: &amp;quot;^3.0.0&amp;quot;,
	&amp;quot;eslint-plugin-flowtype&amp;quot;: &amp;quot;^2.34.1&amp;quot;,
	&amp;quot;eslint-plugin-react&amp;quot;: &amp;quot;^7.1.0&amp;quot;
},&lt;/pre&gt;
&lt;p&gt;Yup, all loaders and plugins are gone. Gatsby isn&amp;#39;t even in this list because it&amp;#39;s a full-blown dependency, not just a devDependency.&lt;/p&gt;
&lt;p&gt;So, once you&amp;#39;ve cleared out your old dev dependencies do a fresh install. Then restart the dev server:&lt;/p&gt;
&lt;pre&gt;yarn upgrade
gatsby develop&lt;/pre&gt;
&lt;p&gt;You should see the correct 404 page in your browser.&lt;/p&gt;
&lt;h3&gt;Moving source code around&lt;/h3&gt;
&lt;p&gt;Here is the structure of my source code before and after the migration. I&amp;#39;m putting them together here for easy comparison, but I will walk through all of what changed.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Before:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;.
├── client
│   ├── components
│   │   ├── App.js
│   │   ├── App.styl
│   │   ├── face.png
│   │   └── favicon.ico
│   ├── lib
│   │   └── vars.styl
│   ├── index.js
│   └── routes.js
├── package.json
├── template.js
├── webpack.config.dev.js
└── webpack.config.prod.js&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;After:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;.
├── src
│   ├── components
│   │   ├── App.styl
│   │   ├── face.png
│   │   └── favicon.ico
│   ├── layouts
│   │   └── index.js
│   ├── lib
│   │   └── vars.styl
│   ├── pages
│   │   ├── 404.js
│   │   └── index.js
│   └── html.js
├── gatsby-config.js
└── package.json&lt;/pre&gt;
&lt;p&gt;Let&amp;#39;s start with the quick wins:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We no longer need webpack config so remove them:
&lt;code &gt;rm webpack.*&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Gatsby expects everything under the &lt;code &gt;src&lt;/code&gt; directory so let&amp;#39;s make that happen
&lt;code &gt;mv client src&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Create &lt;code &gt;layouts&lt;/code&gt; and &lt;code &gt;pages&lt;/code&gt; directories under &lt;code &gt;src&lt;/code&gt;
&lt;code &gt;mkdir -p src/layouts&lt;/code&gt;
&lt;code &gt;mkdir -p src/pages&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Now let&amp;#39;s talk about those directories:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;src/layouts/&lt;/code&gt;: Is where you put wrapper components. Markup that will generally &amp;quot;go around&amp;quot; your individual pages. This usually means headers and footers.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;src/pages/&lt;/code&gt;: This is the meat of a Gatsby site. It&amp;#39;s where the content goes. The rule of thumb is that you should construct your &lt;code &gt;src/pages&lt;/code&gt; directory to build your URLs.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;For my purposes I had one layout and one index page. Of course I also wanted a 404 page so I created all three. This meant a bit of refactoring since I had everything together in &lt;code &gt;App.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m migrating from React Router so let&amp;#39;s take a quick look at my route config:&lt;/p&gt;
&lt;pre&gt;export const routes = (
	&amp;lt;Route path=‘/&amp;#39; component={App}&amp;gt;
		&amp;lt;IndexRoute component={Home} /&amp;gt;
		&amp;lt;Route path=&amp;#39;*&amp;#39; component={NotFound} /&amp;gt;
	&amp;lt;/Route&amp;gt;
);&lt;/pre&gt;
&lt;p&gt;Pretty simple right? When migrating over to Gatsby these components had a direct mapping to files in the new structure:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;App&lt;/code&gt; -&amp;gt; &lt;code &gt;layouts/index.js&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;Home&lt;/code&gt; -&amp;gt; &lt;code &gt;pages/index.js&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;NotFound&lt;/code&gt; -&amp;gt; &lt;code &gt;pages/404.js&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Migrating your components will be specific to your project so I&amp;#39;ll just point you to the minimal gatsby example which includes all the relevant files: &lt;a href=&quot;https://github.com/gatsbyjs/gatsby/tree/v1.0.8/examples/no%E2%B8%BBplugins&quot;&gt;examples/no-plugins&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;CSS and Stylus support&lt;/h2&gt;
&lt;p&gt;Up until this point I had commented out all my CSS and &lt;a href=&quot;http://stylus-lang.com/&quot;&gt;Stylus&lt;/a&gt; imports since I figured they might cause issues. In the case of CSs this fear was unfounded. Gatsby does a great job of handling CSS imports right out of the box.&lt;/p&gt;
&lt;p&gt;However I was using &lt;a href=&quot;http://stylus%E2%B8%BBlang.com/&quot;&gt;Stylus&lt;/a&gt; along with &lt;a href=&quot;https://github.com/webpack%E2%B8%BBcontrib/css%E2%B8%BBloader#modules&quot;&gt;CSS Modules&lt;/a&gt; which is a bit more complicated. Turns out there was actually &lt;span class=&quot;italic&quot;&gt;zero support&lt;/span&gt; for Stylus with Gatsby, &lt;span class=&quot;bold&quot;&gt;but&lt;/span&gt; Gatsby is highly extensible so...&lt;/p&gt;
&lt;p&gt;Time to write a plugin. I&amp;#39;ll skip over most of the details here since you view the source code of the plugin I wrote directly. But a neat feature of Gatsby is that you create a &lt;code &gt;plugins/&lt;/code&gt; directory in your own project and extend Gatsby right there. This is a really nice developer experience and it makes it easy to write a plugin that can then be contributed back to the Gatsby community later.&lt;/p&gt;
&lt;p&gt;So, after all the changes above and creating the stylus plugin my project looked like this:&lt;/p&gt;
&lt;pre&gt;.
├── plugins
│   └── gatsby-plugin-stylus
│       ├── gatsby-node.js
│       └── package.json
├── src
│   ├── components
│   │   ├── App.styl
│   │   ├── face.png
│   │   └── favicon.ico
│   ├── layouts
│   │   └── index.js
│   ├── lib
│   │   └── vars.styl
│   ├── pages
│   │   ├── 404.js
│   │   └── index.js
│   └── html.js
├── gatsby-config.js
├── package.json
└── yarn.lock&lt;/pre&gt;
&lt;p&gt;And it worked 🎉.&lt;/p&gt;
&lt;p&gt;As for the stylus plugin, there&amp;#39;s currently &lt;a href=&quot;https://github.com/gatsbyjs/gatsby/pull/1437&quot;&gt;a pull request&lt;/a&gt; to get it merged in. Once it&amp;#39;s merged you can use stylus by just installing the plugin:&lt;/p&gt;
&lt;pre&gt;yarn install gatsby-plugin-stylus&lt;/pre&gt;
&lt;h2&gt;Final Polish&lt;/h2&gt;
&lt;p&gt;After getting everything working properly the last step was to add a few things I had neglected while refactoring:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Analytics:&lt;/span&gt; I&amp;#39;ve been using Google Analytics on my site all along so I needed to get that working I just needed to add the &lt;code &gt;gatsby-plugin-google-analytics&lt;/code&gt; plugin.&lt;/p&gt;
&lt;pre&gt;{
	resolve: &amp;#39;gatsby-plugin-google-analytics&amp;#39;,
	options: {
		trackingId: &amp;#39;UA-&amp;lt;MY_TRACKING_ID&amp;gt;&amp;#39;,
	},
},&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Titles and meta tags&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nfl/react%E2%B8%BBhelmet/&quot;&gt;react-helmet&lt;/a&gt; is great for this and Gatsby recognizes it. Just add the &lt;code &gt;gatsby-plugin-react-helmet&lt;/code&gt; and your good to go. See the react-helmet docs for how to actually use it.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Final &lt;/span&gt;&lt;code class=&quot;bold&quot;&gt;gatsby-config.js&lt;/code&gt;&lt;span class=&quot;bold&quot;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;// Gatsby
module.exports = {
	siteMetadata: {
		title: &amp;#39;Ian Sinnott&amp;#39;,
	},
	plugins: [
		&amp;#39;gatsby-plugin-react-helmet&amp;#39;,
		{
			resolve: &amp;#39;gatsby-plugin-stylus&amp;#39;,
			options: {
				modules: true,
			},
		},
		{
		resolve: &amp;#39;gatsby-plugin-google-analytics&amp;#39;,
		options: {
			trackingId: &amp;#39;UA-&amp;lt;MY_TRACKING_ID&amp;gt;&amp;#39;,
			},
		},
	],
};&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s all. If you have an questions you can leave a commend or &lt;a href=&quot;https://twitter.com/ian_sinn&quot;&gt;find me on twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;P.S. You may have noticed that this was a super simple site (one page!) and that this is &amp;quot;Part 1&amp;quot;. I plan to migrate this blog you&amp;#39;re reading right now to Gatsby and do a Part 2 write up about that. It will be a much more real-world use case of Gatsby and will use the awesome GraphQL infrastructure Gatsby gives you 😋&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The importance of Webpack context]]></title><link>https://blog.iansinnott.com/the-importance-of-webpack-context/</link><guid isPermaLink="false">https://blog.iansinnott.com/the-importance-of-webpack-context/</guid><pubDate>Thu, 24 Nov 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Today I ran into an issue testing my &lt;a href=&quot;https://github.com/iansinnott/react%E2%B8%BBstatic%E2%B8%BBwebpack%E2%B8%BBplugin&quot;&gt;react-static-webpack-plugin&lt;/a&gt; plugin. I&amp;#39;ve been running webpack builds in subdirectories of the repository and then running test assertions against the output in order to test the project. So far it&amp;#39;s worked great, but after updating my dependencies recently I ran into a nasty error:&lt;/p&gt;
&lt;pre&gt;Error: Error: Child compilation failed:
Entry module not found: Error: Cannot resolve &amp;#39;file&amp;#39; or &amp;#39;directory&amp;#39; ./src/routes.js in /path/to/react-static-webpack-plugin:
Error: Cannot resolve &amp;#39;file&amp;#39; or &amp;#39;directory&amp;#39; ./src/routes.js in /path/to/react-static-webpack-plugin&lt;/pre&gt;
&lt;p&gt;...😖&lt;/p&gt;
&lt;p&gt;Not good. But looking at the output and enabling the debug logger in my build process led me to the ultimate culprit, Webpack&amp;#39;s context.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s what was happening:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;I was running build commands from the root directory of my project&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;The builds I was running needed to be ran in their own subdirectory&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Building directly in the subdirectory worked fine...&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Webpack&amp;#39;s context was getting set to the root directory no matter what&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;After looking at the &lt;a href=&quot;https://webpack.github.io/docs/configuration.html#context&quot;&gt;Webpack docs&lt;/a&gt; it quickly became apparent what was happening:&lt;/p&gt;
&lt;p&gt;&lt;code &gt;context&lt;/code&gt; in the &lt;code &gt;webpack.config.js&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;The base directory (absolute path!) for resolving the entry option. If output.pathinfo is set, the included pathinfo is shortened to this directory.
&lt;span class=&quot;bold italic&quot;&gt;Default:&lt;/span&gt;&lt;span class=&quot;italic&quot;&gt; process.cwd()&lt;/span&gt;&lt;/blockquote&gt;
&lt;p&gt;I was pretty sure I knew what &lt;code &gt;process.cwd()&lt;/code&gt; would return, so I started to have a hunch. Looking at the &lt;a href=&quot;https://nodejs.org/api/process.html#process_process_cwd&quot;&gt;Node docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;The process.cwd() method returns the current working directory of the Node.js process.&lt;/blockquote&gt;
&lt;p&gt;Ah, I see. Turns out that my Webpack builds which ran in subdirectories were actually searching for the entry files in the &lt;span class=&quot;italic&quot;&gt;root&lt;/span&gt; directory of the project.&lt;/p&gt;
&lt;p&gt;The fix was swift and effective. I added the following line to my &lt;code &gt;webpack.config.js&lt;/code&gt; files:&lt;/p&gt;
&lt;pre&gt;context: __dirname&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[Migrating from Jekyll to Hexo]]></title><link>https://blog.iansinnott.com/migrating-from-jekyll-to-hexo/</link><guid isPermaLink="false">https://blog.iansinnott.com/migrating-from-jekyll-to-hexo/</guid><pubDate>Wed, 16 Nov 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;TL;DR:&lt;/span&gt; I migrated my blog from Jekyll to Hexo. This is everything you need to know to do the same.&lt;/p&gt;
&lt;h2&gt;Initializing Hexo in your existing Jekyll project&lt;/h2&gt;
&lt;p&gt;Here&amp;#39;s what I did:&lt;/p&gt;
&lt;p&gt;Back up your existing Jekyll blog to a subdirectory so you can wildly make changes with impunity:&lt;/p&gt;
&lt;pre&gt;mkdir jekyll.bak&lt;/pre&gt;
&lt;p&gt;Now move all the non-git files in the directory into &lt;code &gt;jekyll.bak&lt;/code&gt;. Initially I just did it in finder, but then I got curious about how to do it in bash. So if you want to just run a nifty command here you go:&lt;/p&gt;
&lt;pre&gt;find . -maxdepth 1 -mindepth 1 ! -name &amp;#39;.git&amp;#39; ! -name &amp;#39;jekyll.bak&amp;#39; -exec mv &amp;#39;{}&amp;#39; ./jekyll.bak/ ;&lt;/pre&gt;
&lt;p&gt;We keep the &lt;code &gt;.git/&lt;/code&gt; dir around so that we can cleanly iterate towards a Hexo blog from our Jekyll blog while maintaining all previous version control history. However, the &lt;code &gt;hexo init&lt;/code&gt; command actually removed &lt;code &gt;.git/&lt;/code&gt; on my system so we need to move it too, but only temporarily:&lt;/p&gt;
&lt;pre&gt;mv .git .git.bak&lt;/pre&gt;
&lt;p&gt;Now initialize Hexo in your project directory:&lt;/p&gt;
&lt;pre&gt;hexo init .&lt;/pre&gt;
&lt;p&gt;This should have left &lt;code &gt;jekyll.bak&lt;/code&gt; and &lt;code &gt;.git.bak&lt;/code&gt; intact while adding a bunch of new files. Now it&amp;#39;s safe to bring back your Git history and add a commit:&lt;/p&gt;
&lt;pre&gt;mv .git.bak .git
git add .
git commit -m &amp;#39;Add Hexo boilerplate&amp;#39;&lt;/pre&gt;
&lt;p&gt;Now we&amp;#39;ve succesffully initialize Hexo. From here on out everything we do will to customize Hexo to suit our needs.&lt;/p&gt;
&lt;p&gt;To make sure everything is running properly run the dev server:&lt;/p&gt;
&lt;pre&gt;hexo server&lt;/pre&gt;
&lt;h2&gt;Migrating Content&lt;/h2&gt;
&lt;p&gt;Now let&amp;#39;s get all your blog posts migrated over to the new system. When running the server you should see the Hello World post as your first post on the homepage. You will also see the default Hexo theme. Here&amp;#39;s what that looks like:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/Screen%20Shot%202016-11-12%20at%203.09.34%20PM.png?table=block&amp;id=&quot; alt=&quot;Default hexo blog&quot;/&gt;&lt;figcaption&gt;Default hexo blog&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;That &amp;quot;Hello World&amp;quot; post is the only post in your blog. Hexo keeps all your posts at &lt;code &gt;source/_posts&lt;/code&gt;. Let&amp;#39;s remove the default post.&lt;/p&gt;
&lt;pre&gt;rm source/_posts/hello-world.md&lt;/pre&gt;
&lt;p&gt;Now, since Hexo and Jekyll are very similar in how they store your posts it&amp;#39;s very straightforward to migrate all your content. First, copy it all over. If you also used &lt;code &gt;jekyll.bak&lt;/code&gt; to backup your original blog then you can do this:&lt;/p&gt;
&lt;pre&gt;mv jekyll.bak/_posts/* source/_posts/&lt;/pre&gt;
&lt;p&gt;Second, update your Hexo settings to recognize Jekyll-style post filenames. In &lt;code &gt;_config.yml&lt;/code&gt; edit the line for &lt;code &gt;new_post_name&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;new_post_name: :year-:month-:day-:title.md # File name used to identify posts&lt;/pre&gt;
&lt;p&gt;Now restart the Hexo server and you should see all your content 😎&lt;/p&gt;
&lt;h2&gt;Gripes&lt;/h2&gt;
&lt;p&gt;Hexo is not without its shortcomings. I&amp;#39;ll outline those here, but take this with a grain of salt because I just started using Hexo yesterday so it may be that my gripes are due to lack of understanding rather than actual problems with the framework.&lt;/p&gt;
&lt;h3&gt;Not simple to create standalone pages&lt;/h3&gt;
&lt;p&gt;Hexo is highly content focused, meaning when you create a new &amp;quot;page&amp;quot; you are actually just creating a new Markdown file with some content. In my experience the &amp;quot;content first&amp;quot; approach is perfectly suited to blog posts, but not necessarily to pages which are often unique in layout.&lt;/p&gt;
&lt;p&gt;For example, I wanted to create a &lt;code &gt;/tags&lt;/code&gt; page. This is simple enough using the Hexo API in a layout file:&lt;/p&gt;
&lt;pre&gt;&amp;lt;% site.tags.each((tag) =&amp;gt; { %&amp;gt;
	&amp;lt;a class=&amp;#39;tag&amp;#39; href=&amp;#39;&amp;lt;%= url_for(tag.path) %&amp;gt;&amp;#39;&amp;gt;
		&amp;lt;%= tag.name %&amp;gt;
	&amp;lt;/a&amp;gt;
&amp;lt;% }) %&amp;gt;&lt;/pre&gt;
&lt;p&gt;But I wanted to be able to do this on one single page. I.e. instead of writing markdown I wanted to write the above code and output all my tags. This didn&amp;#39;t work, so I ended up creating a workaround where my &lt;code &gt;tags.md&lt;/code&gt; file does nothing more than specify the layout I want to render.&lt;/p&gt;
&lt;pre&gt;---
title: Tags
layout: tags
---&lt;/pre&gt;
&lt;p&gt;This may seem minor, but I would have liked to be able to simply put the above EJS code into my &amp;quot;page&amp;quot; file and had it render.&lt;/p&gt;
&lt;h3&gt;Not simple to create helper functions&lt;/h3&gt;
&lt;p&gt;More than once I found myself wanting to refactor some view logic out of the EJS templates and into an external helper function. As of now it&amp;#39;s still unclear to me how to do this. I ended up writing all my code inline in the EJS files but this is not pretty.&lt;/p&gt;
&lt;h3&gt;Documentation&lt;/h3&gt;
&lt;p&gt;This is a tough one since Hexo actually has quite a bit of documentation online. However, I found it didn&amp;#39;t readily cover the things I really cared about. Namely, in-depth guides to creating themes.&lt;/p&gt;
&lt;p&gt;For example, things like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;How to loop through various content types (posts, tags, categories, etc)&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;How to sort, filter, etc, those content types&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;What methods and properties are available on all the Hexo objects&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I ended up discovering these things through trial and error or viewing other peoples themes. This is fine, but it seems that it could be greatly improved to limit the time it takes someone new to the framework to get comfortable with it.&lt;/p&gt;
&lt;h2&gt;Development Takeaways&lt;/h2&gt;
&lt;p&gt;Regarding layouts and templating: If you want to create custom pages then create a new layout file with the desired name (say &lt;code &gt;about.ejs&lt;/code&gt;) and then specify that layout file in the post/page markdown file:&lt;/p&gt;
&lt;pre&gt;---
layout: about
---&lt;/pre&gt;
&lt;p&gt;Regarding helper functions: I didn&amp;#39;t find a good way to add helpers yet but I haven&amp;#39;t yet read through all the docs. Who knows, maybe there is an elegant solution.&lt;/p&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve been meaning to redo my blog for a while. Jekyll does it&amp;#39;s job quite well, but I never liked liquid templates and my existing blog has needed some work for quote some time. For example, code snippets when rendered in post excerpts sometimes caused unclosed &lt;code &gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tags, which would really mess up rendering for the whole index page.&lt;/p&gt;
&lt;p&gt;Also, JavaScript. I write it all the time so it makes sense to use it for my blog. I also like the emphasis out of the box on Stylus as opposed to Sass or Less.&lt;/p&gt;
&lt;p&gt;Lastly, a good friend of mine recently told me he uses Hexo for his blog. Personal recommendations go a long way.&lt;/p&gt;
&lt;h2&gt;Outcome&lt;/h2&gt;
&lt;p&gt;So far I&amp;#39;ve been quite happy. Things I like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Drafts&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;CLI for creating content&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Simple, multi-language support&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Powered by JavaScript&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[A refreshing dose of minimalism]]></title><link>https://blog.iansinnott.com/a-refreshing-dose-of-minimalism/</link><guid isPermaLink="false">https://blog.iansinnott.com/a-refreshing-dose-of-minimalism/</guid><pubDate>Wed, 16 Nov 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Today I finished rebuilding my blog using Hexo (see last blog post for details). It&amp;#39;s a blog, so I knew I wouldn&amp;#39;t need too much JS. I started with a blank file and started coding.&lt;/p&gt;
&lt;p&gt;Once I was satisfied with the event handling logic I had set up I sat back and reviewed my work. 44 lines including a few comments and zero dependencies. Not too bad. The web has come a long way. CSS was able to take care of a lot of the interactions and animations. But I still wanted to do better.&lt;/p&gt;
&lt;p&gt;It occurred to me that I could actually use the &lt;code &gt;:hover&lt;/code&gt; state to accomplish all of my open/close menu interactions. Done! A few more lines eliminated. But I still had the &lt;code &gt;focus&lt;/code&gt; event handler I was using to select all text in a text box whenever a user put their cursor inside it. I don&amp;#39;t think CSS can do that... so I did end up using JS for this. I took it out of my script file and in-lined it on the input directly.&lt;/p&gt;
&lt;p&gt;That was the last event I was handling so now I scrapped my whole JS file with its event logic. Wow! No external JS file. How novel... 😕.&lt;/p&gt;
&lt;p&gt;All in all here is the extent of the JS I wrote for the site:&lt;/p&gt;
&lt;pre&gt;this.setSelectionRange(0, this.value.length);&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Aside:&lt;/span&gt; I&amp;#39;m certainly not against large web apps—on the contrary, I love them. But for this particular project I chose to revel in the minimalism of leveraging CSS to handle almost all of my site interactions.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Getting Started with Flow and Webpack]]></title><link>https://blog.iansinnott.com/getting-started-with-flow-and-webpack/</link><guid isPermaLink="false">https://blog.iansinnott.com/getting-started-with-flow-and-webpack/</guid><pubDate>Sat, 11 Jun 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;TL;DR:&lt;/span&gt; This post will show you how to get set up with &lt;a href=&quot;http://flowtype.org/&quot;&gt;Flow&lt;/a&gt; and &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; as quickly as possible so that you can benefit from some degree of type safety in your JS code!&lt;/p&gt;
&lt;h2&gt;What are we talking about?&lt;/h2&gt;
&lt;h3&gt;Flow&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://flowtype.org/&quot;&gt;Flow&lt;/a&gt; is like ESLint on steroids. It is a static type checker for JavaScript. It let&amp;#39;s you add types to any existing JS code. &lt;span class=&quot;bold&quot;&gt;Why would you want to do this?&lt;/span&gt;  The short answer is because JS ❤️ runtime errors, but runtime errors make your users sad. The more helpful answer is that Flow will analyze your codebase and catch bugs that may otherwise go unnoticed until you&amp;#39;re app is already deployed to production. There is an entire site dedicated to explaining Flow, so I will let you check that out for more detailed information: http://flowtype.org/&lt;/p&gt;
&lt;p&gt;However, what may not be immediately obvious from the Flow site is the reason why it&amp;#39;s so appealing for existing projects, which is that you can &lt;span class=&quot;italic&quot;&gt;iterate&lt;/span&gt; to full Flow coverage with minimal overhead.&lt;/p&gt;
&lt;p&gt;That means you can keep on hitting all your existing dev milestones while adding Flow type coverage to your code in parallel. Flow is also designed to work with &lt;a href=&quot;http://babeljs.io/&quot;&gt;Babel&lt;/a&gt;, so if you&amp;#39;re already using Babel in your toolchain you&amp;#39;ll be pleasantly surprised at how easy it is to set Flow up.&lt;/p&gt;
&lt;h3&gt;Webpack&lt;/h3&gt;
&lt;p&gt;If you&amp;#39;re reading this post you probably already know what Webpack is, but just in case here&amp;#39;s a two-sentence explanation: &lt;span class=&quot;bold&quot;&gt;Webpack is a module bundler that lets you split your JS code into separate files that can &lt;/span&gt;&lt;code class=&quot;bold&quot;&gt;import&lt;/code&gt;&lt;span class=&quot;bold&quot;&gt; or &lt;/span&gt;&lt;code class=&quot;bold&quot;&gt;require&lt;/code&gt;&lt;span class=&quot;bold&quot;&gt; each other&lt;/span&gt;, much like Require.js or Browserify. In addition, it also lets you import assets such as CSS files and images directly in your JavaScript files.&lt;/p&gt;
&lt;p&gt;In this post I&amp;#39;m going to show you how you can get set up using Webpack with Flow, which might be a bit daunting at first since Flow doesn&amp;#39;t support all of Webpack&amp;#39;s features (such as CSS importing) out of the box.&lt;/p&gt;
&lt;h2&gt;Getting Set Up&lt;/h2&gt;
&lt;pre&gt;npm install -g flow-bin&lt;/pre&gt;
&lt;p&gt;That should be all you need to get the &lt;code &gt;flow&lt;/code&gt; binary installed on your CLI.&lt;/p&gt;
&lt;h3&gt;Setting Up Webpack and Babel&lt;/h3&gt;
&lt;p&gt;This one will vary greatly depending on your projects, so I won&amp;#39;t go over it here. What I will mention is that in order for Babel to properly compile Flow-typed code you will need to use the &lt;a href=&quot;https://www.npmjs.com/package/babel%E2%B8%BBplugin%E2%B8%BBtransform%E2%B8%BBflow%E2%B8%BBstrip%E2%B8%BBtypes&quot;&gt;Babel Flow plugin&lt;/a&gt;. If you&amp;#39;re using &lt;code &gt;babel-plugin-react&lt;/code&gt; then the Flow plugin should be included automatically.&lt;/p&gt;
&lt;h2&gt;Initial Flow Configuration&lt;/h2&gt;
&lt;p&gt;OK, here&amp;#39;s the meat of this post. Once you have Flow installed and are in your projects root directory you will be ready to configure Flow. Let&amp;#39;s do it.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Create a &lt;/span&gt;&lt;code class=&quot;bold&quot;&gt;.flowconfig&lt;/code&gt;&lt;span class=&quot;bold&quot;&gt; file&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;You can do this by running &lt;code &gt;flow init&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After running that command you should have a &lt;code &gt;.flowconfig&lt;/code&gt; file in the current directory. Open up the file, since we will be editing it. You should see something like this initially:&lt;/p&gt;
&lt;pre&gt;[ignore]

[include]

[libs]

[options]&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Test your configuation&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Run &lt;code &gt;flow&lt;/code&gt; from the root directory where you just created &lt;code &gt;.flowconfig&lt;/code&gt;. It will take a few seconds to run the first time, but every time after should be almost instant.&lt;/p&gt;
&lt;p&gt;You should see one of two things:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code &gt;No errors!&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;A bunch of errors&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;If you see a bunch of errors after just setting up Flow that is because Flow type-checks &lt;span class=&quot;italic&quot;&gt;everything&lt;/span&gt;, even all the code in your &lt;code &gt;node_modules&lt;/code&gt;. Although it may be counter intuitive this is actually desired behavior, because Flow can warn you if you try to import anything that doesn&amp;#39;t exist from &lt;code &gt;node_modules&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, the downside is that when you first set up Flow you might see something like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/Screen_Shot_2016-06-11_at_5_50_55_PM.png?table=block&amp;id=&quot; alt=&quot;Flow Errors&quot;/&gt;&lt;figcaption&gt;Flow Errors&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;In this example Flow is detecting type errors in the &lt;code &gt;fbjs&lt;/code&gt; module, which is required by React. Getting past this issue is simple enough, simply add a new ignore line to &lt;code &gt;.flowconfig&lt;/code&gt;. I have no idea how regex works in OCaml, but luckily there&amp;#39;s no need. The Flow docs provide plenty of examples to show us how to ignore a certain directory. The syntax is &lt;code &gt;.*/path/to/dir/.*&lt;/code&gt;. So to ignore everything under &lt;code &gt;node_modules/fbjs&lt;/code&gt; you can update your &lt;code &gt;.flowconfig&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre&gt;[ignore]
.&lt;span class=&quot;italic&quot;&gt;/node_modules/fbjs/.&lt;/span&gt;

[include]

[libs]

[options]&lt;/pre&gt;
&lt;p&gt;Since you haven&amp;#39;t yet told Flow to type check any of your own code, every error you see is due to some third-party node module. That means its safe to ignore. Add more lines to the &lt;code &gt;[ignore]&lt;/code&gt; section of &lt;code &gt;.flowconfig&lt;/code&gt; until you&amp;#39;ve successfully ignored any offending node modules.&lt;/p&gt;
&lt;p&gt;Now you should see &lt;code &gt;No errors!&lt;/code&gt; on the command line when you run &lt;code &gt;flow&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Whew, time to move on to the fun part: Typing your own code!&lt;/p&gt;
&lt;h2&gt;Type checking our own code&lt;/h2&gt;
&lt;p&gt;To type check any of your js/jsx files with Flow simply add &lt;code &gt;/* @flow */&lt;/code&gt; to the top of the file. This will make it visible to Flow. I would recommend doing this only one file at a time and fixing any errors that Flow catches in that file &lt;span class=&quot;italic&quot;&gt;before&lt;/span&gt; type-checking any new files. This strategy is simply meant to keep the number of errors from seeming overwhelming, since untyped code can often have a ton of errors.&lt;/p&gt;
&lt;p&gt;It is also worth noting that if the errors are so many that they seem daunting you can use &lt;code &gt;/* @flow weak */&lt;/code&gt; to turn on a weaker type-checking mode in Flow that will likely produce fewer errors. Once you have all those errors handled you can revert back to &lt;code &gt;/* @flow */&lt;/code&gt; and handle the more strict errors. Using Flow in it&amp;#39;s most strict mode is how it was meant to be used, and will ultimately provide you with the most safety.&lt;/p&gt;
&lt;h2&gt;Advanced Configuration: CSS Modules, Image files, ES7, etc&lt;/h2&gt;
&lt;h3&gt;CSS Modules&lt;/h3&gt;
&lt;p&gt;All right, we made it to the Webpack specific part of this post. Let&amp;#39;s talk about making CSS Modules type-check with Flow. If you&amp;#39;re not using CSS Modules you can safely skip this section, but you may also want to [check them out][CSS Modules] since CSS Modules can be a big win for the maintainability of a codebase.&lt;/p&gt;
&lt;p&gt;Using CSS Modules with Webpack looks something like this:&lt;/p&gt;
&lt;pre&gt;import React from &amp;#39;react&amp;#39;;
import { render } from &amp;#39;react-dom&amp;#39;;
import s from &amp;#39;./App.css&amp;#39;; // CSS Modules!

class App extends React.Component {
	render() {
		return (
			&amp;lt;div className={s.App}&amp;gt;
				&amp;lt;h1&amp;gt;My App&amp;lt;/h1&amp;gt;
			&amp;lt;/div&amp;gt;
		);
	}
}

render(&amp;lt;App /&amp;gt;, document.getElementById(&amp;#39;root&amp;#39;));&lt;/pre&gt;
&lt;p&gt;The important part of that code is line 3, where we import &lt;code &gt;s&lt;/code&gt; from a CSS file. Further down in the &lt;code &gt;render&lt;/code&gt; method of &lt;code &gt;App&lt;/code&gt; we see that &lt;code &gt;s&lt;/code&gt; is expected to be a JavaScript object. However, Flow doesn&amp;#39;t know this and it will complain as soon as it sees us trying to import a module named &lt;code &gt;App.css&lt;/code&gt;. Flow will look for the &lt;code &gt;./App.css&lt;/code&gt; JS module and find nothing, so it will throw an error:&lt;/p&gt;
&lt;pre&gt;src/components/App.js:3
3: import s from &amp;#39;./App.css&amp;#39;;
^^^^^^^^^^^ ./App.css. Required module not found&lt;/pre&gt;
&lt;p&gt;To solve this issue, we need to tell Flow to that for CSS files it should actually look for type definitions somewhere else. I&amp;#39;ll describe how to do this briefly here, but there is also a good section on the Flow website that describes how to accomplish this: https://flowtype.org/docs/modules.html#css-modules-with-webpack&lt;/p&gt;
&lt;p&gt;Create a new directory named &lt;code &gt;flow&lt;/code&gt; and a new file within that directory: &lt;code &gt;flow/CSSModule.js.flow&lt;/code&gt;. Now add the following to &lt;code &gt;CSSModule.js.flow&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;// @flow

declare export default { [key: string]: string }&lt;/pre&gt;
&lt;p&gt;When Flow reads this file it will see a default export of a plain JavaScript object that maps string keys to string values, which is exactly the case for CSS modules.&lt;/p&gt;
&lt;p&gt;The last step to make this work is to tell Flow which file extensions should use this &lt;code &gt;CSSModule.js.flow&lt;/code&gt; file. We do that in the &lt;code &gt;[options]&lt;/code&gt; section of our &lt;code &gt;.flowconfig&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;[ignore]
.&lt;span class=&quot;italic&quot;&gt;/node_modules/fbjs/.&lt;/span&gt;

[include]

[libs]

[options]
module.name_mapper.extension=&amp;#39;css&amp;#39; -&amp;gt; &amp;#39;&amp;lt;PROJECT_ROOT&amp;gt;/flow/CSSModule.js.flow&amp;#39;
module.name_mapper.extension=&amp;#39;styl&amp;#39; -&amp;gt; &amp;#39;&amp;lt;PROJECT_ROOT&amp;gt;/flow/CSSModule.js.flow&amp;#39;&lt;/pre&gt;
&lt;p&gt;The first line under &lt;code &gt;[options]&lt;/code&gt; tells Flow that for every file with the &lt;code &gt;.css&lt;/code&gt; extension it should read type info from the &lt;code &gt;CSSModule.js.flow&lt;/code&gt; file we just created.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Note&lt;/span&gt; that you can map multiple extensions in the options section. In my case, I use &lt;a href=&quot;http://stylus%E2%B8%BBlang.com/&quot;&gt;Stylus&lt;/a&gt; to author my CSS which means I needed to add the &lt;code &gt;.styl&lt;/code&gt; extension as another filetype that should be interpreted as a CSS module. You can add support for Less and Sass in the same way.&lt;/p&gt;
&lt;h3&gt;Image Files&lt;/h3&gt;
&lt;p&gt;Since Webpack also lets you &lt;code &gt;import&lt;/code&gt; image files we will want to add support for that as well. The process looks much the same as it did for CSS modules above: We need to create a new type definitions file that will be read for files with certain extensions. The only difference here is that our image files are imported as strings, not JavaScript objects as with CSS modules.&lt;/p&gt;
&lt;p&gt;Create another file: &lt;code &gt;flow/WebpackAsset.js.flow&lt;/code&gt;. Now add the following to &lt;code &gt;WebpackAsset.js.flow&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;// @flow

declare export default string&lt;/pre&gt;
&lt;p&gt;Then tell Flow about this file in your &lt;code &gt;.flowconfig&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;[ignore]
.&lt;span class=&quot;italic&quot;&gt;/node_modules/fbjs/.&lt;/span&gt;

[include]

[libs]

[options]
module.name_mapper.extension=&amp;#39;css&amp;#39; -&amp;gt; &amp;#39;&amp;lt;PROJECT_ROOT&amp;gt;/flow/CSSModule.js.flow&amp;#39;
module.name_mapper.extension=&amp;#39;styl&amp;#39; -&amp;gt; &amp;#39;&amp;lt;PROJECT_ROOT&amp;gt;/flow/CSSModule.js.flow&amp;#39;
module.name_mapper.extension=&amp;#39;png&amp;#39; -&amp;gt; &amp;#39;&amp;lt;PROJECT_ROOT&amp;gt;/flow/WebpackAsset.js.flow&amp;#39;
module.name_mapper.extension=&amp;#39;jpg&amp;#39; -&amp;gt; &amp;#39;&amp;lt;PROJECT_ROOT&amp;gt;/flow/WebpackAsset.js.flow&amp;#39;&lt;/pre&gt;
&lt;p&gt;In the above configuration file we tell Flow to use our &lt;code &gt;WebpackAsset.js.flow&lt;/code&gt;
file in place of any file with a &lt;code &gt;.png&lt;/code&gt; or &lt;code &gt;.jpg&lt;/code&gt; extension.&lt;/p&gt;
&lt;p&gt;Now Flow will happily type code like this:&lt;/p&gt;
&lt;pre&gt;import React from &amp;#39;react&amp;#39;;
import { render } from &amp;#39;react-dom&amp;#39;;
import s from &amp;#39;./App.css&amp;#39;; // CSS Modules!
import logo from &amp;#39;./logo.png&amp;#39;; // Image Files!

class App extends React.Component {
	render() {
		return (
			&amp;lt;div className={s.App}&amp;gt;
				&amp;lt;h1&amp;gt;My App&amp;lt;/h1&amp;gt;
				&amp;lt;img src={logo} alt=&amp;#39;App Logo&amp;#39; /&amp;gt;
			&amp;lt;/div&amp;gt;
		);
	}
}

render(&amp;lt;App /&amp;gt;, document.getElementById(&amp;#39;root&amp;#39;));&lt;/pre&gt;
&lt;p&gt;Pretty slick, right? 😎&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;NOTE:&lt;/span&gt; You will need to have the proper module loaders set up with Webpack
for this to even work in the first place&lt;/p&gt;
&lt;h3&gt;ES7 Class Support&lt;/h3&gt;
&lt;p&gt;If you&amp;#39;re authoring React code you may well be interested in compile ES7-style
class syntax with babel. This things like &lt;code &gt;static propTypes = {}&lt;/code&gt;,&lt;code &gt;state = {}&lt;/code&gt;, etc. For example, here&amp;#39;s a &lt;code &gt;Counter&lt;/code&gt; component written using ES7 class
syntax:&lt;/p&gt;
&lt;pre&gt;import React from &amp;#39;react&amp;#39;;

import s from &amp;#39;./Counter.css&amp;#39;;

class Counter extends React.Component {
	static propTypes = {
		color: React.PropTypes.string,
	};
	
	static defaultProps = {
		initialCount: 0,
	};
	
	state = {
		count: this.props.initialCount,
	};
	
	increment = () =&amp;gt; {
		this.setState({ count: this.state.count + 1 })
	};
	
	decrement = () =&amp;gt; {
		this.setState({ count: this.state.count - 1 })
	};
	
	render() {
		return (
			&amp;lt;div className={s.Counter}&amp;gt;
				&amp;lt;h1&amp;gt;Count: {this.state.count}&amp;lt;/h1&amp;gt;
				&amp;lt;div className={s.controls}&amp;gt;
					&amp;lt;button onClick={this.decrement}&amp;gt;-&amp;lt;/button&amp;gt;
					&amp;lt;button onClick={this.increment}&amp;gt;+&amp;lt;/button&amp;gt;
				&amp;lt;/div&amp;gt;
			&amp;lt;/div&amp;gt;
		);
	}
}&lt;/pre&gt;
&lt;p&gt;If you&amp;#39;re not familiar with this syntax check out this blog post on the Babel
website: https://babeljs.io/blog/2015/06/07/react-on-es6-plus&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;NOTE:&lt;/span&gt; At the time of this writing Flow requires semicolons after property
initializers in order to type check effectively, even though Babel does not
require this.&lt;/p&gt;
&lt;p&gt;In order to allow code like that above we need to update the &lt;code &gt;[options]&lt;/code&gt;
section of &lt;code &gt;.flowconfig&lt;/code&gt; again:&lt;/p&gt;
&lt;pre&gt;[ignore]
.&lt;span class=&quot;italic&quot;&gt;/node_modules/fbjs/.&lt;/span&gt;

[include]

[libs]

[options]
module.name_mapper.extension=&amp;#39;css&amp;#39; -&amp;gt; &amp;#39;&amp;lt;PROJECT_ROOT&amp;gt;/flow/CSSModule.js.flow&amp;#39;
module.name_mapper.extension=&amp;#39;styl&amp;#39; -&amp;gt; &amp;#39;&amp;lt;PROJECT_ROOT&amp;gt;/flow/CSSModule.js.flow&amp;#39;
module.name_mapper.extension=&amp;#39;png&amp;#39; -&amp;gt; &amp;#39;&amp;lt;PROJECT_ROOT&amp;gt;/flow/WebpackAsset.js.flow&amp;#39;
module.name_mapper.extension=&amp;#39;jpg&amp;#39; -&amp;gt; &amp;#39;&amp;lt;PROJECT_ROOT&amp;gt;/flow/WebpackAsset.js.flow&amp;#39;
esproposal.class_static_fields=enable
esproposal.class_instance_fields=enable&lt;/pre&gt;
&lt;p&gt;We&amp;#39;ve added two new lines to tell Flow we want to support this new class
syntax:&lt;/p&gt;
&lt;pre&gt;esproposal.class_static_fields=enable
esproposal.class_instance_fields=enable&lt;/pre&gt;
&lt;h3&gt;Ignore Single Lines in Flow&lt;/h3&gt;
&lt;p&gt;The last Flow trick I&amp;#39;ll show you today is how to tell Flow to ignore single lines in your code. Just like with ESLint, it can be useful to be able to ignore just one line in a file. There are usually two reasons you would want to do this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The code in question needs to be refactored to be properly typed but it
would take too much time or effort to do it now&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Flow does not yet support some feature or has a bug&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;The first point is pretty obvious, but the second may come as a surprise. Flow is very advanced and very useful &lt;span class=&quot;italic&quot;&gt;today&lt;/span&gt; but it is not without its own bugs or missing features, so there may be times when you need to tell Flow to ignore a line for reason number two.&lt;/p&gt;
&lt;p&gt;The way to ignore single lines is by using the &lt;code &gt;supress_comment&lt;/code&gt; option within your &lt;code &gt;.flowconfig&lt;/code&gt;. Let&amp;#39;s define two ignore patterns so that we can differentiate between the two types of reasons to ignore listed above:&lt;/p&gt;
&lt;pre&gt;suppress_comment=\(.\|\n\)&lt;span class=&quot;italic&quot;&gt;\$FlowFixMe
suppress_comment=\(.\|\n\)&lt;/span&gt;\$FlowIssue&lt;/pre&gt;
&lt;p&gt;Now anywhere in our code where we want Flow to ignore a line we can place a
comment on the proceeding line:&lt;/p&gt;
&lt;pre&gt;// $FlowFixMe: We aren&amp;#39;t yet ready to refactor this line...
function manyUntypedArgs(a, b, x, y) { /* ... */ }&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That&amp;#39;s it! These are the tricks I&amp;#39;ve found to be most useful in my day to day
usage of Flow so far.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s the full &lt;code &gt;.flowconfig&lt;/code&gt; we created throughout this post for your
reference:&lt;/p&gt;
&lt;pre&gt;[ignore]
.&lt;span class=&quot;italic&quot;&gt;/node_modules/fbjs/.&lt;/span&gt;

[include]

[libs]

[options]
module.name_mapper.extension=&amp;#39;css&amp;#39; -&amp;gt; &amp;#39;&amp;lt;PROJECT_ROOT&amp;gt;/flow/CSSModule.js.flow&amp;#39;
module.name_mapper.extension=&amp;#39;styl&amp;#39; -&amp;gt; &amp;#39;&amp;lt;PROJECT_ROOT&amp;gt;/flow/CSSModule.js.flow&amp;#39;
module.name_mapper.extension=&amp;#39;png&amp;#39; -&amp;gt; &amp;#39;&amp;lt;PROJECT_ROOT&amp;gt;/flow/WebpackAsset.js.flow&amp;#39;
module.name_mapper.extension=&amp;#39;jpg&amp;#39; -&amp;gt; &amp;#39;&amp;lt;PROJECT_ROOT&amp;gt;/flow/WebpackAsset.js.flow&amp;#39;
esproposal.class_static_fields=enable
esproposal.class_instance_fields=enable
suppress_comment=\(.\|\n\)&lt;span class=&quot;italic&quot;&gt;\$FlowFixMe
suppress_comment=\(.\|\n\)&lt;/span&gt;\$FlowIssue&lt;/pre&gt;
&lt;p&gt;You may have other options you need to make to your &lt;code &gt;.flowconfig&lt;/code&gt;, such as
defining a directory for your &lt;a href=&quot;https://flowtype.org/docs/declarations.html&quot;&gt;declaration files&lt;/a&gt;. But hopefully this
configuration helps get you started with Flow and Webpack! Big wins ahead.&lt;/p&gt;
&lt;p&gt;If you have any questions feel free to lave a comment below or &lt;a href=&quot;https://twitter.com/ian_sinn&quot;&gt;hit me up on
twitter&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Testing Webpack Plugins]]></title><link>https://blog.iansinnott.com/testing-webpack-plugins/</link><guid isPermaLink="false">https://blog.iansinnott.com/testing-webpack-plugins/</guid><pubDate>Wed, 11 May 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;bold italic&quot;&gt;TL;DR:&lt;/span&gt;&lt;span class=&quot;italic&quot;&gt; I&amp;#39;m going to show you how to test Webpack plugins. I&amp;#39;ll even show you how to integrate with a CI server 😄. The trick is to use the Webpack &lt;/span&gt;&lt;a class=&quot;italic&quot; href=&quot;https://webpack.github.io/docs/node.js%E2%B8%BBapi.html&quot;&gt;Node API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ever built a &lt;a href=&quot;https://github.com/webpack/docs/wiki/how%E2%B8%BBto%E2%B8%BBwrite%E2%B8%BBa%E2%B8%BBplugin&quot;&gt;Webpack Plugin&lt;/a&gt;? Ever wondered how to test that awesome plugin you just built? If so, this article is for you.&lt;/p&gt;
&lt;p&gt;I scoured the internet (skimmed the first page of a google search) for resources on testing Webpack plugins and came up empty, so I decided it was time to take matters into my own hands!&lt;/p&gt;
&lt;p&gt;I recently built my own Webpack plugin for generating static sites from React Router routes. You can check it out &lt;a href=&quot;https://github.com/iansinnott/react%E2%B8%BBstatic%E2%B8%BBwebpack%E2%B8%BBplugin&quot;&gt;here if interested&lt;/a&gt;. Anyway, I was getting somewhat annoyed that I hadn&amp;#39;t yet tested the plugin. I had seen some regressions as I added support for more features and it was no fun to have to resolve those issues when I really just anted to generate awesome static sites using React and Webpack.&lt;/p&gt;
&lt;h2&gt;Where to turn...&lt;/h2&gt;
&lt;p&gt;Even if the first page of a google search didn&amp;#39;t answer my questions, I figured someone somewhere must have needed to test their Webpack plugins in the past, and I was right! My first move was to think about what popular Webpack plugins I was aware of. The first one that came to mind was the venerable &lt;a href=&quot;https://github.com/webpack/extract%E2%B8%BBtext%E2%B8%BBwebpack%E2%B8%BBplugin&quot;&gt;Extract Text Webpack Plugin&lt;/a&gt;. Little did I know, it was written by the same guy who wrote Webpack.&lt;/p&gt;
&lt;p&gt;I figured that such a high profile plugin is likely to be well tested and it is. The plugin has a whole &lt;a href=&quot;https://github.com/webpack/extract%E2%B8%BBtext%E2%B8%BBwebpack%E2%B8%BBplugin/tree/master/test&quot;&gt;suite of tests&lt;/a&gt; which you can check out and use as a reference for writing your own. Nice 💥&lt;/p&gt;
&lt;h2&gt;Writing the tests&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s jump in. To write a tests for a Webpack plugin you will probably want to analyze the output of a build. To do so, you can simply use the &lt;a href=&quot;https://webpack.github.io/docs/node.js%E2%B8%BBapi.html&quot;&gt;Node API&lt;/a&gt;. It runs in Node so it probably runs in your favorite test runner. For me this is &lt;a href=&quot;https://github.com/sindresorhus/ava&quot;&gt;Ava&lt;/a&gt;, but it&amp;#39;s just Node code so you can use whatever you like.&lt;/p&gt;
&lt;p&gt;The Webpack API let&amp;#39;s you pass in options and a callback to Webpack. The callback will be called with an &lt;code &gt;err&lt;/code&gt; object and some &lt;code &gt;stats&lt;/code&gt; on how the build went. In short, here&amp;#39;s the &lt;a href=&quot;https://github.com/iansinnott/react%E2%B8%BBstatic%E2%B8%BBwebpack%E2%B8%BBplugin/blob/master/example/test.js&quot;&gt;exact test I use in my plugin&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;import test from &amp;#39;ava&amp;#39;;
import webpack from &amp;#39;webpack&amp;#39;;

// 0. Import the config that uses my plugin
import options from &amp;#39;./webpack.config.js&amp;#39;;

test.cb(&amp;#39;Compiles routes nested at one level&amp;#39;, t =&amp;gt; {

// 1. Run webpack
webpack(options, function(err, stats) {

// 2. Fail test if there are errors
if (err) {
  return t.end(err);
} else if (stats.hasErrors()) {
  return t.end(stats.toString());
}

// 3. Map asset objects to output filenames
const files = stats.toJson().assets.map(x =&amp;gt; x.name);

// 4. Run assertions. Make sure that the three expected
//    HTML files were generated
t.true(files.indexOf(&amp;#39;index.html&amp;#39;) !== -1);
t.true(files.indexOf(&amp;#39;about.html&amp;#39;) !== -1);
t.true(files.indexOf(&amp;#39;404.html&amp;#39;) !== -1);

t.end();
});
});&lt;/pre&gt;
&lt;p&gt;This is a pretty simple test. Given the routes defined in &lt;code href=&quot;https://github.com/iansinnott/react%E2%B8%BBstatic%E2%B8%BBwebpack%E2%B8%BBplugin/blob/master/example/src/routes.js&quot;&gt;routes.js&lt;/code&gt;, the plugin should generate three HTML files: &lt;code &gt;index.html&lt;/code&gt;, &lt;code &gt;about.html&lt;/code&gt; and &lt;code &gt;404.html&lt;/code&gt;. This test simply runs Webpack and checks the output to make sure those three files were generated. It doesn&amp;#39;t check the contents of those files or check that they were written to disk, but this test already gives me infinitely more code coverage than I had before.&lt;/p&gt;
&lt;p&gt;Of course it should be noted that I had to create a whole new directory and give it its own &lt;code &gt;package.json&lt;/code&gt; and &lt;code &gt;node_modules&lt;/code&gt; in order to get this test to run, but it works.&lt;/p&gt;
&lt;p&gt;Also, looking at the Extract Plugin tests it looks like it may not be necessary to do a full &lt;code &gt;npm instal&lt;/code&gt; for the subdirectory in order to run Webpack. In the future I may optimize the tests by looking more closely at how the tests are being run in the Extract Plugin.&lt;/p&gt;
&lt;h2&gt;Running your tests on a CI server&lt;/h2&gt;
&lt;p&gt;Now that you know how to write tests for a Webpack plugin you will also probably want to run them automatically whenever you push. Personally I use &lt;a href=&quot;https://circleci.com/&quot;&gt;Circle CI&lt;/a&gt; for this, but I&amp;#39;m sure Travis or any other modern CI service would work fine.&lt;/p&gt;
&lt;p&gt;The key point to note is that you need to run &lt;code &gt;npm install&lt;/code&gt; in whatever directory you&amp;#39;re using for your tests. This will vary depending on your CI provider so I&amp;#39;ll just show you the command I run and link you to my &lt;code &gt;circle.yml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Install node modules in the &lt;code &gt;example/&lt;/code&gt; directory using a &lt;a href=&quot;http://www.tldp.org/LDP/abs/html/subshells.html&quot;&gt;subshell&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;(cd example; npm install)&lt;/pre&gt;
&lt;p&gt;You can see my full &lt;code href=&quot;https://github.com/iansinnott/react%E2%B8%BBstatic%E2%B8%BBwebpack%E2%B8%BBplugin/blob/master/circle.yml#L9&quot;&gt;circle.yml&lt;/code&gt;&lt;a href=&quot;https://github.com/iansinnott/react%E2%B8%BBstatic%E2%B8%BBwebpack%E2%B8%BBplugin/blob/master/circle.yml#L9&quot;&gt; here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;It wasn&amp;#39;t as hard as I thought it would be to run tests on a Webpack plugin. That being said I didn&amp;#39;t find this documented anywhere and google proved particularly useless since it turned up a ton of results related to Webpack plugins that run tests on your web app for you... I was looking for ways to run tests on Webpack plugins &lt;span class=&quot;italic&quot;&gt;themselves&lt;/span&gt;, so this is not what I was looking for.&lt;/p&gt;
&lt;p&gt;Hopefully this helps you out. Webpack plugins are crucial pieces of many build processes out there, so it&amp;#39;s important that we know how to test them.&lt;/p&gt;
&lt;p&gt;Feel free to &lt;a href=&quot;https://github.com/iansinnott/react%E2%B8%BBstatic%E2%B8%BBwebpack%E2%B8%BBplugin&quot;&gt;star my plugin repository&lt;/a&gt; if you liked this write up, or leave me a comment if anything wasn&amp;#39;t clear.&lt;/p&gt;
&lt;p&gt;Cheers 🍻&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Going fully HTTPS (SSL) fo' free]]></title><link>https://blog.iansinnott.com/going-fully-https-ssl-fo-free/</link><guid isPermaLink="false">https://blog.iansinnott.com/going-fully-https-ssl-fo-free/</guid><pubDate>Fri, 29 Apr 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A few weeks ago I moved &lt;a href=&quot;https://www.iansinnott.com&quot;&gt;my website&lt;/a&gt; over to HTTPS.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;//dropsinn.s3.amazonaws.com/Screen%20Shot%202016-04-29%20at%2011.08.19%20AM.png?table=block&amp;id=&quot; alt=&quot;iansinnott.com using https&quot;/&gt;&lt;figcaption&gt;iansinnott.com using https&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Then, yesterday I moved my &lt;a href=&quot;https://blog.iansinnott.com&quot;&gt;blog&lt;/a&gt; over to HTTPS.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;//dropsinn.s3.amazonaws.com/Screen%20Shot%202016-04-29%20at%2011.07.41%20AM.png?table=block&amp;id=&quot; alt=&quot;blog.iansinnott.com running on https&quot;/&gt;&lt;figcaption&gt;blog.iansinnott.com running on https&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;This now means that my two primary web properties are both using SSL, and one of them was completely free to set up.&lt;/p&gt;
&lt;h2&gt;Free SSL with LetsEncrypt&lt;/h2&gt;
&lt;p&gt;If you want SSL on your site for free there&amp;#39;s a new certificate authority called &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;LetsEncrypt&lt;/a&gt; which is completely free! 👏 This is excellent news, and definitely an option for you, especially if you&amp;#39;re managing your own server.&lt;/p&gt;
&lt;p&gt;My main site, iansinnott.com, actually uses LetsEncrypt under the hood through &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt;, but it&amp;#39;s not exactly free because I do pay &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt; to host my site every month.&lt;/p&gt;
&lt;p&gt;However, LetsEncrypt is not what I&amp;#39;m talking about today. I just discovered something super cool which is currently letting my host my blog, a &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; site, using SSL.&lt;/p&gt;
&lt;h2&gt;All the SSL fo&amp;#39; free using CloudFlare&lt;/h2&gt;
&lt;p&gt;It turns out if you use &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;CloudFlare&lt;/a&gt; for DNS on your domain you can also get SSL completely for free.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;//dropsinn.s3.amazonaws.com/Screen%20Shot%202016-04-29%20at%2012.43.40%20PM.png?table=block&amp;id=&quot; alt=&quot;CloudFlare Free Cert&quot;/&gt;&lt;figcaption&gt;CloudFlare Free Cert&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The setup is pretty simple as well. CloudFlare has the excellent feature that they will scan your domain and migrate most of the DNS settings for you. So all I ended up having to do to get blog.iansinnott.com running over HTTPS was to move my DNS to CloudFlare. The DNS propagation took overnight, but the time I had to personally spend was less than 30 minutes.&lt;/p&gt;
&lt;p&gt;Again, this is completely free, which is why I&amp;#39;m happy to write about CloudFlare and give them what amounts to free advertising. I&amp;#39;m guessing they make their money with enterprise clients as opposed to individuals. Either way, I&amp;#39;ve found this to be an excellent free service and I&amp;#39;m happy to now have my GitHub Pages site running over SSL for free.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The Importance of Community]]></title><link>https://blog.iansinnott.com/the-importance-of-community/</link><guid isPermaLink="false">https://blog.iansinnott.com/the-importance-of-community/</guid><pubDate>Fri, 29 Apr 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Specifically, when making technical decisions.&lt;/p&gt;
&lt;p&gt;Community his hugely important any many areas of life, but lately I&amp;#39;ve found that it&amp;#39;s particularly pertinent in making technical decisions.&lt;/p&gt;
&lt;h2&gt;An example&lt;/h2&gt;
&lt;p&gt;Recently at &lt;a href=&quot;https://www.trustar.co/&quot;&gt;Trustar&lt;/a&gt; we started using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Graph_database&quot;&gt;graph database&lt;/a&gt;. We have a lot of interrelated data so the graph model has made conceptual sense for a long time.  So this year when we decided to implement a graph database in production we had a technical decision to make: Which database do we use?&lt;/p&gt;
&lt;p&gt;We&amp;#39;re a small team (currently ~5 engineers) so we definitely don&amp;#39;t have the bandwidth to build our own implementation. That means we need to choose among the existing solutions. There are currently several graph database providers in the wild, and they all seem to do pretty much the same thing. Technically speaking, the usual points they hit in differentiating themselves are ones of how they handle scalability and replication.&lt;/p&gt;
&lt;p&gt;But technical points are not the only ones to consider when making a decision like this. We also wanted a strong community around the company we chose. Being in San Francisco, it should come as no surprise that one of these companies—Neo4j—not only has an office hear but they also host &lt;a href=&quot;http://www.meetup.com/graphdb%E2%B8%BBsf/&quot;&gt;a meetup&lt;/a&gt; near our office.&lt;/p&gt;
&lt;p&gt;I went to their meetup once and was quite happy with what I found. Everyone on their team was friendly and helpful. That was all we needed. Now we&amp;#39;re running Neo4j in production and it&amp;#39;s the backing data-store on top of our visualization product, Constellation:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/Screen%20Shot%202016-04-29%20at%2011.42.03%20AM.png?table=block&amp;id=&quot; alt=&quot;Constellation Demo&quot;/&gt;&lt;figcaption&gt;Constellation Demo&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;On top of that, I also got a chance to do an interview with the Neo4j which is now live on their blog: http://neo4j.com/blog/ian-sinnott-software-engineer-trustar/&lt;/p&gt;
&lt;p&gt;Then earlier this week two Neo4j team members came to our office and had a long discussion with us about our graph database architecture. All of this while &lt;span class=&quot;bold&quot;&gt;we&amp;#39;re still on the &lt;/span&gt;&lt;span class=&quot;bold italic&quot;&gt;free teir&lt;/span&gt;&lt;span class=&quot;bold&quot;&gt; of their product&lt;/span&gt;. That&amp;#39;s excellent.&lt;/p&gt;
&lt;h2&gt;Community Matters&lt;/h2&gt;
&lt;p&gt;That was just one example in my own life, but if you look at other projects with significant communities the same is clear:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;React
React is some amazing tech, but imagine how much &lt;span class=&quot;italic&quot;&gt;less&lt;/span&gt; useful it would be without the plethora of learning materials, examples and premade components all created by the community?&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Redux
Same as above. Redux is an excellent state-management solution on it&amp;#39;s own but how much &lt;span class=&quot;italic&quot;&gt;less&lt;/span&gt; useful would it be without the fanatic community that surrounds it?&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The point being, if you&amp;#39;re ever struggling with a decision between two technical solutions opt for the one with the larger community.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Teaching a React.js Workshop]]></title><link>https://blog.iansinnott.com/teaching-a-reactjs-workshop/</link><guid isPermaLink="false">https://blog.iansinnott.com/teaching-a-reactjs-workshop/</guid><pubDate>Sat, 27 Feb 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Who wants to be a speaker? This guy! 🙌&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/rwr-ian-1.jpg?table=block&amp;id=&quot; alt=&quot;Ian Speaking at Real World React Meetup&quot;/&gt;&lt;figcaption&gt;Ian Speaking at Real World React Meetup&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Last Sunday was a significant event for me: I put on a &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; workshop (&lt;a href=&quot;http://www.meetup.com/Real%E2%B8%BBWorld%E2%B8%BBReact/events/228169300/&quot;&gt;link here&lt;/a&gt;) to teach beginners how to get started with React. It was a full day event and it was a great learning experience for myself and hopefully for the students as well.&lt;/p&gt;
&lt;h2&gt;Giving back to the community&lt;/h2&gt;
&lt;p&gt;The community surrounding React has done a lot for me. It&amp;#39;s only been a year since I started using this technology, but it&amp;#39;s played a tremendous role in my personal development as a programmer. As such, I really wanted to start contributing back to this amazing community that has helped nurture my own development.&lt;/p&gt;
&lt;p&gt;I learned React and the surrounding ecosystem on my own and I know how daunting it can be. As a community we love to toss around terms like ES6, Babel, Webpack, Flux, Redux, etc. as if it&amp;#39;s all expected knowledge for the field. And while you probably should know what all these things are after being part of the community for a while it can be very daunting when it&amp;#39;s all new.&lt;/p&gt;
&lt;p&gt;So in creating this workshop I wanted to utilize all the knowledge I&amp;#39;ve accumulated over the past year while learning React to help speed the process for others. React has been a game changing technology for many – including myself – and I know it can be for others as well. They just need to know where to start.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/rwr-ian-working-with-student.jpg?table=block&amp;id=&quot; alt=&quot;Ian Working with student at Real World React Meetup&quot;/&gt;&lt;figcaption&gt;Ian Working with student at Real World React Meetup&lt;/figcaption&gt;&lt;/figure&gt;
&lt;h2&gt;So much fun&lt;/h2&gt;
&lt;p&gt;Something I wasn&amp;#39;t entirely sure about going in was whether or not I would enjoy speaking. But after last Sunday I can firmly say that I &lt;span class=&quot;italic&quot;&gt;love&lt;/span&gt; it. This was a revelation for me. It was hugely fun to stand at the front of the class and speak about a technology I&amp;#39;m passionate about, and now I want to do more of it.&lt;/p&gt;
&lt;p&gt;Moving forward I&amp;#39;m going to pursue more speaking opportunities, including at conferences and tech schools here in SF. The goal will continue to be to provide as much value as possible to the students and/or audience members.&lt;/p&gt;
&lt;h2&gt;Room for improvement&lt;/h2&gt;
&lt;p&gt;The workshop went well, but it certainly wasn&amp;#39;t perfect. There are quite a few things I would now change having done this once.&lt;/p&gt;
&lt;h3&gt;Rehearse&lt;/h3&gt;
&lt;p&gt;Yup, presentations go more smoothly if you&amp;#39;ve rehearsed them beforehand. Who knew? 😅 The presentations still went quite well considering I didn&amp;#39;t have time to rehearse, but they could have been smoother.&lt;/p&gt;
&lt;h3&gt;Keep it concise&lt;/h3&gt;
&lt;p&gt;One of my &amp;quot;lectures&amp;quot; lasted a full 50 minutes. I was targeting 20 minutes and wildly overshot that, so clearly there are some wins to be had by reducing the content or splitting lectures into multiple parts. People&amp;#39;s attentions spans are limited and as speakers we need to respect that.&lt;/p&gt;
&lt;h3&gt;No blank slates&lt;/h3&gt;
&lt;p&gt;I had a chance to talk to Ryan Florence recently about teaching React. If you didn&amp;#39;t know he teaches React for a living and has a lot of good advice when it comes to teaching it. I asked him about his teaching methods and he reminded me that in a real world scenario students will almost never be facing an empty file—they will instead be editing existing code.&lt;/p&gt;
&lt;p&gt;This was something of a revelation for me. It makes perfect sense that at most companies you will be editing – not creating – new code, but it never crossed my mind. I work at a startup and have build all of my company&amp;#39;s projects from scratch... but that&amp;#39;s unusual.&lt;/p&gt;
&lt;h3&gt;Provide Scrum-like direction during exercises&lt;/h3&gt;
&lt;p&gt;This ties into the point above about not starting from scratch. Students would have benefited from more organized exercises with action lists that they could follow to completion. Instead I left it open ended and showed students the final app before asking them to build it from scratch.&lt;/p&gt;
&lt;p&gt;Next time I will provide more structure. Since many of the students at the workshop already work at companies they would likely be used to a Scrum-like project structure with minimal user stories and such.&lt;/p&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;My takeaways from this experience were:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Putting on a workshop can be a ton of fun&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;There&amp;#39;s a serious market for learning React, especially here in SF&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;I really enjoyed speaking and am going to pursue it further&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;To that last point, I will be speaking at my first conference in a week about &lt;a href=&quot;http://fitc.ca/presentation/building%E2%B8%BBstatic%E2%B8%BBsites%E2%B8%BBwith%E2%B8%BBreact/&quot;&gt;building static sites with React&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With all the current hype over React and React Native it really feels like React is eating the world. I will leave you with this image from React Conf 2016 which just wrapped up earlier this week. I think it really sums up the current sentiment in the community.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/react-fervor.jpg?table=block&amp;id=&quot; alt=&quot;React Fervor&quot;/&gt;&lt;figcaption&gt;React Fervor&lt;/figcaption&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Switching Away From Mongoose]]></title><link>https://blog.iansinnott.com/switching-away-from-mongoose/</link><guid isPermaLink="false">https://blog.iansinnott.com/switching-away-from-mongoose/</guid><pubDate>Sat, 01 Aug 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I&amp;#39;ve been using MongoDB as my primary database for some time now. That means all new projects I created were running Mongo, and Mongoose was my ORM of choice. Mongoose has worked well for my in the past and even &lt;span class=&quot;italic&quot;&gt;still&lt;/span&gt; does, but I can feel that it&amp;#39;s time for a switch.&lt;/p&gt;
&lt;h2&gt;Why the change?&lt;/h2&gt;
&lt;h3&gt;Mongo&lt;/h3&gt;
&lt;p&gt;The main reason actually isn&amp;#39;t Mongoose, but rather &lt;span class=&quot;bold&quot;&gt;Mongo&lt;/span&gt;. The data in &lt;span class=&quot;italic&quot;&gt;most&lt;/span&gt; applications is probably going to be relational so why would you use a non-relational database? The main reason I liked Mongo initially was that it had a JavaScript API but I&amp;#39;ve come to realize that doesn&amp;#39;t matter that much, and it can even be a hindrance when working with team members that know and love SQL.&lt;/p&gt;
&lt;h3&gt;Mpromise&lt;/h3&gt;
&lt;p&gt;For anyone who doesn&amp;#39;t know already, Mongoose provides a promise-based API for doing async database operations in addition to the classic callbacks. This API is unfortunately under documented, but it exists none-the-less and the library it uses to implement promises is &lt;a href=&quot;https://github.com/aheckmann/mpromise&quot;&gt;Mpromise&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mpromise seemed fine at first, but it turns out it simply doesn&amp;#39;t adhere to the ES6 Promise spec. The most glaring example of this is that Mpromise does not implement &lt;code &gt;.catch&lt;/code&gt;, meaning you can&amp;#39;t do nice pretty error handling at the bottom of your then-stack. Here&amp;#39;s an example using Express to build an API:&lt;/p&gt;
&lt;pre&gt;import Model from &amp;#39;../models/Model.js&amp;#39;;

// GET all the Models
api.get(&amp;#39;/models&amp;#39;, (req, res, next) =&amp;gt; {
Model.find({})
.then(data =&amp;gt; res.send(data))
.catch(next);
});&lt;/pre&gt;
&lt;p&gt;The above code will break, throwing an error because an Mpromise Promise has no &lt;code &gt;catch&lt;/code&gt; method. There&amp;#39;s even an &lt;a href=&quot;https://github.com/aheckmann/mpromise/issues/15&quot;&gt;open issue about this&lt;/a&gt; from &lt;span class=&quot;italic&quot;&gt;last year&lt;/span&gt;. That&amp;#39;s probably already a dealbreaker, but we can get around this by patching Mpromise ourself:&lt;/p&gt;
&lt;pre&gt;var mpromise = require(&amp;#39;mongoose/node_modules/mpromise&amp;#39;);

mpromise.prototype.catch = function(onReject) {
return this.then(undefined, onReject);
};&lt;/pre&gt;
&lt;p&gt;Still, this is ugly and should not be necessary with the myriad promise libraries in addition to the rollout of ES6 (We can currently use native Promises in Chrome and FF).&lt;/p&gt;
&lt;h2&gt;So what now?&lt;/h2&gt;
&lt;p&gt;Well, despite what I said about Mongo earlier it&amp;#39;s still the database I know best. For this reason I&amp;#39;m going to keep on using it in the interim while I survey the state of relational database support in the Node ecosystem. There are a number of interesting libraries currently out there. Here are a few:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;https://github.com/tgriesser/knex&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;https://github.com/tgriesser/bookshelf&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;https://github.com/balderdashy/waterline&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I&amp;#39;m currently leaning toward Waterline, as I tried out Bookshelf and wasn&amp;#39;t a fan of the API. That being said, the whole idea of query building with Knex is interesting, and allows simple application of existing relational DB knowledge to a Node app.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m not sure what my ideal stack will be in a couple months, but for now I&amp;#39;m trying out some new things in the hope of discovering the &amp;quot;ultimate&amp;quot; stack. Maybe I&amp;#39;ll get tired of writing out all my routing logic with Express and switch to &lt;a href=&quot;https://github.com/balderdashy/sails&quot;&gt;Sails&lt;/a&gt; or &lt;a href=&quot;https://github.com/strongloop/loopback&quot;&gt;Loopback&lt;/a&gt;... or better yet maybe I&amp;#39;ll get fed up with JS all together and switch to a Clojure-ClojureScript stack. I&amp;#39;d really love to start using &lt;a href=&quot;https://github.com/omcljs/om&quot;&gt;Om&lt;/a&gt; right now, but the overhead of getting up to speed with ClojureScript would cause a serious hit to my immediate productivity.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Use SSH ForwardAgent for fun and profit]]></title><link>https://blog.iansinnott.com/use-ssh-forwardagent-for-fun-and-profit/</link><guid isPermaLink="false">https://blog.iansinnott.com/use-ssh-forwardagent-for-fun-and-profit/</guid><pubDate>Mon, 20 Jul 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Yesterday I discovered something amazing. With just &lt;span class=&quot;italic&quot;&gt;one line&lt;/span&gt; of code you can bypass the annoyance of not being able to access private web services (i.e. GitHub) while SSHed into a machine. The method is called SSH agent forwarding and it&amp;#39;s changed my deployment workflow.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s the quick version. For every &lt;code &gt;Host&lt;/code&gt; in your &lt;code &gt;~/.ssh/config&lt;/code&gt; file you can add a new line that allows you to use your own &lt;span class=&quot;italic&quot;&gt;local&lt;/span&gt; SSH keys even while SSHed into the remote server. Example:&lt;/p&gt;
&lt;pre&gt;Host myhost
HostName X.X.X.X
ForwardAgent yes # &amp;lt;-- This line is key&lt;/pre&gt;
&lt;p&gt;See that last line? That is all it takes to turn on agent forwarding whenever you SSH into the server called &lt;code &gt;myhost&lt;/code&gt;. Cool right?&lt;/p&gt;
&lt;h3&gt;The workflow&lt;/h3&gt;
&lt;p&gt;So, you might be wondering why this matters. The answer is ease of deployment. For small and even mid-size projects it&amp;#39;s probably not too much to ask to SSH in to the actual server whenever you need to deploy new code. This may not be the best or easiest deployment workflow, but it not difficult and it&amp;#39;s quite simple.&lt;/p&gt;
&lt;p&gt;Furthermore, if your deployment process ever breaks it will not be difficult to troubleshoot because you will understand every step as opposed to using some automated deployment method that makes everything ten times as complex.&lt;/p&gt;
&lt;p&gt;Now that you have ForwardAgent turned on, you can do something like this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Change the codebase. Commit changes&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;&lt;code &gt;git push&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;&lt;code &gt;ssh&lt;/code&gt; into production server. &lt;code &gt;cd&lt;/code&gt; into app directory&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;&lt;code &gt;git pull&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Restart your app, now with up-to-date code&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;I love this workflow, mainly because step 4 is much easier than it was before I discovered &lt;code &gt;ForwardAgent&lt;/code&gt;. Since you can easily pull code from any private repo that you have SSH access to you can now use Git as your primary means of deployment.&lt;/p&gt;
&lt;p&gt;Step 5 will depend on your setup and is up to you, but hopefully it&amp;#39;s nothing too onerous. If it is, then I suggest you check out &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;. It may just make your deployment life a whole lot better.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Managing state and controlled form fields with React]]></title><link>https://blog.iansinnott.com/managing-state-and-controlled-form-fields-with-react/</link><guid isPermaLink="false">https://blog.iansinnott.com/managing-state-and-controlled-form-fields-with-react/</guid><pubDate>Mon, 11 May 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;UPDATE (2016-07-28):&lt;/span&gt; As of React v15 &lt;code &gt;valueLink&lt;/code&gt; and &lt;code &gt;checkedLink&lt;/code&gt; are officially deprecated. I heavily advocate the use of both of these APIs in this article. If you want to see my thoughts on the deprecation see &lt;a href=&quot;#comment%E2%B8%BB2692300179&quot;&gt;this comment below&lt;/a&gt;. For the official deprecation see &lt;a href=&quot;https://facebook.github.io/react/docs/two%E2%B8%BBway%E2%B8%BBbinding%E2%B8%BBhelpers.html&quot;&gt;the docs article here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With React, you basically get two different ways to deal with forms:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Standard input elements that can be modified by the user&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&amp;quot;Controlled&amp;quot; input elements that can only be modified programatically&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The first type is pretty straightforward in React, you simply don&amp;#39;t provide a &lt;code &gt;value&lt;/code&gt; prop:&lt;/p&gt;
&lt;pre&gt;React.createClass({
render (
&amp;lt;input type=&amp;#39;text&amp;#39; /&amp;gt;
);
});&lt;/pre&gt;
&lt;p&gt;The value of that &lt;code &gt;&amp;lt;input&amp;gt;&lt;/code&gt; element can be edited by the user in a browser, just like one would expect in a normal we app.&lt;/p&gt;
&lt;p&gt;The other type of input—a &amp;quot;Controlled&amp;quot; input—looks almost the same, but has a &lt;code &gt;value&lt;/code&gt; property:&lt;/p&gt;
&lt;pre&gt;React.createClass({
render (
&amp;lt;input type=&amp;#39;text&amp;#39; value=&amp;quot;You can&amp;#39;t change me!&amp;quot; /&amp;gt;
);
});&lt;/pre&gt;
&lt;p&gt;The value of this &lt;code &gt;&amp;lt;input&amp;gt;&lt;/code&gt; element will stubbornly refuse to change no matter what the user does. This is generally a terrible user experience, so React will actually warn you that your input cannot be modified:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/Screen%20Shot%202015-05-11%20at%2011.12.36%20PM.png?table=block&amp;id=&quot; alt=&quot;React warning message&quot;/&gt;&lt;figcaption&gt;React warning message&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;If you&amp;#39;re new-ish to React you might not know why you would want to do this. The answer is &lt;span class=&quot;italic&quot;&gt;state&lt;/span&gt;. React puts a big emphasis on explicitly keeping your components state in the &lt;code &gt;state&lt;/code&gt; property. So in order to create a form input that responds to user input you will need to use two-way data binding. Meaning the &lt;code &gt;value&lt;/code&gt; of the &lt;code &gt;&amp;lt;input&amp;gt;&lt;/code&gt; element will flow from your component into the DOM, but also from the DOM into your component. In other words, they will be kept in sync.&lt;/p&gt;
&lt;h2&gt;Manual Two-way data binding&lt;/h2&gt;
&lt;p&gt;The most common way to accomplish two-way data binding in React is to be explicit. This is by design, and it&amp;#39;s a good practice for smaller forms. Here&amp;#39;s how an example:&lt;/p&gt;
&lt;pre&gt;React.createClass({
getInitialState() {
inputValue: &amp;#39;&amp;#39;
},

render() {
return (
&amp;lt;input
type=&amp;#39;text&amp;#39;
value={this.state.inputValue}
onChange={this.onChange} /&amp;gt;
);
},

onChange(e) {
this.setState({ inputValue: e.target.value });
}
});&lt;/pre&gt;
&lt;p&gt;Here we&amp;#39;ve bound our input&amp;#39;s change event to the component&amp;#39;s &lt;code &gt;onChange&lt;/code&gt; function which will update &lt;code &gt;this.state&lt;/code&gt;. Whenever &lt;code &gt;this.state&lt;/code&gt; is updated the component will be re-rendered, causing the input value to reflect what the user typed.&lt;/p&gt;
&lt;p&gt;If that&amp;#39;s not quite clear, I highly recommend taking a look at the &lt;a href=&quot;https://facebook.github.io/react/docs/forms.html&quot;&gt;Forms guide on the React website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code above is explicit and not overly complicated, which is great for maintainabillty. There are virtually no downsides to this approach when dealing with a small form that only contains a few inputs. Issues only begin to crop up when you have many inputs that all need to update state.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s why we have...&lt;/p&gt;
&lt;h2&gt;The LinkedStateMixin&lt;/h2&gt;
&lt;p&gt;React comes with a handy mixin to help you achieve two-way data-binding very quickly. Use the LinkedStateMixin to save yourself soem hassle when wiring up large forms to stay in sync with component state:&lt;/p&gt;
&lt;pre&gt;// Make sure to require react with addons
var React = require(&amp;#39;react/addons&amp;#39;);

React.createClass({
mixins: [React.addons.LinkedStateMixin],

getInitialState() {
inputValue: &amp;#39;&amp;#39;
},

render() {
return (
&amp;lt;input type=&amp;#39;text&amp;#39; valueLink={this.linkState(&amp;#39;inputValue&amp;#39;)} /&amp;gt;
);
}
});&lt;/pre&gt;
&lt;p&gt;As you can see we replaced the &lt;code &gt;value&lt;/code&gt; prop with &lt;code &gt;valueLink&lt;/code&gt;. If you haven&amp;#39;t heard of &lt;code &gt;valueLink&lt;/code&gt; I&amp;#39;ll explain it in a sec.&lt;/p&gt;
&lt;p&gt;The &lt;code &gt;LinkedStateMixin&lt;/code&gt; saves us a good deal of typing, and especially when you have a large number of form fields that need to be tied to component state. The issue is that it&amp;#39;s not very flexible. Essentially it just binds the value of an input field to &lt;code &gt;this.state&lt;/code&gt;. But what if you are building a &lt;span class=&quot;italic&quot;&gt;stateless&lt;/span&gt; form component that gets all it&amp;#39;s values from props? Or, more interestingly, what if you are using Flux and don&amp;#39;t want to set state directly but rather call an action that updates a store?&lt;/p&gt;
&lt;p&gt;This is what &lt;code &gt;valueLink&lt;/code&gt; is great for.&lt;/p&gt;
&lt;h2&gt;What exactly is &lt;code &gt;valueLink&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;The &lt;code &gt;valueLink&lt;/code&gt; prop is a fairly under-documented feature of form inputs in React that simplifies the onChange / setState pattern described at the beginning of this post. It&amp;#39;s a shortcut for telling an input where to get its &lt;code &gt;value&lt;/code&gt; prop from and what function to call when an &lt;code &gt;onChange&lt;/code&gt; event is fired. In it&amp;#39;s most simple form the &lt;code &gt;valueLink&lt;/code&gt; prop points to a plain old JS object with two distinct props:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;value&lt;/code&gt;: The value of the input at any given time&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;requestChange&lt;/code&gt;: The function to call whenever &lt;code &gt;onChange&lt;/code&gt; is fired on the input. &lt;code &gt;requestChange&lt;/code&gt; will be called with the update value of the input, so there&amp;#39;s no need to access the value using an event object as you might do if you were using the actual &lt;code &gt;onChange&lt;/code&gt; event.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;If you&amp;#39;re familiar with React&amp;#39;s PropTypes feature then this expression of &lt;code &gt;valueLink&lt;/code&gt; as a &lt;code &gt;propType&lt;/code&gt; should make it clear what you&amp;#39;re going for:&lt;/p&gt;
&lt;pre&gt;React.createClass({
propTypes: {
valueLink: React.PropTypes.shape({
value: React.PropTypes.any.isRequired,
requestChange: React.PropTypes.func.isRequired
})
}
});&lt;/pre&gt;
&lt;h2&gt;Manually linking input value to state with &lt;code &gt;valueLink&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s check out an example.&lt;/p&gt;
&lt;pre&gt;function makeValueLink(key) {
return {
value: this.state[key],
requestChange: function(newValue) {
newState = {};
newState[key] = newValue;
this.setState(newState);
}
}
}

React.createClass({
getInitialState() {
inputValue: &amp;#39;&amp;#39;
},

render() {
return (
&amp;lt;input type=&amp;#39;text&amp;#39; valueLink={makeValueLink(&amp;#39;inputValue&amp;#39;)} /&amp;gt;
);
}
});&lt;/pre&gt;
&lt;p&gt;Now you will get the same two-way data binding as you did when using the &lt;code &gt;LinkedStateMixin&lt;/code&gt;. What we&amp;#39;ve done here is basically created our own version of the &lt;code &gt;LinkedStateMixin&lt;/code&gt; to demonstrate how &lt;code &gt;valueLink&lt;/code&gt; works.&lt;/p&gt;
&lt;p&gt;You can use &lt;code &gt;valueLink&lt;/code&gt; to bind the &lt;code &gt;value&lt;/code&gt; prop of any input to the state of a component. If you instead want to set state on a parent component you can pass a &lt;code &gt;valueLink&lt;/code&gt; down as a prop just like you would do with an &lt;code &gt;onChange&lt;/code&gt; callback.&lt;/p&gt;
&lt;h3&gt;Don&amp;#39;t forget about &lt;code &gt;checkedLink&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The other important point to note is that some input types, namely &lt;code &gt;&amp;lt;input type=&amp;#39;radio&amp;#39;&amp;gt;&lt;/code&gt; and &lt;code &gt;&amp;lt;input type=&amp;#39;checkbox&amp;#39;&amp;gt;&lt;/code&gt; use the &lt;code &gt;checked&lt;/code&gt; prop because they represent boolean values. They still use a &lt;code &gt;value&lt;/code&gt; prop to determine what value corresponds to the &lt;code &gt;checked&lt;/code&gt; prop, but it&amp;#39;s only the &lt;code &gt;checked&lt;/code&gt; prop that can be changed by the user.&lt;/p&gt;
&lt;p&gt;React acknowledges this and provides us with the &lt;code &gt;checkedLink&lt;/code&gt; prop, which works exactly like &lt;code &gt;valueLink&lt;/code&gt; except it binds the &lt;code &gt;checked&lt;/code&gt; prop to state instead of the &lt;code &gt;value&lt;/code&gt; prop.&lt;/p&gt;
&lt;pre&gt;function makeValueLink(key) {
return {
value: this.state[key],
requestChange: function(newValue) {
newState = {};
newState[key] = newValue;
this.setState(newState);
}
}
}

React.createClass({
getInitialState() {
booleanValue: &amp;#39;&amp;#39;
},

render() {
return (
&amp;lt;input type=&amp;#39;checkbox&amp;#39; checkedLink={makeValueLink(&amp;#39;booleanValue&amp;#39;)} /&amp;gt;
);
}
});&lt;/pre&gt;
&lt;p&gt;Note that when using &lt;code &gt;checkedLink&lt;/code&gt; the shape of the object you pass in is still exactly the same, i.e. it needs a &lt;code &gt;value&lt;/code&gt; prop and a &lt;code &gt;requestChange&lt;/code&gt; prop. This is good because it means we can use our &lt;code &gt;makeValueLink&lt;/code&gt; function to bind any type of input to state including checkboxes and radios.&lt;/p&gt;
&lt;h2&gt;Putting it all together—Building a Flux form&lt;/h2&gt;
&lt;p&gt;The importance of &lt;code &gt;valueLink&lt;/code&gt; really shines when you&amp;#39;re using something like Flux where you don&amp;#39;t actually want to update &lt;code &gt;this.state&lt;/code&gt; directly but would like instead for data to flow through actions to stores which control the UI state. Using &lt;code &gt;valueLink&lt;/code&gt; makes this is quite easy:&lt;/p&gt;
&lt;pre&gt;var AppActions = require(&amp;#39;./AppActions&amp;#39;);

function makeValueLink(key) {
return {
value: this.state[key],
requestChange: function(newValue) {
AppActions.doSomething(key, newValue);
}
}
}

/**

This code is written much like you would if you were using the Alt Flux

implementation. The syntax would likely be slightly different with other

libraries.
*/
React.createClass({

// Assuming our store (AppStore) has a getState method, we would get the
// initial state like so
getInitialState() {
return AppStore.getState();
},

// Listen to our store for changes
componentDidMount() {
AppStore.listen(this.onChange);
},

// Stop listening if this component is unmounted
componentWillUnmount() {
AppStore.unlisten(this.onChange);
},

// Whenever our store emits a change event, update &lt;code &gt;this.state&lt;/code&gt; to reflect
// the state of the store.
onChange() {
this.setState(AppStore.getState());
},

render() {
return (
&amp;lt;input type=&amp;#39;checkbox&amp;#39; checkedLink={makeValueLink(&amp;#39;booleanValue&amp;#39;)} /&amp;gt;
);
}
})&lt;/pre&gt;
&lt;p&gt;Now whenever you check the checkbox &lt;code &gt;AppActions.doSomething&lt;/code&gt; will be called with a &lt;code &gt;key&lt;/code&gt; of &lt;code &gt;&amp;#39;booleanValue&amp;#39;&lt;/code&gt; and a &lt;code &gt;newValue&lt;/code&gt; of either &lt;code &gt;true&lt;/code&gt; or &lt;code &gt;false&lt;/code&gt; depending on whether or not it is checked.&lt;/p&gt;
&lt;p&gt;Then in &lt;code &gt;AppActions&lt;/code&gt; you would do whatever you want with the data and most likely dispatch it to all stores so they could update their state accordingly. &lt;code &gt;AppStore&lt;/code&gt; would get the dispatch and update it&amp;#39;s internal representation of state&lt;/p&gt;
&lt;p&gt;Hope all this helps as you build forms with React.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[In search of the ultimate tooling workflow]]></title><link>https://blog.iansinnott.com/in-search-of-the-ultimate-tooling-workflow/</link><guid isPermaLink="false">https://blog.iansinnott.com/in-search-of-the-ultimate-tooling-workflow/</guid><pubDate>Sun, 03 May 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Lately I&amp;#39;ve been exploring the various options out there for front-end tooling. I&amp;#39;m about to start a greenfield project next week and I figure I might as well do it right. The goal is not to look back in two months and wish I had implemented a better workflow. The tooling can always change, but in practice it usually doesn&amp;#39;t so it&amp;#39;s best to get it right the first time.&lt;/p&gt;
&lt;p&gt;In short, here&amp;#39;s what I&amp;#39;ve decided on:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; w/ &lt;a href=&quot;https://github.com/webpack/docs/wiki/hot%E2%B8%BBmodule%E2%B8%BBreplacement%E2%B8%BBwith%E2%B8%BBwebpack&quot;&gt;Hot Module Replacement&lt;/a&gt; enabled&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; (ES6 compilation)&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://stylus%E2%B8%BBlang.com/&quot;&gt;Stylus&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Webpack&lt;/h2&gt;
&lt;p&gt;Webpack is amazing. I never thought &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; would be replaced in my workflow, but it has been. Webpack essentially does everything Browserify did and more. It let&amp;#39;s you require &lt;span class=&quot;italic&quot;&gt;anything&lt;/span&gt;, including images, Markdown files, fonts and probably anything else you would need in a website.&lt;/p&gt;
&lt;h3&gt;So what?&lt;/h3&gt;
&lt;p&gt;Webpack let&amp;#39;s you truly componentize your applications by letting you keep &lt;span class=&quot;italic&quot;&gt;everything&lt;/span&gt; organized in a single directory. For example, if you wanted to componentize your website&amp;#39;s header you could put the HTML, CSS, JS and all associated images in the same directory. No more fumbling with paths in you&amp;#39;re image &lt;code &gt;src&lt;/code&gt; attribute.&lt;/p&gt;
&lt;h3&gt;Hot Module Replacement&lt;/h3&gt;
&lt;p&gt;Requiring everything is great, but another revelation was Hot Module Replacement (HRM). The concept is pretty simple if you&amp;#39;ve ever used LiveReload—Your browser refreshes every time you change a file. Webpack gives you HMR, which takes the concept of live reload to the next level. Basically the HTML in your browser will change without reloading the browser window.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;This is a &lt;/span&gt;&lt;span class=&quot;bold italic&quot;&gt;huge&lt;/span&gt;&lt;span class=&quot;bold&quot;&gt; win.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;When you&amp;#39;re developing any sort of stateful UI you generally have to make changes, reload the browser and then click around to put the UI back in whatever state you were at before. The classic example is a dropdown menu, that would be hidden whenever you reload the browser.&lt;/p&gt;
&lt;p&gt;With HMR you don&amp;#39;t have to reload anything. You simply change your HTML/CSS and the changes will be reflected live in the browser without having to do a full page reload. &lt;span class=&quot;bold&quot;&gt;So good!&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Babel&lt;/h2&gt;
&lt;p&gt;Babel is a pre-compiler for ES6, which means you can write JavaScript using full ES6 features and functionality. Babel will compile everything down to standard ES5 JavaScript so that you can run it in any browser.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re using CoffeScript all the new ES6 features probably aren&amp;#39;t that exciting, but the new spec is a big jump for JS as a language.&lt;/p&gt;
&lt;h2&gt;Gulp&lt;/h2&gt;
&lt;p&gt;Webpack handles &lt;span class=&quot;italic&quot;&gt;almost&lt;/span&gt; every step of our build process, but sometimes you need to run arbitrary scripts or automate things at a higher level than webpack might allow. Gulp is great for this.&lt;/p&gt;
&lt;p&gt;In my workflow I use gulp to script webpack and run an API server that the UI will interact with.&lt;/p&gt;
&lt;p&gt;Gulp is also good for setting up a database process running in the background if you&amp;#39;re app is using a persistence layer.&lt;/p&gt;
&lt;h2&gt;Stylus&lt;/h2&gt;
&lt;p&gt;Stylus is great. It&amp;#39;s the most compact CSS syntax I&amp;#39;ve come across and it&amp;#39;s written entirely in Node. This is probably one of the more contentious points in my build process since everyone seems to have very strong opinions about how to write their styles. But I think anyone who gave Stylus a try would really like it. Just remove all brackets, colons and semicolons from any CSS file and you&amp;#39;re looking at beautiful Stylus syntax.&lt;/p&gt;
&lt;h2&gt;Conclusion: Increased productivity&lt;/h2&gt;
&lt;p&gt;This new workflow has really made me more productive. Writing single page apps now takes a fraction of the time it used to take. This is admittedly due in large part to &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; being an excellent library for productivity, but whatever. Still counts 🍻.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Solving problems is the biggest win]]></title><link>https://blog.iansinnott.com/solving-problems-is-the-biggest-win/</link><guid isPermaLink="false">https://blog.iansinnott.com/solving-problems-is-the-biggest-win/</guid><pubDate>Fri, 20 Feb 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As I ramp up my job search, I&amp;#39;ve recently become more introspective about why I like programming. It&amp;#39;s not uncommon during an initial phone screen to be asked some variation of the following “soft” interview question:&lt;/p&gt;
&lt;blockquote&gt;What are you passionate about?&lt;/blockquote&gt;
&lt;p&gt;or...&lt;/p&gt;
&lt;blockquote&gt;Why do you like software development?&lt;/blockquote&gt;
&lt;p&gt;As simple and possibly over-used as these questions are, they&amp;#39;re still good ones. So am I &lt;span class=&quot;italic&quot;&gt;really&lt;/span&gt; passionate about software development? Hell yes. But that&amp;#39;s not the answer to the underlying question of why—why am I passionate about it?&lt;/p&gt;
&lt;p&gt;It&amp;#39;s this line of thinking that has led me to do some introspection recently, and I&amp;#39;ve come to the conclusion that what it really boils down to is &lt;span class=&quot;bold&quot;&gt;solving problems&lt;/span&gt;.&lt;/p&gt;
&lt;h2&gt;Solving problems is the biggest win&lt;/h2&gt;
&lt;p&gt;When you solve a problem for yourself it feels great. Not only that, but you then have one less problem. The satisfaction of solving problems certainly isn&amp;#39;t exclusive to programming, but programming is one of the best tools to solve an extremely wide array of problems, which is why I love it.&lt;/p&gt;
&lt;p&gt;But as satisfying as solving one&amp;#39;s own problems can be, the biggest win in my mind is to ...&lt;/p&gt;
&lt;h2&gt;Solve other people&amp;#39;s problems&lt;/h2&gt;
&lt;p&gt;This realization really solidified in my mind a number of months ago as I was combing through &lt;a href=&quot;https://github.com/iansinnott&quot;&gt;my GitHub profile&lt;/a&gt; to clean out old repositories I no longer use. It was when I first saw &lt;a href=&quot;https://github.com/iansinnott/alfred%E2%B8%BBmaestro&quot;&gt;one of my repos&lt;/a&gt; getting starred by other people 😀.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/Screen%20Shot%202015-02-20%20at%202.42.24%20PM.png?table=block&amp;id=&quot; alt=&quot;Alfred Maestro Repo&quot;/&gt;&lt;figcaption&gt;Alfred Maestro Repo&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span class=&quot;bold italic&quot;&gt;Other people&lt;/span&gt;&lt;span class=&quot;bold&quot;&gt; were using something I created&lt;/span&gt;, and apparently they liked it. The level of satisfaction I got from that project remains very high to this day.&lt;/p&gt;
&lt;p&gt;The best part is, solving other people&amp;#39;s problems is not only valuable but it&amp;#39;s also motivating.&lt;/p&gt;
&lt;h2&gt;Maintaining motivation&lt;/h2&gt;
&lt;p&gt;Alfred Maestro (my most-starred repo) is a project I wrote over a year ago, using my least favorite language (PHP) but I&amp;#39;ve still maintained it and responded to any user issues throughout because &lt;span class=&quot;italic&quot;&gt;other people were using it&lt;/span&gt;. It&amp;#39;s that motivation that has kept that little project going. That motivation is really powerful.&lt;/p&gt;
&lt;p&gt;In this way solving someone&amp;#39;s problem can become a positive feedback loop: The more positive feedback you get about your project and the way it&amp;#39;s solving problems, the more you&amp;#39;re motivated to continue to solve that problem.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s a beautiful thing.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A New Direction]]></title><link>https://blog.iansinnott.com/a-new-direction/</link><guid isPermaLink="false">https://blog.iansinnott.com/a-new-direction/</guid><pubDate>Mon, 16 Feb 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;For the past few years I&amp;#39;ve been living in Taiwan running my own freelance business. It&amp;#39;s been an amazing, transformative experience and I&amp;#39;ve had a great time doing it. Entering 2015, I was planning to continue growing my business into the foreseeable future, but after a recent revelation I feel it&amp;#39;s time for a change.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;It&amp;#39;s time to get a &lt;/span&gt;&lt;span class=&quot;bold italic&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;bold&quot;&gt; job.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;At my last “job” I was my own boss, I worked my own hours, I traveled often and lived however I wanted. So, why then would I choose to give all that up? The answer is simple, it&amp;#39;s because...&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;I&amp;#39;m in my comfort zone.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I woke up one morning and realized: &lt;span class=&quot;bold&quot;&gt;I&amp;#39;ve acclimated.&lt;/span&gt; I&amp;#39;m no longer challenged on a daily basis. This was a hard realization to come by, but it&amp;#39;s true. The projects I had been working on might have been fun or interesting but they were ultimately well within my current skill set, which means I had stopped pushing.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;“Never stop pushing.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I once heard that quote somewhere and it really resonated with me. I never want to stop improving or stop iterating on my own talents. So I&amp;#39;ve decided to join a startup and find something I&amp;#39;m truly passionate about working on. I want to learn and grow at the same time as I provide value to a company I admire.&lt;/p&gt;
&lt;p&gt;There are a number of companies I&amp;#39;m already very passionate about and likely many others I haven&amp;#39;t heard of yet, so...&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;The search is on.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;For the next few months I&amp;#39;ll be staying in San Francisco learning, improving, meeting new people and looking for the right company. I don&amp;#39;t expect it to be easy, but it will be worthwhile.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Express Basics]]></title><link>https://blog.iansinnott.com/express-basics/</link><guid isPermaLink="false">https://blog.iansinnott.com/express-basics/</guid><pubDate>Mon, 02 Feb 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;italic&quot;&gt;A quick guide to using Express, and the basics of Express middleware&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;All source files for this article can be found in the &lt;a href=&quot;https://github.com/iansinnott/express%E2%B8%BBmiddleware%E2%B8%BBlecture&quot;&gt;GitHub Repo: iansinnott/express-middleware-lecture&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Outline&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;Intro (Simplifying Express)&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;What is middleware?&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;The relationship between Express and middleware&lt;/li&gt;&lt;/ol&gt;
&lt;ul&gt;&lt;li&gt;Explanation (it&amp;#39;s just a function)&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Build a simple logger&lt;/li&gt;&lt;/ul&gt;
&lt;ol&gt;&lt;li&gt;Important points about middleware&lt;/li&gt;&lt;/ol&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;bold&quot;&gt;MUST&lt;/span&gt; call &lt;code &gt;next()&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Order matters&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Middleware can be localized to various routes&lt;/li&gt;&lt;/ul&gt;
&lt;ol&gt;&lt;li&gt;Routes are also middleware&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Handling errors&lt;/li&gt;&lt;/ol&gt;
&lt;ul&gt;&lt;li&gt;404&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Internal server error (500)&lt;/li&gt;&lt;/ul&gt;
&lt;ol&gt;&lt;li&gt;Conclusion&lt;/li&gt;&lt;/ol&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;bold&quot;&gt;Express is just a stack of middleware&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Common and useful middleware you will undoubtedly see&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;More resources&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Simplifying Express&lt;/h2&gt;
&lt;p&gt;So first things first, rather than starting with everything and figuring out what it all does, let&amp;#39;s start with a base Express configuration and add things as we need them.&lt;/p&gt;
&lt;p&gt;A standard Express app configuration using the &lt;code &gt;express-generator&lt;/code&gt; NPM module will produce something like this:&lt;/p&gt;
&lt;pre&gt;var express = require(&amp;#39;express&amp;#39;);
var path = require(&amp;#39;path&amp;#39;);
var favicon = require(&amp;#39;serve-favicon&amp;#39;);
var logger = require(&amp;#39;morgan&amp;#39;);
var cookieParser = require(&amp;#39;cookie-parser&amp;#39;);
var bodyParser = require(&amp;#39;body-parser&amp;#39;);

var routes = require(&amp;#39;./routes/index&amp;#39;);
var users = require(&amp;#39;./routes/users&amp;#39;);

var app = express();

// view engine setup
app.set(&amp;#39;views&amp;#39;, path.join(__dirname, &amp;#39;views&amp;#39;));
app.set(&amp;#39;view engine&amp;#39;, &amp;#39;jade&amp;#39;);

// uncomment after placing your favicon in /public
//app.use(favicon(__dirname + &amp;#39;/public/favicon.ico&amp;#39;));
app.use(logger(&amp;#39;dev&amp;#39;));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, &amp;#39;public&amp;#39;)));

app.use(&amp;#39;/&amp;#39;, routes);
app.use(&amp;#39;/users&amp;#39;, users);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
var err = new Error(&amp;#39;Not Found&amp;#39;);
err.status = 404;
next(err);
});

// error handlers
if (app.get(&amp;#39;env&amp;#39;) === &amp;#39;development&amp;#39;) {
app.use(function(err, req, res, next) {
res.status(err.status || 500);
res.render(&amp;#39;error&amp;#39;, {
message: err.message,
error: err
});
});
}

app.use(function(err, req, res, next) {
res.status(err.status || 500);
res.render(&amp;#39;error&amp;#39;, {
message: err.message,
error: {}
});
});

module.exports = app;&lt;/pre&gt;
&lt;p&gt;There&amp;#39;s a lot going on there, and for anyone without experience using Express that may look daunting if all we really want is a super simple application.&lt;/p&gt;
&lt;h3&gt;Simplify all of the things!&lt;/h3&gt;
&lt;p&gt;The above configuration file also makes assumptions about what you will need in your project. This can be useful but it is quite detrimental to learning the ins and outs of Express, because it does too much automatically. Let&amp;#39;s start from a bare-bones Express app and expand as needed. Here&amp;#39;s our configuration file:&lt;/p&gt;
&lt;pre&gt;var express = require(&amp;#39;express&amp;#39;);

var app = express();

app.get(&amp;#39;/&amp;#39;, function(req, res) {
res.send(&amp;quot;hello express&amp;quot;);
});

app.listen(3000);&lt;/pre&gt;
&lt;p&gt;This file will responds to GET requests at &lt;code &gt;/&lt;/code&gt;—the root URL. Any other requests will cause an Express error, because there is no request handler for any other route or method.&lt;/p&gt;
&lt;p&gt;If you open your browser and go to &lt;a href=&quot;http://localhost:3000&quot;&gt;localhost:3000&lt;/a&gt; you should see the text &amp;quot;hello express&amp;quot;, or you could use CURL:&lt;/p&gt;
&lt;pre&gt;$ curl :3000
hello express&lt;/pre&gt;
&lt;p&gt;Now that we have a super simple Express app up and running, let&amp;#39;s move on to middleware.&lt;/p&gt;
&lt;h2&gt;Middleware&lt;/h2&gt;
&lt;p&gt;Middleware, in the context of Express is just a fancy term for a function that gets run on your server &lt;span class=&quot;italic&quot;&gt;after&lt;/span&gt; a request has been received from a client and &lt;span class=&quot;italic&quot;&gt;before&lt;/span&gt; a response is sent back. In other words, it&amp;#39;s a function that gets run &lt;span class=&quot;bold&quot;&gt;in the middle&lt;/span&gt; of the requeset-response cycle.&lt;/p&gt;
&lt;p&gt;So what does that look like in practice? Let&amp;#39;s take a look:&lt;/p&gt;
&lt;pre&gt;// Define your middleware
function uselessMiddleware(req, res, next) {
// Do some stuff...
next();
}

// &amp;quot;Use&amp;quot; your middlware
app.use(uselessMiddleware);&lt;/pre&gt;
&lt;p&gt;The above function (middleware) is in fact useless as implied by its name because it doesn&amp;#39;t do anything at all. It simply calls the next middleware in the middleware stack (more on that below).&lt;/p&gt;
&lt;p&gt;When writing simple middleware, we often use an anonymous function, so let&amp;#39;s refactor the above as so:&lt;/p&gt;
&lt;pre&gt;app.use(function(req, res, next) {
// Do some stuff...
next();
});&lt;/pre&gt;
&lt;p&gt;Now let&amp;#39;s make our middleware do something.&lt;/p&gt;
&lt;pre&gt;app.use(function(req, res, next) {
console.log(&amp;#39;hey nice middleware&amp;#39;);
next();
});&lt;/pre&gt;
&lt;p&gt;This middleware is simply going to log a string to the console. To make sure it&amp;#39;s working, and to see how middleware works, let&amp;#39;s send a request to our server. Use either your browser or CURL from the command line:&lt;/p&gt;
&lt;pre&gt;$ curl :3000
hello express&lt;/pre&gt;
&lt;p&gt;Regardless of how you made the requeset, if you now look in your terminal you should see that our middleware was indeed run because &amp;quot;hey nice middleware&amp;quot; will have been printed to the command line.&lt;/p&gt;
&lt;h2&gt;Express and Middleware&lt;/h2&gt;
&lt;p&gt;The one thing I want you to take away from this lecture is that &lt;span class=&quot;bold&quot;&gt;an Express app is simply a stack of middleware&lt;/span&gt;. In other words, as the Express website says:&lt;/p&gt;
&lt;blockquote&gt;An Express application is essentially a series of middleware calls.&lt;/blockquote&gt;
&lt;p&gt;To see how true this is, let&amp;#39;s look at a standard Express route:&lt;/p&gt;
&lt;pre&gt;app.get(&amp;#39;/hello&amp;#39;, function(req, res) {
res.send(&amp;#39;Hello route&amp;#39;);
});&lt;/pre&gt;
&lt;p&gt;This is a super simple Express route that will respond to a GET request at &lt;code &gt;/hello&lt;/code&gt; with the text string &amp;quot;hello route&amp;quot;.&lt;/p&gt;
&lt;p&gt;But what if we want some bit of code to be run on &lt;span class=&quot;italic&quot;&gt;all&lt;/span&gt; requests instead of just GET requests to &lt;code &gt;/hello&lt;/code&gt;? For instance, what if we wanted to implement our own logger that would log the method and path of every request to the command line? That&amp;#39;s where middleware comes in.&lt;/p&gt;
&lt;p&gt;When we call &lt;code &gt;app.use&lt;/code&gt; we are saying, &amp;quot;Every time a new request comes in run this function.&amp;quot;&lt;/p&gt;
&lt;h3&gt;Building a simple logger&lt;/h3&gt;
&lt;p&gt;To see this in action let&amp;#39;s built a simple logger that will output strings of the form:&lt;/p&gt;
&lt;pre&gt;[METHOD] [ROUTE] [DATE]&lt;/pre&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;GET / Sun Jan 25 2015 22:27:07 GMT-0800 (PST)
GET /some-route Sun Jan 25 2015 22:27:07 GMT-0800 (PST)
POST /contact Sun Jan 25 2015 22:27:07 GMT-0800 (PST)&lt;/pre&gt;
&lt;p&gt;Using express middleware, we can accomplish this pretty easily:&lt;/p&gt;
&lt;pre&gt;app.use(function(req, res, next) {
var date = new Date();
console.log(req.method + &amp;#39; &amp;#39; + req.url + &amp;#39; &amp;#39; + date);
next();
});&lt;/pre&gt;
&lt;p&gt;Now in just five lines of code we&amp;#39;ve created a rudimentary logging system.&lt;/p&gt;
&lt;h2&gt;Important points about middleware&lt;/h2&gt;
&lt;p&gt;Middleware is super flexible and easy to use, but there are still a few important points that need to be noted.&lt;/p&gt;
&lt;h3&gt;Always call &lt;code &gt;next&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;As you&amp;#39;ve seen in all the middleware examples so far, I make sure to call &lt;code &gt;next&lt;/code&gt; at the end of the function. What would happen if we didn&amp;#39;t call next? Try it out. Remove next from our logging middleware above and run the app. Here&amp;#39;s the full source code for &lt;code &gt;app.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;var express = require(&amp;#39;express&amp;#39;);

var app = express();

app.use(function(req, res, next) {
var date = new Date();
console.log(req.method + &amp;#39; &amp;#39; + req.url + &amp;#39; &amp;#39; + date);
// WE DIDN&amp;#39;T CALL &lt;code &gt;next&lt;/code&gt; HERE!!
});

app.get(&amp;#39;/&amp;#39;, function(req, res) {
res.send(&amp;quot;hello express&amp;quot;);
});

app.listen(3000);&lt;/pre&gt;
&lt;p&gt;Run the app, then make a request:&lt;/p&gt;
&lt;pre&gt;node app.js&lt;/pre&gt;
&lt;pre&gt;curl :3000&lt;/pre&gt;
&lt;p&gt;Now your terminal will just sort of hang and do nothing. You will also see that the logging function was still run, because there will be a log entry in the terminal. This is because your app (&lt;code &gt;app.js&lt;/code&gt;) received a request, called the logging middleware, logged the output and then... did nothing. The app is waiting for us to either send a response back to the client or call &lt;code &gt;next&lt;/code&gt;. Since we didn&amp;#39;t do either, it just hangs until we hit ctrl-c to stop our server.&lt;/p&gt;
&lt;p&gt;So the point is, always call &lt;code &gt;next&lt;/code&gt;, otherwise you&amp;#39;re server will not only not respond but also not give you an error. It will simply do nothing, and leave the browser waiting for a response.&lt;/p&gt;
&lt;h3&gt;Order Matters&lt;/h3&gt;
&lt;p&gt;As the &lt;a href=&quot;http://expressjs.com/guide/using%E2%B8%BBmiddleware.html&quot;&gt;documentation says&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;Middleware functions are executed sequentially, therefore the order of middleware inclusion is important.&lt;/blockquote&gt;
&lt;p&gt;This is nothing overly complex, but it&amp;#39;s important to be aware of. Here&amp;#39;s a quick example, again using our logging middleware from above:&lt;/p&gt;
&lt;pre&gt;var express = require(&amp;#39;express&amp;#39;);

var app = express();

// Route
app.get(&amp;#39;/&amp;#39;, function(req, res) {
res.send(&amp;quot;hello express&amp;quot;);
});

// Logging middleware added after route
app.use(function(req, res, next) {
var date = new Date();
console.log(req.method + &amp;#39; &amp;#39; + req.url + &amp;#39; &amp;#39; + date);
next();
});

app.listen(3000);&lt;/pre&gt;
&lt;p&gt;As before, run the app and send a request to the root URL at &lt;a href=&quot;http://localhost:3000&quot;&gt;localhost:3000&lt;/a&gt;. The request that comes back from the server will have the text &amp;quot;hello express&amp;quot; as expected, but if you look at the console you will notice that our middleware did not run. This is because we added it &lt;span class=&quot;italic&quot;&gt;after&lt;/span&gt; our route.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;What happened?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Even though we added the logging middleware &lt;span class=&quot;italic&quot;&gt;after&lt;/span&gt; the route, you might think it should still get run after our route is hit, but that&amp;#39;s not the case. Calling &lt;code &gt;res.send&lt;/code&gt; actually ends the request-response cycle, because it sends a response to the client. After the req-res cycle has ended, no more middleware will be called, so our logging middleware never gets executed.&lt;/p&gt;
&lt;h3&gt;Middleware can be localized to routes&lt;/h3&gt;
&lt;p&gt;Global middleware is really useful, but sometimes it would be unecessary to run certain middleware for &lt;span class=&quot;italic&quot;&gt;all&lt;/span&gt; routes and methods. That&amp;#39;s why Express let&amp;#39;s you pass an optional string as the initial argument to &lt;code &gt;app.use&lt;/code&gt;. Imagine we have an admin area on our website at &lt;code &gt;/admin&lt;/code&gt;. We want to check to make sure a user is logged in before they access the page. A simple way to accomplish this would be:&lt;/p&gt;
&lt;pre&gt;app.use(&amp;#39;/admin&amp;#39;, function(req, res, next) {
if (!req.user)
res.redirect(&amp;#39;/login&amp;#39;);
else
next();
});&lt;/pre&gt;
&lt;p&gt;This example assumes that &lt;code &gt;req.user&lt;/code&gt; will be set if the user is already logged in, as is the case when using &lt;a href=&quot;http://passportjs.org/&quot;&gt;Passport JS&lt;/a&gt;. If there is no user present on the request then the browser will be redirected to login. If there is a user however then the middleware simply calls next and allows the process to continue as normal.&lt;/p&gt;
&lt;h2&gt;Routes are just more middleware&lt;/h2&gt;
&lt;p&gt;Usually when we talk about Express we talk about routes and middleware as separate, because conceptually they are. A &amp;quot;route&amp;quot; typically means the end of the middleware stack, the last response handler that is called and that decides ultimately how to respond to the request. However, to understand Express it&amp;#39;s important to understand that routes themselves are also &amp;quot;middleware&amp;quot;—simply functions that get called under certain circumstances.&lt;/p&gt;
&lt;p&gt;As an example, take a look at these two completely equivalent &amp;quot;routes&amp;quot;. One is written as you would normally write a route, using &lt;code &gt;app.get&lt;/code&gt; while the other is written as middleware, but the effect is exactly the same:&lt;/p&gt;
&lt;pre&gt;app.get(&amp;#39;/&amp;#39;, function(req, res) {
res.send(&amp;#39;hello express&amp;#39;);
});&lt;/pre&gt;
&lt;pre&gt;app.use(&amp;#39;/&amp;#39;, function(req, res, next) {
if (req.method === &amp;#39;GET&amp;#39;)
res.send(&amp;#39;hello express&amp;#39;);
else
next();
});&lt;/pre&gt;
&lt;p&gt;Using middlware syntax and manually checking the request method is of course more verbose, and certainly not what you want to do in practice. But it&amp;#39;s important to realize that Express routes and Express middleware ware actually on in the same. This is why, as mentioned in the docs and above...&lt;/p&gt;
&lt;blockquote&gt;An Express application is essentially a series of middleware calls.&lt;/blockquote&gt;
&lt;h2&gt;Error Handling&lt;/h2&gt;
&lt;p&gt;Until you are comfortable with Express as a &amp;quot;stack&amp;quot; of middleware that get called in the order they were added, it may not be obvious how errors are normally handled. There is no &lt;code &gt;app.error&lt;/code&gt; method. The way errors are handled is again, through middleware:&lt;/p&gt;
&lt;pre&gt;// The rest of the app...

app.use(function(req, res, next) {
res.status(404).send(&amp;quot;Oh no, there was an error...&amp;quot;);
});&lt;/pre&gt;
&lt;p&gt;This middleware matches any route and any method, and all it does is send an error message to the browser. If you added this at the top of all your middleware your site would continually send this error message to the client. However, by putting this at the very end of our app configuration we can allow all routes that weren&amp;#39;t matched by previous middleware to effectively fall through and be caught here.&lt;/p&gt;
&lt;p&gt;However, since not every error is a 404, it&amp;#39;s important to allow for other errors with other status codes. To accomplish this, Express recognizes middleware with four arguments instead of three as being an error handler.&lt;/p&gt;
&lt;pre&gt;app.use(function(err, req, res, next) {
res.status(err.status || 500);
res.send(&amp;quot;Oh no, there was an error...&amp;quot;);
});&lt;/pre&gt;
&lt;p&gt;In the eyes of Express, this middleware is clearly an error handler because it expects four arguments, the first of which is an error object. &lt;span class=&quot;bold&quot;&gt;Note:&lt;/span&gt; If you don&amp;#39;t manually set a status code 200 will still be the default, which would of course be incorrect for responding with an error. If there is no status set on the &lt;code &gt;err&lt;/code&gt; object then we default to the generic 500 status code.&lt;/p&gt;
&lt;p&gt;So, now we have an error handler but if you restart your server and navigate to a URL that we know there&amp;#39;s no router for (ex: &amp;quot;/something&amp;quot;) you will get a standard Express error, &lt;span class=&quot;italic&quot;&gt;NOT&lt;/span&gt; the custom error we just created. What happened?&lt;/p&gt;
&lt;p&gt;Since we aren&amp;#39;t using any third party middleware yet, we know every piece of code that&amp;#39;s being executed when a request hits the server. As a result, we can see that at no point is an error generated. This is crucial, because errors in Express are not automatic. JavaScript errors will happily bring down your server, but if you want to handle them with easy you will need to manually call the &lt;code &gt;next&lt;/code&gt; function and pass an error argument. That will let Express execute our custom error handling code as scene above. So, to make sure all 404&amp;#39;s do indeed generate an error, we can add a catch-all middleware right above our error handler:&lt;/p&gt;
&lt;pre&gt;app.use(function(req, res, next) {
var err = new Error(&amp;quot;Page not found!&amp;quot;);
err.status = 404;
next(err); // Call &lt;code &gt;next&lt;/code&gt; with an argument
});

app.use(function(err, req, res, next) {
res.status(err.status || 500);
res.send(&amp;quot;Oh no, there was an error...&amp;quot;);
});&lt;/pre&gt;
&lt;p&gt;Now if we restart our server we will get the result we want: All errors, 404 or otherwise, will be directed to our final error handler and we will get a response containing the string &amp;quot;Oh no, there was an error...&amp;quot;.&lt;/p&gt;
&lt;h3&gt;A quick note on triggering errors&lt;/h3&gt;
&lt;p&gt;In the example above we called &lt;code &gt;next&lt;/code&gt; with a single &lt;code &gt;Error&lt;/code&gt; object as the lone argument. To generate an Express error and jump directly to error handling middleware you need only call &lt;code &gt;next&lt;/code&gt; with a truthy argument. For example:&lt;/p&gt;
&lt;pre&gt;app.use(function(req, res, next) {

// All of these would trigger error handling middleware
next(&amp;#39;hey there&amp;#39;);
next(40);
next(true);

});&lt;/pre&gt;
&lt;p&gt;The only exception to the above is calling &lt;code &gt;next(&amp;#39;route&amp;#39;)&lt;/code&gt;. Calling &lt;code &gt;next&lt;/code&gt; with the special string &lt;code &gt;&amp;#39;route&amp;#39;&lt;/code&gt; will not cause an error. See &lt;a href=&quot;http://expressjs.com/4x/api.html#app.METHOD&quot;&gt;the docs here for more on this&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So, once again to reiterate:&lt;/p&gt;
&lt;blockquote&gt;An Express application is essentially a series of middleware calls.&lt;/blockquote&gt;
&lt;p&gt;If you remember one thing from this lecture remember that, because it will give you a clear understanding of how Express works and more importantly how to extend it to suite your needs.&lt;/p&gt;
&lt;p&gt;That being said, there is currently a plethora of useful middleware in the wild that you will most likely encounter at one point or another if you stick with Express.&lt;/p&gt;
&lt;h3&gt;Useful &amp;amp; Common Middleware&lt;/h3&gt;
&lt;p&gt;&lt;a class=&quot;bold&quot; href=&quot;https://github.com/expressjs/body%E2%B8%BBparser&quot;&gt;Body Parser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is one you&amp;#39;re almost certain to see in most Express apps, as it&amp;#39;s useful for handling forms as well as AJAX requests.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;bold&quot; href=&quot;https://github.com/expressjs/body%E2%B8%BBparser&quot;&gt;Serve Static&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This one makes it easy to statically serve a directory. For example, if you have a &lt;code &gt;/public&lt;/code&gt; and you would like to put all your static files there (images, css, scripts) then you would want to use the static middleware to field requests for all resources under public. This is so common that the serve-static middleware is actually bundled with Express:&lt;/p&gt;
&lt;pre&gt;app.use(express.static(__dirname + &amp;#39;/public&amp;#39;)));&lt;/pre&gt;
&lt;p&gt;&lt;a class=&quot;bold&quot; href=&quot;https://github.com/expressjs/morgan&quot;&gt;Morgan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is flexible logging software that can be used in development or production. Even though as we saw it&amp;#39;s quite simple to write your own logging software, it&amp;#39;s a better idea to use something standard like Morgan because you can be sure your logs will be well formatted, and it&amp;#39;s also one lest thing for you to test.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s a ton of middleware out there, so whenever you run into a feature that Express doesn&amp;#39;t have but you would like chances are there&amp;#39;s a middleware module for it.&lt;/p&gt;
&lt;h3&gt;Resource Links&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://expressjs.com/guide/using%E2%B8%BBmiddleware.html&quot;&gt;Official Express Middleware Guide&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://expressjs.com/api.html#app.use&quot;&gt;Official app.use API documentation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Outro&lt;/h2&gt;
&lt;p&gt;As I mentioned in the intro, this guide and all JS source files can be found in the repo on GitHub: &lt;a href=&quot;https://github.com/iansinnott/express%E2%B8%BBmiddleware%E2%B8%BBlecture&quot;&gt;iansinnott/express-middleware-lecture&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This write-up was the content of an interview and guest lecture I had at &lt;a href=&quot;http://www.makersquare.com/&quot;&gt;Makersquare&lt;/a&gt;, a JavaScript bootcamp in San Francisco. The Markdown file for the presentation I gave &lt;a href=&quot;https://github.com/iansinnott/express%E2%B8%BBmiddleware%E2%B8%BBlecture/blob/master/presentation.md&quot;&gt;can be found here&lt;/a&gt;. The presentation was created for use with &lt;a href=&quot;http://decksetapp.com/&quot;&gt;Deckset&lt;/a&gt;, a Mac application for creating slideshows with Markdown.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Use RedCarpet to Render Markdown]]></title><link>https://blog.iansinnott.com/use-redcarpet-to-render-markdown/</link><guid isPermaLink="false">https://blog.iansinnott.com/use-redcarpet-to-render-markdown/</guid><pubDate>Mon, 26 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Most of the markdown I write ends up on GitHub, so when I preview my markdown I on my computer I like it to look &lt;span class=&quot;italic&quot;&gt;exactly&lt;/span&gt; like it will once I push it live to some repository. I also like to use the excellent &lt;a href=&quot;http://marked2app.com/&quot;&gt;Marked&lt;/a&gt; app to preview my markdown. Unfortunately, even though Marked claims to support &lt;a href=&quot;https://help.github.com/articles/github%E2%B8%BBflavored%E2%B8%BBmarkdown/&quot;&gt;Github Flavored Markdown&lt;/a&gt; (GFM) it leaves some features out. I&amp;#39;m not going to blame Marked for the incomplete implementation of GFM, they outsource the processing to &lt;a href=&quot;https://github.com/Orc/discount&quot;&gt;Discount&lt;/a&gt;, so it&amp;#39;s probably not their fault. But certain features of GFM, like nested lists, are really useful so I decided to switch to &lt;a href=&quot;https://github.com/vmg/redcarpet&quot;&gt;RedCarpet&lt;/a&gt;, since that is the Gem GitHub itself uses to parse READMEs.&lt;/p&gt;
&lt;p&gt;So, for anyone else who runs into the issue of Marked&amp;#39;s incomplete GFM support, simply install &lt;code &gt;redcarpet&lt;/code&gt; and use it as a custom processor:&lt;/p&gt;
&lt;pre&gt;sudo gem install redcarpet&lt;/pre&gt;
&lt;p&gt;In the &amp;quot;Advanced&amp;quot; section of Marked&amp;#39;s preferences you can find the custom processor section:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/Screen_Shot_2015-01-26_at_2_26_54_PM.jpg?table=block&amp;id=&quot; alt=&quot;Custom Marked Processor&quot;/&gt;&lt;figcaption&gt;Custom Marked Processor&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Note:&lt;/span&gt; You &lt;span class=&quot;italic&quot;&gt;might&lt;/span&gt; have to click the &amp;quot;Update Permissions&amp;quot; button since Marked may not have read access to wherever you&amp;#39;re &lt;code &gt;redcarpet&lt;/code&gt; executable is located.&lt;/p&gt;
&lt;p&gt;Once you&amp;#39;ve added the custom processor you should get a little nondescript button near the lower right-hand side of your Marked windows:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/Screen_Shot_2015-01-26_at_2_27_38_PM.jpg?table=block&amp;id=&quot; alt=&quot;Custom processor button in Marked&quot;/&gt;&lt;figcaption&gt;Custom processor button in Marked&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;If you click that button you should now get markdown rendered through your custom processor! Nice 😎&lt;/p&gt;
&lt;p&gt;Hope that helps anyone who ran into the same problem I did.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Back to the JavaScript Basics]]></title><link>https://blog.iansinnott.com/back-to-the-javascript-basics/</link><guid isPermaLink="false">https://blog.iansinnott.com/back-to-the-javascript-basics/</guid><pubDate>Fri, 09 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Today I was interviewed for a developer position at a San Francisco startup and I was caught off guard when I was asked to create a simple implementation of &amp;quot;inheritance&amp;quot; in JS. Inheritance is in quotes because, well, this is JS we&amp;#39;re talking about. There is no real inheritance in the classical sense, but we can certainly make it work. The interview question went something like this:&lt;/p&gt;
&lt;blockquote&gt;Create a class Animal with a &lt;code &gt;walk&lt;/code&gt; method. Then create a class Dog that inherits from Animal.&lt;/blockquote&gt;
&lt;p&gt;Simple enough, right? Here&amp;#39;s what I wrote:&lt;/p&gt;
&lt;pre&gt;var _ = require(&amp;#39;lodash&amp;#39;);

function Animal() {}

Animal.prototype.walk = function() {
console.log(&amp;quot;Hey there I&amp;#39;m an Animal walking&amp;quot;);
};

function Dog() {
Animal.call(this);
}

_.extend(Dog.prototype, Animal.prototype);&lt;/pre&gt;
&lt;p&gt;This is certainly how I would have solved the inheritance problem in any of my projects, but as it turns out this isn&amp;#39;t the best solution in the context of someone evaluating your JS prowess. Firstly, my solution explicitly depends on &lt;a href=&quot;https://lodash.com/&quot;&gt;Lo-Dash&lt;/a&gt; (Underscore.js would also work just as well). These days it&amp;#39;s hardly outlandish to assume that a given project would depend on either Lo-Dash or Underscore, so I don&amp;#39;t see anything wrong with this but it still wasn&amp;#39;t optimal in the given setting.&lt;/p&gt;
&lt;p&gt;Then there&amp;#39;s the larger assumption my solution makes, which is that you&amp;#39;re compiling your source through Browserify. Since I now use Browserify religiously on every project it didn&amp;#39;t even occur to me to &lt;span class=&quot;italic&quot;&gt;mention&lt;/span&gt; this implicit dependency. If the interviewer wasn&amp;#39;t familiar with Browserify himself he might have thought I was just crazy—requiring modules in a browser 😕. Anyway, the answer they were going for was to use &lt;code &gt;Object.create&lt;/code&gt; for defining the prototype of the subclass:&lt;/p&gt;
&lt;pre&gt;function Animal() {}

Animal.prototype.walk = function() {
console.log(&amp;quot;Hey there I&amp;#39;m an Animal walking&amp;quot;);
};

function Dog() {
Animal.call(this);
}

Dog.prototype = Object.create(Animal.prototype);
Dog.prototype.constructor = Dog;&lt;/pre&gt;
&lt;p&gt;Both solutions accomplish the same thing, but the latter can simply be pasted into a browser console while the former would have to be run through Browserify and have Lo-Dash installed through NPM.&lt;/p&gt;
&lt;h2&gt;Back to the basics&lt;/h2&gt;
&lt;p&gt;What this brief experience made me realize is that there are still some basic JS methods that I&amp;#39;m not familiar with. Of course now it&amp;#39;s unlikely that I will forget &lt;code &gt;Object.create&lt;/code&gt;. This was a very healthy realization, because despite the fact that I am unlikely ever to use &lt;code &gt;Object.create&lt;/code&gt; in any project of my own it&amp;#39;s still good to know the ins and outs of the language you write your software in.&lt;/p&gt;
&lt;p&gt;So, now that I&amp;#39;m quite familiar with &lt;code &gt;Object.create&lt;/code&gt; I&amp;#39;m still going right back to my complex build process complete with browserify, stylus, jade and numerous Gulp tasks 😏. For anyone interested, my whole build process is implemented in a &lt;a href=&quot;https://github.com/iansinnott/slush%E2%B8%BBexpress%E2%B8%BBisinn&quot;&gt;Slush generator I use for new Node projects&lt;/a&gt;. The readme could use some work, but it should give you a gist of how I do my development.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[New Site Is Live]]></title><link>https://blog.iansinnott.com/new-site-is-live/</link><guid isPermaLink="false">https://blog.iansinnott.com/new-site-is-live/</guid><pubDate>Thu, 08 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Yup, the new site is up and running! It&amp;#39;s been a bit of a long time coming, but my new website is finally live online. If you&amp;#39;re interested you can check it out at my home page here: &lt;a href=&quot;http://iansinnott.com&quot;&gt;iansinnott.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;So what?&lt;/h2&gt;
&lt;p&gt;The big reason I&amp;#39;m super excited about this iteration of my home site is that it was designed entirely from scratch. The previous iterations of my site were all influenced heavily by designer friends of mine, but this latest work is my own. So you&amp;#39;ll have to excuse me if I&amp;#39;m a little more excited than usual about launching a new site.&lt;/p&gt;
&lt;h2&gt;Not quite done&lt;/h2&gt;
&lt;p&gt;All that being said, there is still work to be done. The new site isn&amp;#39;t entirely consistent with this blog. It&amp;#39;s not a very big deal, but I really like consistency so updating this site to match the new visual style is now on my to-do list. The new site is also thoroughly untested, so if you stumble upon a part of it that seems broken please don&amp;#39;t hesitate to &lt;a href=&quot;http://iansinnott.com/contact&quot;&gt;get in touch&lt;/a&gt; and let me know.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[New Site in the Works]]></title><link>https://blog.iansinnott.com/new-site-in-the-works/</link><guid isPermaLink="false">https://blog.iansinnott.com/new-site-in-the-works/</guid><pubDate>Sat, 13 Dec 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;One of my personal projects recently has been completely redesigning my website. Well, I&amp;#39;m excited to say it&amp;#39;s coming along quite nicely. Here is a preview of the new look:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/website-mockup-banner-min.jpg?table=block&amp;id=&quot; alt=&quot;New website mockup&quot;/&gt;&lt;figcaption&gt;New website mockup&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;If you have any feedback I&amp;#39;d love to hear it. Feel free to comment bellow.&lt;/p&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;My motivation for redesigning the site pretty simple: The site hasn&amp;#39;t changed in over &lt;span class=&quot;italic&quot;&gt;two years&lt;/span&gt;. Under &amp;quot;Work&amp;quot;, the old site lists a number of personal projects that don’t even exist anymore. The &amp;quot;Skills&amp;quot; section is likewise outdated, listing PHP, MySQL and Photoshop. These days those have all been replaced by Node.js/Ruby, MongoDB and Sketch respectively.&lt;/p&gt;
&lt;p&gt;If I&amp;#39;m being honest with myself I don&amp;#39;t think the old site is &lt;span class=&quot;italic&quot;&gt;that&lt;/span&gt; bad, but it&amp;#39;s time for a change. I&amp;#39;ll be launching sometime before Christmas. 😎&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A Site a Day]]></title><link>https://blog.iansinnott.com/a-site-a-day/</link><guid isPermaLink="false">https://blog.iansinnott.com/a-site-a-day/</guid><pubDate>Mon, 08 Dec 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Yesterday I wrote about &lt;a href=&quot;/teaching%E2%B8%BBmy%E2%B8%BBbrother%E2%B8%BBto%E2%B8%BBcode&quot;&gt;teaching my brother to code&lt;/a&gt;. Today I thought I&amp;#39;d elucidate the strategy I&amp;#39;m using to teach him.&lt;/p&gt;
&lt;h2&gt;A site a day&lt;/h2&gt;
&lt;p&gt;The idea is simple: every day my brother will code up a new site and do a quick writeup about the experience. This structure is meant to really make him get his hands dirty and make some sites—to cause him all sorts of frustration with CSS positioning, JavaScript scope and all the other pitfalls of front-end development. Essentially to help my brother speed through the most daunting, &amp;quot;weed-out&amp;quot; phases of learning to code.&lt;/p&gt;
&lt;p&gt;This structure was also partially inspired by &lt;a href=&quot;http://jenniferdewalt.com/index.html&quot;&gt;Jennifer Dewalt&lt;/a&gt; and her amazing 6-month journey to becoming a developer, where she created a new site every day for 180 days. Our goal is more incremental, and will initially only span the month of December.&lt;/p&gt;
&lt;h2&gt;Mutually Beneficial&lt;/h2&gt;
&lt;p&gt;It should probably go without saying that this course structure is not only beneficial to my brother but also to me as well. It is my opinion that you never truly know a subject until you can teach it to others. Teaching him code is going to help solidify in my mind what I really know and what I myself could still use work on.&lt;/p&gt;
&lt;h3&gt;But wait, there&amp;#39;s more!&lt;/h3&gt;
&lt;p&gt;Even better, since I want my brother practicing code and not worrying about anything else, I&amp;#39;m going to be designing a new site every day for him to code. This is really exciting since it&amp;#39;s the perfect combination of pressure and motivation that I need get off my ass and hone my design skills.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m a big proponent of having a multifaceted skillset. In the context of being a developer, this usually means also becoming skilled (or at least proficient) in design and marketing as well as programming. So this is clearly a win-win for both of us.&lt;/p&gt;
&lt;h2&gt;A work in progress&lt;/h2&gt;
&lt;p&gt;This whole course structure is of course subject to change. Over the course of the month I&amp;#39;ll undoubtedly have to tweak and revise my methods as the strengths and weaknesses of this approach come to light. That being said, I&amp;#39;m really looking forward to the process and I&amp;#39;m excited to see the results of our work.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll be posting updates over the next few days as we dive into it.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Teaching My Brother To Code]]></title><link>https://blog.iansinnott.com/teaching-my-brother-to-code/</link><guid isPermaLink="false">https://blog.iansinnott.com/teaching-my-brother-to-code/</guid><pubDate>Sun, 07 Dec 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I just returned to the US after a few months in Asia, and my goal for the month of December is to teach my brother how to code. One month, that&amp;#39;s how much time I have to get him up to speed. Sound crazy? It might be, but that depends on the concrete goal. &amp;quot;Learn to code&amp;quot; is far too abstract.&lt;/p&gt;
&lt;h2&gt;The Goal&lt;/h2&gt;
&lt;p&gt;In one month&amp;#39;s time I intend to get my brother up to speed with front-end development. But &amp;quot;up to speed&amp;quot; does not mean he will be writing the next front-end framework in just one month. My goal is more along the lines of quickly smashing through the usual barriers people face when they want to learn code. These usually include things like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;All sorts of mental barriers (&amp;quot;It&amp;#39;s too hard.&amp;quot;, &amp;quot;I&amp;#39;m starting too late?&amp;quot;, &amp;quot;Where do I start?&amp;quot;)&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Frustration&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Time constraints. (If you have a full-time job it might be hard to find the time to code.)&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;When I learned to code those first two points were the biggest barriers to progress. Not knowing where to start is a big hurdle to overcome if you are brand new to coding and don&amp;#39;t know anyone in the field. Luckily I do this for a living so I can help my bro get passed that pretty quickly.&lt;/p&gt;
&lt;p&gt;Over the next month, I see frustration as the largest obstacle to progress, especially since we&amp;#39;re focusing on the front-end.&lt;/p&gt;
&lt;p&gt;Moreover, I hope to give him enough knowledge that he can continue comfortably on his own. &lt;span class=&quot;italic&quot;&gt;That&lt;/span&gt; is the ultimate goal.&lt;/p&gt;
&lt;h2&gt;Curriculum&lt;/h2&gt;
&lt;p&gt;Since we&amp;#39;re focusing on the front-end, I&amp;#39;ll be teaching the classic front-end technologies:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;HTML&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;CSS&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;JavaScript&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Each have their own challenges.&lt;/p&gt;
&lt;h3&gt;HTML&lt;/h3&gt;
&lt;p&gt;HTML is busywork. It&amp;#39;s not particularly difficult to understand or implement, the number of tags and attributes are all quite limited and there&amp;#39;s no logic to consider. That being said, it&amp;#39;s just not interesting. In fact, writing HTML is intensely boring, especially once you know what you&amp;#39;re doing. (That&amp;#39;s why I moved to Jade 😄.)&lt;/p&gt;
&lt;h3&gt;CSS&lt;/h3&gt;
&lt;p&gt;CSS is a terrible language. It was designed for a very different web than we design for today. Styling text is usually simple enough, but when you want to get into any sort of layout styling things can get very frustrating very fast. Want to put something on the right? Just use &lt;code &gt;float: right;&lt;/code&gt; and everything will be fine... until your containing div collapses and you have to figure out what &amp;quot;clearfix&amp;quot; means and how to implement it. Or you could just use &lt;code &gt;overflow: hidden;&lt;/code&gt;, but that is unintuitive &lt;span class=&quot;italic&quot;&gt;at best&lt;/span&gt; and at worst can cause issues with absolutely positioned elements and shadows.&lt;/p&gt;
&lt;p&gt;There are a million other ways CSS can frustrate people, since so many of its properties simply don&amp;#39;t work the way you expect, or you need to ensure certain display properties to make them work as advertised.&lt;/p&gt;
&lt;p&gt;The other issue with CSS in my mind is that like HTML, it&amp;#39;s boring. There&amp;#39;s more opportunity in CSS to write good code, but it still lacks logic and lacks features that seem wildly obvious (Variables anyone?).&lt;/p&gt;
&lt;p&gt;For a &lt;span class=&quot;bold&quot;&gt;partial solution&lt;/span&gt;, learn CSS well then never touch it again and only use &lt;a href=&quot;http://learnboost.github.io/stylus/&quot;&gt;Stylus&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;JavaScript&lt;/h3&gt;
&lt;p&gt;Finally, the actual programming language of the front-end. I haven&amp;#39;t yet started teaching this to my brother, but I&amp;#39;m looking forward to it. Real programming is a thrill once you gain even a tiny amount of knowledge. Being able to create things from scratch that are actually useful is liberating; at least it was for me. By the end of this makeshift bootcamp I hope my brother feels the same way.&lt;/p&gt;
&lt;h2&gt;Stay tuned&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ll be posting updates as time goes on.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Running a Meteor App on Dokku]]></title><link>https://blog.iansinnott.com/running-a-meteor-app-on-dokku/</link><guid isPermaLink="false">https://blog.iansinnott.com/running-a-meteor-app-on-dokku/</guid><pubDate>Sat, 22 Nov 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a quick overview of how to get a Meteor app set up on Dokku. It&amp;#39;s actually not difficult, but it doesn&amp;#39;t seem to have been well documented anywhere yet. Let&amp;#39;s get started.&lt;/p&gt;
&lt;h2&gt;What you need&lt;/h2&gt;
&lt;p&gt;Obviously, you will need a server running Dokku. I used the Digital Ocean Dokku droplet, which uses the following versions:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Ubuntu 14.04&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Docker 1.1.2&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Dokku 0.2.3&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;If you have a different setup your results may vary, but I&amp;#39;m guessing this guide will generally work for you as long as you have Dokku v0.2.3 setup.&lt;/p&gt;
&lt;p&gt;You also need a meteor app. If you are reading this just out of curiosity and don&amp;#39;t have an app feel free to use one of the example apps. You can generate them easily through the CLI. Example:&lt;/p&gt;
&lt;pre&gt;$ meteor create --example todos&lt;/pre&gt;
&lt;h2&gt;Dokku Configuration&lt;/h2&gt;
&lt;p&gt;First of all, the default buildpack that Dokku will use if it detects a Meteor app is the &lt;a href=&quot;https://github.com/oortcloud/heroku%E2%B8%BBbuildpack%E2%B8%BBmeteorite&quot;&gt;Heroku Buildpack&lt;/a&gt;, which is not yet compatible with Meteor 1.0 and still uses Meteorite. That&amp;#39;s no good, so you will need to specify a custom buildpack for Dokku. The buildpack I&amp;#39;ve used successfully with Meteor 1.0 is &lt;a href=&quot;https://github.com/AdmitHub/meteor%E2%B8%BBbuildpack%E2%B8%BBhorse&quot;&gt;Meteor Buildpack Horse&lt;/a&gt;. As of this writing (11/22/14) the documentation still doesn&amp;#39;t reflect that it&amp;#39;s compatible with 1.0, but it&amp;#39;s worked so far so don&amp;#39;t worry about that.&lt;/p&gt;
&lt;p&gt;To specify a custom buildpack, just create a file in your project root named &lt;code &gt;.env&lt;/code&gt; and within that file export the buildpack URL like so:&lt;/p&gt;
&lt;pre&gt;export BUILDPACK_URL=&amp;#39;https://github.com/AdmitHub/meteor-buildpack-horse.git&amp;#39;&lt;/pre&gt;
&lt;p&gt;Make sure you &lt;code &gt;git add&lt;/code&gt; your new &lt;code &gt;.env&lt;/code&gt; file with and commit it.&lt;/p&gt;
&lt;h2&gt;Adding Mongo&lt;/h2&gt;
&lt;p&gt;Now you need to add the &lt;a href=&quot;https://github.com/jeffutter/dokku%E2%B8%BBmongodb%E2%B8%BBplugin&quot;&gt;Dokku MongoDB Plugin&lt;/a&gt; to Dokku. Make sure you&amp;#39;ve SSHed into your server, then run the following commands:&lt;/p&gt;
&lt;pre&gt;$ git clone https://github.com/jeffutter/dokku-mongodb-plugin.git /var/lib/dokku/plugins/mongodb
$ dokku plugins-install&lt;/pre&gt;
&lt;p&gt;This may take a few minutes since it will need to install &lt;code &gt;mongodb-server&lt;/code&gt; on the remote machine, unless you&amp;#39;ve already installed Mongo in which case it should be quick. Once it&amp;#39;s done, start Mongo and link it to your app:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Note:&lt;/span&gt; In the following snippet replace &lt;code &gt;&amp;lt;app&amp;gt;&lt;/code&gt; with the name of your application, assuming you&amp;#39;ve already pushed it to Dokku. If not, push your app up first and then run these commands. Your app name is what you specify in the git remote URL that points to Dokku. It looks like &lt;code &gt;dokku@yoursite.com:&amp;lt;app&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;$ mongodb:start
$ mongodb:create &amp;lt;app&amp;gt;&lt;/pre&gt;
&lt;h2&gt;Final Configuration&lt;/h2&gt;
&lt;p&gt;If you haven&amp;#39;t yet, deploy your app to Dokku. It will most likely crash (i.e. You get an Nginx error when you hit your URL), but that&amp;#39;s fine as it is still missing one last piece.&lt;/p&gt;
&lt;p&gt;The final step is to set the &lt;code &gt;ROOT_URL&lt;/code&gt; environment variable in your app container. You need to have pushed your app at least once for the app container to exist. Replace &lt;code &gt;&amp;lt;url&amp;gt;&lt;/code&gt; with the URL you intend to use for your app. If you haven&amp;#39;t yet purchased a domain name, you can set this variable to your IP address and it should still run just fine. Don&amp;#39;t forget the leading &lt;code &gt;http://&lt;/code&gt; (ex: &lt;code &gt;http://example.com&lt;/code&gt; or &lt;code &gt;http://0.0.0.0&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;$ dokku config:set &amp;lt;app&amp;gt; ROOT_URL=&amp;lt;url&amp;gt;&lt;/pre&gt;
&lt;p&gt;Setting the environment variable will trigger Dokku to restart your app. Once it does you should be able to view the app at the URL you provided in&lt;code &gt;&amp;lt;url&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Success!&lt;/h2&gt;
&lt;p&gt;That&amp;#39;s it. Hopefully this helps as you deploy your meteor apps quickly using Dokku. If you want to create another meteor app you will just need to run through the above steps again, with the exception of adding the MongoDB plugin.&lt;/p&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;If you had trouble with anything above there are a couple ways you can troubleshoot Dokku and it&amp;#39;s containers:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Inspect the apps logs. This is likely the most useful troubleshooting technique, and will likely reveal the problem. Run &lt;code &gt;dokku logs &amp;lt;app&amp;gt;&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;If the logs don&amp;#39;t reveal the issue, put Dokku into debug mode and re-deploy. To do this you need to create a new Dokku config file at &lt;code &gt;/home/dokku/dokkurc&lt;/code&gt;. Add a single line to the file: &lt;code &gt;export DOKKU_TRACE=1&lt;/code&gt;. Now when you deploy, Dokku will send back &lt;span class=&quot;italic&quot;&gt;a lot&lt;/span&gt; more information.&lt;/li&gt;&lt;/ol&gt;
&lt;h2&gt;Useful Resources&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/jeffutter/dokku%E2%B8%BBmongodb%E2%B8%BBplugin&quot;&gt;MongoDB Dokku Plugin&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/AdmitHub/meteor%E2%B8%BBbuildpack%E2%B8%BBhorse&quot;&gt;Meteor Buildpack Horse&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how%E2%B8%BBto%E2%B8%BBdeploy%E2%B8%BBa%E2%B8%BBmeteor%E2%B8%BBjs%E2%B8%BBapplication%E2%B8%BBon%E2%B8%BBubuntu%E2%B8%BB14%E2%B8%BB04%E2%B8%BBwith%E2%B8%BBnginx&quot;&gt;How To Deploy a Meteor.js Application on Ubuntu 14.04 with Nginx&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;That last link is &lt;span class=&quot;italic&quot;&gt;not&lt;/span&gt; specific to Dokku or even Docker, but it gives good insight into what is required to set up a production Meteor server.&lt;/p&gt;
&lt;p&gt;Feel free to leave comments if you still have questions.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Time Machine to the Rescue]]></title><link>https://blog.iansinnott.com/time-machine-to-the-rescue/</link><guid isPermaLink="false">https://blog.iansinnott.com/time-machine-to-the-rescue/</guid><pubDate>Fri, 03 Oct 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A couple weeks ago I made the decision to reinstall OSX and start anew, washing away over a years worth of accumulated files. It took about two hours to get most things reinstalled and running again, and after the fact I was very happy with the results. My computer is now fresh again, the downloads folder doesn&amp;#39;t have 1000 items in it and I have over 100GB of free space (up from ~5GB before)! All in all a very quick and painless experience... until this week.&lt;/p&gt;
&lt;h2&gt;Know what to migrate&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s tough to keep track of everything on your system that&amp;#39;s vital to your day-to-day workflow. The toughest are the things that aren&amp;#39;t needed day-to-day, but which become vital the second you try do something that depends on them. In my case this was building an android app for distribution.&lt;/p&gt;
&lt;p&gt;To distribute an app on the Google Play Store you need to create a Java Keystore to sign your app with. This file is monumentally important if you&amp;#39;re an app developer, because without it you cannot update your app. This week I had to update an app on Google Play and figured out how important that file was.&lt;/p&gt;
&lt;h2&gt;Time Machine to the rescue&lt;/h2&gt;
&lt;p&gt;Luckily, I did make sure to back up my entire system before reinstalling OSX, so I knew I must have my Java Keystore saved somewhere. I just had to find it. This was actually surprisingly fast as I had initially stored it under a folder named &lt;code &gt;keystore&lt;/code&gt;. Simple enough. I hit restore in Time Machine and done, it was on my system.&lt;/p&gt;
&lt;p&gt;Excellent, now I just need to sign my Android APK and I would be good to go. This particular project is built with Cordova, so the easiest way I&amp;#39;ve found to do this is to specify an &lt;code &gt;ant.properties&lt;/code&gt; file under &lt;code &gt;platforms/android&lt;/code&gt;. There&amp;#39;s a great, concise &lt;a href=&quot;http://ilee.co.uk/Sign%E2%B8%BBReleases%E2%B8%BBwith%E2%B8%BBCordova%E2%B8%BBAndroid/&quot;&gt;article on this with full instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Great, now to just run the command...&lt;/p&gt;
&lt;pre&gt;$ cordova build android --release

...

-release-prompt-for-password:
[input] Please enter keystore password&lt;/pre&gt;
&lt;p&gt;... shit. Did not remember my keystore required a password.&lt;/p&gt;
&lt;p&gt;At point I ended up trying a few common passwords all of which failed, but I did ultimately figure it out. I wrote a quick Ruby script to run through a list of about 20 potential passwords and one of them did turn out to be the right one. So in the end not a terrible experience, just a strong reminder that backing up everything is always a good idea, and backing up the keys to your apps is paramount.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Business]]></title><link>https://blog.iansinnott.com/business/</link><guid isPermaLink="false">https://blog.iansinnott.com/business/</guid><pubDate>Wed, 01 Oct 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I was reminded today of just how much opportunity there is in the world. I met with a new friend and potential client to discuss two websites he wants to build. Our talk focused mostly on his business, but we made a number of digressions into general business in Asia, incorporation, visa issues and a number of other topics of concern to expats.&lt;/p&gt;
&lt;h2&gt;A quick digression&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;italic&quot;&gt;...don&amp;#39;t work for free.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;After a nice hour long chat we finally came to the point of the matter: Project details and compensation. The offer he gave was an all-to-common one: Build this &amp;quot;small&amp;quot; thing for free and their will be tons of paying work down the road. I can&amp;#39;t speak to the experience of other developers, but this is something I hear all too often. Potential clients like to lure people of various background to do some up front work for free with a promise to deliver paying work down the road. Projects like these can be tempting for new developers, but they rarely pan out. Doing free work, regardless of the promised riches down the road, is generally a mistake and at best it means taking on unnecessary risk as a developer. If the project works out, you might get paid later or you might not, but even if you do there&amp;#39;s really no reason to wait unless you truly believe in the project (i.e. you think it&amp;#39;s the next Facebook). Business if full of risk, but working as a developer/freelancer/consultant should not be risky work.&lt;/p&gt;
&lt;h2&gt;New business opportunities&lt;/h2&gt;
&lt;p&gt;So, for the time being that particular project isn&amp;#39;t going to be on my todo list but it was an insightful conversation nonetheless and we ended up talking for two hours. What really stood out to me was another proposal that my friend made, which was to go into apparel sales here in Taiwan.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;italic&quot;&gt;Um, what?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The idea of selling apparel in Taiwan would have seemed like a novel idea a day ago, but after listening to my friend talk about the opportunities in the market and the success he&amp;#39;s already had I must say I&amp;#39;m intrigued. I don&amp;#39;t plan to start selling apparel tomorrow, but I was reminded of something that I truly hope I will never forget: Opportunity is &lt;span class=&quot;italic&quot;&gt;everywhere&lt;/span&gt;. As a developer it&amp;#39;s so easy to get sucked in to the world of code. After all, if you can code you can literally build anything you want. But from a business perspective it is really only one small slice of the much larger economy, and there are all sorts of opportunities elsewhere as well.&lt;/p&gt;
&lt;p&gt;Good conversation should be thought provoking, and todays meeting certainly hit the mark.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How I Nearly Gave Up Coffee]]></title><link>https://blog.iansinnott.com/how-i-nearly-gave-up-coffee/</link><guid isPermaLink="false">https://blog.iansinnott.com/how-i-nearly-gave-up-coffee/</guid><pubDate>Sun, 28 Sep 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;italic&quot;&gt;Drink coffee you don&amp;#39;t like, and drink it black...&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#39;m now well into week two of &lt;a href=&quot;http://blog.iansinnott.com/road%E2%B8%BBto%E2%B8%BBabsterdam%E2%B8%BBpart%E2%B8%BB1/&quot;&gt;my diet&lt;/a&gt; and I realized something unexpected: I have largely given up coffee. I the past I would regularly drink 3-4 cups a day, but lately that amount has decreased to 1 cup at most. I would have never expected to accidentally give up coffee, I always thought it would be a sever exercise in willpower if I were to ever decide I needed to give it up. Turns out all I needed was to stop drinking coffee I liked...&lt;/p&gt;
&lt;p&gt;Turns out I really don&amp;#39;t like dark roasts. I know many people like the bitter, charred flavor that you get with a darker roast but it is not for me. Despite drinking dark roast coffee black on a regular basis since starting my diet, it was only a couple days ago that I discovered what it means to enjoy a cup of black coffee. I was out at a café and ordered their daily special. I had no idea what it was, but daily specials usually interest me and it also happened to be much cheaper than all the frappuccino-latte-type choices that most everyone else was drinking.&lt;/p&gt;
&lt;p&gt;I sipped it, expecting the all too familiar bitterness that I dislike in black coffee but it was not to be found. I was nearly stunned at how delicious and fragrant the coffee was. I drank more. I was hooked. It was a bit of a strange experience to find out that the reason I disliked black coffee all along was not because it wasn&amp;#39;t sweet, but because it simply didn&amp;#39;t suite my taste.&lt;/p&gt;
&lt;p&gt;The whole experience was strongly akin to when I first discovered good beer. As a college student I most often drank the cheapest of the cheap beer and happily accepted the fact that it was crap. That&amp;#39;s just the way beer was... Until I tried a Belgian beer. It was a sweet, light tripel and it shattered my preconceptions of what beer should taste like. It opened my eyes and opened the door to enjoying many more beers of all flavors down the road. I hope that this experience with a light roast will do the same for coffee.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Road to Absterdam Part 1]]></title><link>https://blog.iansinnott.com/road-to-absterdam-part-1/</link><guid isPermaLink="false">https://blog.iansinnott.com/road-to-absterdam-part-1/</guid><pubDate>Fri, 26 Sep 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My diet choices have been generally unhealthy for the past year, but lately I&amp;#39;ve decided I want abs. As such I asked &lt;a href=&quot;http://physiquegeek.wordpress.com/&quot;&gt;my buddy Ravi&lt;/a&gt; for nutrition advice, and came up with the following daily macros:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Protein: 180g&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Carbs: 45g&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Fats: 90g&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;This is a very minimal diet as it comes out to ~1800 calories. The point being, I would put my body at a caloric deficit every day and lose weight. Simple 😎&lt;/p&gt;
&lt;h3&gt;So much protein&lt;/h3&gt;
&lt;p&gt;Since my normal diet of the past year wouldn&amp;#39;t get me anywhere near 180g of protein in a day I needed to make a change. The simplest way in my mind was to just eat more chicken. Easy enough, I love chicken and know how to cook it. As far as sources of protein go, chicken is amazing. It&amp;#39;s low fat, has zero carbs and of course packs tons of protein. I live near a large chain store called RT-mart (大潤發) here in Taipei. At RT-mart raw chicken breast is packaged such that 1kg of chicken meat costs about $6.60. Not bad a bad price, so I this became my main source of chicken.&lt;/p&gt;
&lt;p&gt;I used all that chicken, along with some veggies and kimchi to make dishes like the this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;/public/images/chicken-one.jpg?table=block&amp;id=&quot; alt=&quot;Chicken Meal&quot;/&gt;&lt;figcaption&gt;Chicken Meal&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;It was going quite well. Meals like that are very low in carbs and fats and super heavy in protein. I continued to make many similar dishes.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;/public/images/chicken-two.jpg?table=block&amp;id=&quot; alt=&quot;Chicken Meal&quot;/&gt;&lt;figcaption&gt;Chicken Meal&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Then I made another...&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;/public/images/chicken-three.jpg?table=block&amp;id=&quot; alt=&quot;Chicken Meal&quot;/&gt;&lt;figcaption&gt;Chicken Meal&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;And another...&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;/public/images/chicken-four.jpg?table=block&amp;id=&quot; alt=&quot;Chicken Meal&quot;/&gt;&lt;figcaption&gt;Chicken Meal&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Sometimes I changed the salad up a bit.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;/public/images/chicken-five.jpg?table=block&amp;id=&quot; alt=&quot;Chicken Meal&quot;/&gt;&lt;figcaption&gt;Chicken Meal&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The idea behind these meals was great: Eat mostly protein. The problem was, I never took the time to look up the nutrition facts for what I was eating. I knew on a very general level that chicken had a lot of protein, but I didn&amp;#39;t know exactly how much. Remember how I was buying chicken in 1kg packages? I would make a point of eating that entire pack of chicken over the course of a day, so 1000g. In 100g of raw chicken there are about 23g of protein, so I was actually getting about 230g of protein a day &lt;span class=&quot;italic&quot;&gt;from chicken alone&lt;/span&gt;. Then on top of that I was drinking a daily protein shake and eating six eggs for breakfast. Check out this omelet:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;/public/images/breakfast.jpg?table=block&amp;id=&quot; alt=&quot;Awesome breakfast omelet&quot;/&gt;&lt;figcaption&gt;Awesome breakfast omelet&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;So with everything tallied up I was getting about 300g of protein &lt;span class=&quot;italic&quot;&gt;every single day&lt;/span&gt;, well ahead of my goal of 180g. At least I was getting it though.&lt;/p&gt;
&lt;h3&gt;Revising&lt;/h3&gt;
&lt;p&gt;So my takeaway from all this is that you should always be sure to know what your eating before you put it in your mouth. All that extra protein meant that I wasn&amp;#39;t hitting my caloric goals and probably had a caloric surplus most days during the past week. Oh well, lesson learned. From now on I&amp;#39;m going to cut back on the chicken and bring my macros more inline with where they need to be in order to get abs. 🍗 + 🍃 = 💪&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Using Docker on a Mac with Boot2Docker]]></title><link>https://blog.iansinnott.com/using-docker-on-a-mac-with-boot2docker/</link><guid isPermaLink="false">https://blog.iansinnott.com/using-docker-on-a-mac-with-boot2docker/</guid><pubDate>Thu, 25 Sep 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;UPDATE 2016-11-12:&lt;/span&gt;  This post is no longer relevant now that &lt;a href=&quot;https://www.docker.com/products/docker#/mac&quot;&gt;Docker for Mac&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;One thing to remember&lt;/h2&gt;
&lt;p&gt;When your running &lt;a href=&quot;http://boot2docker.io/&quot;&gt;boot2docker&lt;/a&gt; on a Mac (and probably Windows as well) it&amp;#39;s important to remember that ports exposed by your containers will not be directly accessible via localhost as you might expect. Since docker is running within boot2docker containers will be exposed via ports on the boot2docker IP.&lt;/p&gt;
&lt;p&gt;For example, if running &lt;code &gt;docker ps&lt;/code&gt; tells you your app is exposing port 80 on some high-numbered port on the local host, it is actually exposed via boot2dockers IP:&lt;/p&gt;
&lt;pre&gt;$ docker ps
CONTAINER ID    IMAGE NAMES      PORTS
6751b94bb5c0    ubuntu:latest    0.0.0.0:49154-&amp;gt;80/tcp&lt;/pre&gt;
&lt;p&gt;Going to &lt;code &gt;0.0.0.0:49154&lt;/code&gt; in your browser won&amp;#39;t work. You need to replace &lt;code &gt;0.0.0.0&lt;/code&gt; with boot2docker&amp;#39;s IP address. To find it, run:&lt;/p&gt;
&lt;pre&gt;$ boot2docker ip

The VM&amp;#39;s Host only interface IP address is: 192.168.55.555&lt;/pre&gt;
&lt;p&gt;Putting that into the browser will along with the correct port will give you &lt;code &gt;192.168.55.555:49154&lt;/code&gt; and you will be able to access your web app as expected.&lt;/p&gt;
&lt;p&gt;This may all be very simple for anyone familiar with networking, but it took me a good amount of time to figure this out with no error message. I guess you should just run Docker on Linux 😉&lt;/p&gt;
&lt;p&gt;Although not entirely related, I wrote a gist to automatically export boot2docker&amp;#39;s IP address into an environment variable whenever it is set:&lt;/p&gt;
&lt;p&gt;{% gist iansinnott/0a0c212260386bdbfafb %}&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Programmer, Maker or Both?]]></title><link>https://blog.iansinnott.com/programmer-maker-or-both/</link><guid isPermaLink="false">https://blog.iansinnott.com/programmer-maker-or-both/</guid><pubDate>Wed, 24 Sep 2014 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;I just want my stuff to work and not break. Programming is not my passion. Making stuff is my passion.
-- &lt;a href=&quot;https://levels.io/&quot;&gt;Levels.io&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;That&amp;#39;s not my quote, but it certainly resonated with me. For the better part of two years I&amp;#39;ve been working as a freelance developer, coding projects for clients to generate some income and occasionally working on projects of my own in my spare time. This has worked out great for me so far: I live where I want (currently Taipei), work when I want and generally have quite a bit of freedom in what I do on a given day.&lt;/p&gt;
&lt;p&gt;This line of work has also led me to discover how much I love the web and creating for it. At the same time I&amp;#39;ve also (re)discovered the joy of programming. I regularly tell friends, acquaintances and people I just met that they should learn to code. Not because I believe I know what&amp;#39;s best for them, but because I truly enjoy what I do and I think others might as well.&lt;/p&gt;
&lt;p&gt;But why do I enjoy it? This question has come up more than once in my mind. Do I actually enjoy programming for programmings sake? Is it my passion? I think not. I think it&amp;#39;s just as Levels.io said: Making stuff is my passion. Yet, I often spend time doing things that are directly related to programming, but perhaps won&amp;#39;t directly lead to any new creation. Here are a few examples:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;I&amp;#39;ve been spending a lot of time recently learning &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; so I can better deploy my apps.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;For much the same reason I taught myself &lt;a href=&quot;http://en.wikipedia.org/wiki/Bash_(Unix_shell)&quot;&gt;Bash&lt;/a&gt; and switched all my sites over to &lt;a href=&quot;https://www.digitalocean.com/?refcode=9acd82993bac&quot;&gt;Digital Ocean&lt;/a&gt; (referral link) so that I could enjoy the obscurity of the command line with all my projects.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;When I first started coding I learned Git before I could even build a stable app.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;And of course the most egregious example of all: &lt;span class=&quot;bold&quot;&gt;I learned &lt;/span&gt;&lt;a class=&quot;bold&quot; href=&quot;http://en.wikipedia.org/wiki/Vim_(text_editor)&quot;&gt;Vim&lt;/a&gt;. I certainly don&amp;#39;t regret that, but learning Vim means learning an entirely new programming language call vimscript, all so that you can basically code your own text editor.&lt;/p&gt;
&lt;p&gt;The best part is I enjoyed all of it. So maybe I am more of a &amp;#39;Programmer&amp;#39; than I thought. Still, I&amp;#39;d like to always be aware of why I&amp;#39;m doing what I&amp;#39;m doing, and that&amp;#39;s because there are so many cool things to be built that simply don&amp;#39;t exist yet.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Dokku, Mongo & Node.js]]></title><link>https://blog.iansinnott.com/dokku-mongo-and-nodejs/</link><guid isPermaLink="false">https://blog.iansinnott.com/dokku-mongo-and-nodejs/</guid><pubDate>Fri, 22 Aug 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;italic&quot;&gt;TL;DR: If you run into trouble using Mongo with Dokku for a Node.js app, re-image your server and start from scratch.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Today was my first adventure into setting up a full-fledged, database-driven application with Dokku. I built the app with Node.js so I chose Mongo as the database. Local setup was easy, I already had Mongo installed. Setting up the production server also seemed easy at first until it just didn&amp;#39;t work. Here&amp;#39;s I troubleshot it:&lt;/p&gt;
&lt;h2&gt;Nginx Error&lt;/h2&gt;
&lt;p&gt;The first problem I ran into was an Nginx error page. I forgot the status code, but it essentially meant there was no app running. Strange, since the app was running fine on my local system. Since my application was set to log to stdout I wasn&amp;#39;t able to see any information about what was causing the app to error out, so I decided to do a quick deploy to Heroku and see what was amiss.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Sidenote&lt;/span&gt;: I &lt;span class=&quot;italic&quot;&gt;really&lt;/span&gt; like Heroku. If it wasn&amp;#39;t so much more expensive than a Digital Ocean droplet I would probably use them for every project.&lt;/p&gt;
&lt;h3&gt;Troubleshooting on Heroku&lt;/h3&gt;
&lt;p&gt;Heroku has a great &lt;code &gt;heroku logs&lt;/code&gt; command that shows everything an application logged while it was running. As soon as I saw the output I had a face-palm moment: I hadn&amp;#39;t saved all my dependencies to &lt;code &gt;package.js&lt;/code&gt;, so I was getting simple &amp;quot;module not found&amp;quot; errors. That was embarrassing, but at least it&amp;#39;s a quick fix.&lt;/p&gt;
&lt;p&gt;After cleaning up my &lt;code &gt;package.json&lt;/code&gt; file I deployed again and got a database error. Nothing unusual there, I hadn&amp;#39;t added a Mongo database to Heroku. This was to be expected, so I decided to deploy straight back to my own droplet.&lt;/p&gt;
&lt;h2&gt;Was Dokku Broken?&lt;/h2&gt;
&lt;p&gt;After redeploying I was still getting the same Nginx error telling me that there was no app running. When I ran &lt;code &gt;docker ps&lt;/code&gt; I saw that was true: Only the MongoDB container was running. Lame.&lt;/p&gt;
&lt;p&gt;At this point I didn&amp;#39;t know what to try. I&amp;#39;m still not super familiar with Docker/Dokku for deployment, so I used the good old fashioned method of just resetting everything.&lt;/p&gt;
&lt;p&gt;I had saved a droplet image on DO right after installing Node but before setting up Dokku with my SSH key, so I just restored to that image. Then I:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Setup my SSH key as usual, not using virtual host naming b/c I still haven&amp;#39;t transfered the clients main site.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Installed the Dokku Mongo plugin and the domains plugin&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Created a Mongo container using the plugin: &lt;code &gt;dokku mongodb:create &amp;lt;app&amp;gt;&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Created the actual Dokku app from my local server: &lt;code &gt;git remote add dokku dokku@&amp;lt;ip&amp;gt;:&amp;lt;app&amp;gt;&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Deployed: &lt;code &gt;git push dokku master&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Then everything worked fine. Running &lt;code &gt;docker ps&lt;/code&gt; now shows two running containers: one for the app and one for Mongo.&lt;/p&gt;
&lt;h2&gt;So.. in conclusion&lt;/h2&gt;
&lt;p&gt;I don&amp;#39;t know what went wrong initially, but resetting everything worked like a charm. So when in doubt, just restore to a stable image and start from scratch. And make sure to make snapshots of your droplet whenever you feel it is in a reusable state. Boosh!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Useful Bash Commands For Web Developers]]></title><link>https://blog.iansinnott.com/useful-bash-commands-for-web-developers/</link><guid isPermaLink="false">https://blog.iansinnott.com/useful-bash-commands-for-web-developers/</guid><pubDate>Fri, 15 Aug 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I recently found myself tutoring a friend in the ways of the command line and thought I&amp;#39;d write a quick post about it. Being comfortable with bash (or some other shell) isnt necessarily a prerequisite for web development, but it certainly makes the process smoother and more enjoyable. For anyone just starting to learn the command line, here are a few useful tips:&lt;/p&gt;
&lt;h3&gt;The Basics&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;cd&lt;/code&gt;: Short for &amp;#39;change directory&amp;#39;. This is probably the command you will use most often until you decide to &lt;a href=&quot;http://stackoverflow.com/questions/890086/bash%E2%B8%BBblank%E2%B8%BBalias%E2%B8%BBto%E2%B8%BBcd&quot;&gt;do away with it altogether&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;pwd&lt;/code&gt;: Think &amp;#39;print working directory&amp;#39;. This outputs the path to your current working directory.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;ls -laG&lt;/code&gt;: Display the contents of the &lt;code &gt;pwd&lt;/code&gt;. The common form of this command, &lt;code &gt;ls&lt;/code&gt;, really isn&amp;#39;t very useful in my opinion, so skip it and go straight for this useful directory listing command. Alias it to something shorter like so: &lt;code &gt;alias l=&amp;#39;ls -lahG&amp;#39;&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;Directory Shortcuts&lt;/h3&gt;
&lt;p&gt;You don&amp;#39;t always have to type a full path to get where you want to be.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;~&lt;/code&gt;: Home directory. Ex: &lt;code &gt;cd ~&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;.&lt;/code&gt;: A single period. Present directory, i.e. &lt;code &gt;pwd&lt;/code&gt;. Ex: &lt;code &gt;ls -la .&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;..&lt;/code&gt;: Two periods. Parent directory.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;-&lt;/code&gt;: Hyphen. The previous directory. Ex: &lt;code &gt;cd -&lt;/code&gt; is like saying &amp;#39;Go Back&amp;#39; in bash.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;This is all really basic stuff, but if you&amp;#39;re like me you likely put off learning it for a while because it&amp;#39;s not absolutely essential to building awesome apps. That being said, once you find yourself tweaking your won servers or deploying to someone elses you will be much happier if you are comfortable with the command line.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Using Dokku As A Personal Heroku]]></title><link>https://blog.iansinnott.com/using-dokku-as-a-personal-heroku/</link><guid isPermaLink="false">https://blog.iansinnott.com/using-dokku-as-a-personal-heroku/</guid><pubDate>Thu, 24 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Dokku For The Win&lt;/h2&gt;
&lt;p&gt;I might just be in love with &lt;a href=&quot;https://github.com/progrium/dokku&quot;&gt;Dokku&lt;/a&gt;. Why? Here are some things I like as a developer:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Not having to configure servers&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Not having to upload files&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Deploying apps to production (or staging!) with a few key strokes&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Portability of code&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Extensibility&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;With a service like Heroku you get all of this, but with free, open source software like &lt;a href=&quot;https://github.com/progrium/dokku&quot;&gt;Dokku&lt;/a&gt; you not only get these great features but you don&amp;#39;t have to pay a premium. It&amp;#39;s completely free, which means if you&amp;#39;re like me and you enjoy using &lt;a href=&quot;https://www.digitalocean.com/?refcode=9acd82993bac&quot;&gt;Digital Ocean&amp;#39;s&lt;/a&gt; $5/mo base package you get the most critical features of Heroku for five bucks a month. That&amp;#39;s a deal in my book.&lt;/p&gt;
&lt;p&gt;After a session of coding, here&amp;#39;s what my new deployment process looks like:&lt;/p&gt;
&lt;pre&gt;git add .
git push dokku master&lt;/pre&gt;
&lt;p&gt;It&amp;#39;s &lt;span class=&quot;italic&quot;&gt;that&lt;/span&gt; simple.&lt;/p&gt;
&lt;h2&gt;Setting Up&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m not going to go in depth on this because there&amp;#39;s really not that much to say. Here are the steps you would take to get set up with Dokku if you&amp;#39;re using Digital Ocean:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Crete a new droplet from the standard Dokku image. &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how%E2%B8%BBto%E2%B8%BBuse%E2%B8%BBthe%E2%B8%BBdigitalocean%E2%B8%BBdokku%E2%B8%BBapplication&quot;&gt;Here&amp;#39;s a guide&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Install the &lt;a href=&quot;https://github.com/wmluke/dokku%E2%B8%BBdomains%E2%B8%BBplugin&quot;&gt;Dokku Domains Plugin&lt;/a&gt;. It&amp;#39;s unofficial, but it works great.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Run &lt;code &gt;dokku domains:set &amp;lt;app-name&amp;gt; www.myawesomeapp.com&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Symlink the newly created nginx conf file to the &lt;code &gt;/etc/nginx/sites-enabled/&lt;/code&gt; directory.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Restart nginx: &lt;code &gt;sudo service nginx restart&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Step four is what tripped me up initially. I thought I could just run the domains command and everything would work fine, but apparently the script doesn&amp;#39;t link anything up to Nginx, so you must do it yourself.&lt;/p&gt;
&lt;p&gt;The generated conf file will likely be located at &lt;code &gt;/home/dokku/&amp;lt;app-name&amp;gt;/nginx-domains.conf&lt;/code&gt;. So all you need to do is symlink that into your Nginx configuration and your good to go:&lt;/p&gt;
&lt;pre&gt;ln -s /path/to/nginx-domains.conf /path/to/sites-enabled/&amp;lt;app-name&amp;gt;&lt;/pre&gt;
&lt;p&gt;After that, restart your server with the command mentioned above (or whatever works for your system) and you should be good to go. Reload your custom URL in the browser and see it live.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Note:&lt;/span&gt; This only works if you already have a domain name set up and DNS set up. Just Google this if you need help there, Digital Ocean has some great guides and a surprisingly nice DNS management interface.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s all. Dokku is awesome.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A Month In San Francisco]]></title><link>https://blog.iansinnott.com/a-month-in-san-francisco/</link><guid isPermaLink="false">https://blog.iansinnott.com/a-month-in-san-francisco/</guid><pubDate>Tue, 08 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Four Weeks in &lt;span class=&quot;italic&quot;&gt;the&lt;/span&gt; city for tech&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m from California. I grew up in tiny town called Point Arena, about four hours north of the Bay Area. Despite this, I never actually spent any significant time in San Francisco, so I was very excited to have the chance to live here for a month, especially after spending two years abroad. Better yet, the day I landed was my birthday :+1:&lt;/p&gt;
&lt;h3&gt;The Vibe is right...&lt;/h3&gt;
&lt;p&gt;As soon as I had spend 24 hours in the city, I could see myself living here. I like to walk and take public transportation, so I don&amp;#39;t generally speak very highly of American cities. SF has that. Nightlife that&amp;#39;s not strictly limited to weekends is also a plus, and that also seems to be a thing here. But what I have thus far enjoyed most about this city, is the mentality.&lt;/p&gt;
&lt;p&gt;People everywhere here are trying to start a company, or get recruited by their favorite company, or just build something cool in their spare time. Everyone seems to be &lt;span class=&quot;italic&quot;&gt;doing&lt;/span&gt; something, and that something is usually very cool or at least interesting to hear about. I can see why many people say this place is a bubble, but it&amp;#39;s not a bad bubble to find yourself in.&lt;/p&gt;
&lt;h3&gt;... but how does anyone get anything done?&lt;/h3&gt;
&lt;p&gt;This city is so good, and I&amp;#39;ve been having so much fun that I have gotten much less done than I did in Delhi, where I spent most of the day in an office.&lt;/p&gt;
&lt;p&gt;If I had to summarize my time here so far, I would simply say this city is too much fun to get much done. But that&amp;#39;s OK, after I leave here I&amp;#39;m planning a trip to Washington before heading back to my favorite city: &lt;span class=&quot;bold&quot;&gt;Taipei&lt;/span&gt; :)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Using Emoji in Excerpts on GitHub Pages]]></title><link>https://blog.iansinnott.com/using-emoji-in-excerpts-on-github-pages/</link><guid isPermaLink="false">https://blog.iansinnott.com/using-emoji-in-excerpts-on-github-pages/</guid><pubDate>Tue, 08 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Here&amp;#39;s how to get GitHub emoji working in post excerpts&lt;/h2&gt;
&lt;p&gt;As I was redesigning my blog recently I decided I wanted all the emoji in all of the places. That&amp;#39;s not usually a problem on GitHub pages. Seriously, they even have &lt;a href=&quot;https://help.github.com/articles/emoji%E2%B8%BBon%E2%B8%BBgithub%E2%B8%BBpages&quot;&gt;an official page about it.&lt;/a&gt;. But if you want emoji in your post excerpts, you will have a problem.&lt;/p&gt;
&lt;p&gt;GitHub pages only support emoji in post or page content. In theory, that should really apply to excerpts as well, but for some reason it does not. Here is what emoji looked like on my site before:&lt;/p&gt;
&lt;p&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;p&gt;![Broken GitHub Emoji]({{ site.image_dir }}broken-emoji.png)&lt;/p&gt;
&lt;p&gt;The problem was this line of code which uses Jekyll&amp;#39;s built-in excerpt feature:&lt;/p&gt;
&lt;pre&gt;{{ &amp;quot;{{ post.excerpt &amp;quot;}}}}&lt;/pre&gt;
&lt;p&gt;The solution? Generate your own excerpts directly from the content using Jekyll&amp;#39;s built-in helpers:&lt;/p&gt;
&lt;pre&gt;{{ &amp;quot;{{ post.content | truncatewords: 50 &amp;quot;}}}}&lt;/pre&gt;
&lt;p&gt;Thank goodness that worked, I thought I was going to have to move away from GitHub pages. If you want to be able to play around with the excerpt length easily without editing &lt;code &gt;index.html&lt;/code&gt; you can also add it as a &lt;a href=&quot;http://jekyllrb.com/docs/variables/&quot;&gt;custom variable&lt;/a&gt; in &lt;code &gt;_config.yml&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;In _config.yml...excerpt_length: 100&lt;/pre&gt;
&lt;p&gt;Then in &lt;code &gt;index.html&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;{{ &amp;quot;{{ post.content | truncatewords: site.excerpt_length &amp;quot;}}}}&lt;/pre&gt;
&lt;p&gt;This is the approach I took because it feels cleaner to me, but use whatever works for you. That&amp;#39;s all, hope this helps 😎&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Setting Up Hydra Config on A Mac]]></title><link>https://blog.iansinnott.com/setting-up-hydra-config-on-a-mac/</link><guid isPermaLink="false">https://blog.iansinnott.com/setting-up-hydra-config-on-a-mac/</guid><pubDate>Thu, 03 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Update 2016-11-12:&lt;/span&gt; I no longer use either Hydra or Mjolnir. Currently my go to app for window management is &lt;a href=&quot;https://github.com/kasper/phoenix&quot;&gt;Phoenix&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Update:&lt;/span&gt; The Hydra project referenced in this post no longer exists. It&amp;#39;s been succeeded by &lt;a href=&quot;https://github.com/sdegutis/mjolnir&quot;&gt;Mjolnir&lt;/a&gt;, a project by the initial creator of Hydra. So whenever you see me reference &amp;quot;Hydra&amp;quot; I&amp;#39;m now actually referencing &lt;a href=&quot;https://github.com/sdegutis/mjolnir&quot;&gt;Mjolnir&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;I Set Up Hydra to Minimize my Dependence on a Mouse&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;italic&quot;&gt;This post is about moving one step closer to a mouse-less workflow, where any command can be accomplished trivially from the keyboard.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I discovered &lt;a href=&quot;https://github.com/sdegutis/mjolnir&quot;&gt;Hydra&lt;/a&gt; through Hacker News earlier today, and it&amp;#39;s almost everything I could wish for in a window management tool. My new setup allows me to manage windows somewhat like you see in the image bellow:&lt;/p&gt;
&lt;p&gt;![Keyboard Window Management]({{ site.url }}/public/images/hydra.gif)&lt;/p&gt;
&lt;p&gt;If you interested, &lt;a href=&quot;https://github.com/sdegutis/dotfiles/blob/osx/home/.hydra/init.lua#L43%E2%B8%BBL50&quot;&gt;here&amp;#39;s the source&lt;/a&gt; to make Hydra work like you see in that image. But if you&amp;#39;re like me, you will probably want to customize everything, so here&amp;#39;s a quick tutorial on how to do that.&lt;/p&gt;
&lt;h2&gt;init.lua&lt;/h2&gt;
&lt;p&gt;If you just downloaded and installed Hydra, you will need to create an init file
at &lt;code &gt;~/.hydra/init.lua&lt;/code&gt;. This file will be read every time the app opens and any time you explicitly tell Hydra to reload its configuration.&lt;/p&gt;
&lt;p&gt;I would recommend copying in the sample file that Hydra will load if there is no init file present. That file is a great reference for both the Hydra api and Lua.&lt;/p&gt;
&lt;h3&gt;Lua&lt;/h3&gt;
&lt;p&gt;If you have no experience with Lua and want to set up some extreme window commands with Hydra don&amp;#39;t worry. It turns out Lua is a pretty simple language. At least simple enough to write Hydra configuration quickly and effectively. I had absolutely no experience with Lua before today and now I have an effective Hydra setup. To me, Lua&amp;#39;s syntax feels like a bit of a middle ground between Javascript, Ruby and Bash.&lt;/p&gt;
&lt;h2&gt;Hydra API&lt;/h2&gt;
&lt;p&gt;Hydra exposes a few useful global variables for you, but in my coding the most useful by far was &lt;code &gt;window&lt;/code&gt;. Everything in my config files started with &lt;code &gt;window&lt;/code&gt;, so that&amp;#39;s what I&amp;#39;ll cover here. Here is a snippet to grab the active frame and the screen:&lt;/p&gt;
&lt;pre&gt;local win = window.focusedwindow()

-- If no focused window, just return
if not win then return end

local winframe = win:frame()
local screenframe = win:screen():frame_without_dock_or_menu()
local newframe = {
x = winframe.x,
y = winframe.y,
w = winframe.w,
h = winframe.h,
}

-- [Do stuff to newframe before setting it]

win:setframe(newframe)&lt;/pre&gt;
&lt;p&gt;That is a basic boilerplate for most things you would need to do with the active window in the active screen.&lt;/p&gt;
&lt;h3&gt;Frames&lt;/h3&gt;
&lt;p&gt;Not sure if the term &amp;#39;frame&amp;#39; is preexisting or if it is just something coined by the author of Hydra, but what it really means to the rest of us is a window. This can be confusing since &lt;code &gt;window&lt;/code&gt; is itself a global variable and it is used to retrieve the active (or focused) frame. Basically, when you manipulate a frame you are manipulating that &amp;#39;window&amp;#39; in finder. When you resize a finder window with the mouse you are also manipulating a frame. To focus a frame, or make it active, just click on it or use the usual command tab.&lt;/p&gt;
&lt;h3&gt;Screens&lt;/h3&gt;
&lt;p&gt;In this post whenever I say screen, I will mean the result of calling:&lt;/p&gt;
&lt;pre&gt;window.focusedwindow():screen():frame_without_dock_or_menu()&lt;/pre&gt;
&lt;p&gt;That &lt;code &gt;frame_without_dock_or_menu&lt;/code&gt; method is key, because it returns a rectangle that represents the &amp;#39;usable&amp;#39; part of your screen. That means everything except the top menu bar and the doc (if it&amp;#39;s visible). This is important because people can put their doc wherever they like (left, bottom, right) but this function will always return the correct rectangle representing the usable portion of the screen.&lt;/p&gt;
&lt;p&gt;Screens also have a second feature. This is a feature I never had a use for so I didn&amp;#39;t explore it, but as far as I can tell these are &amp;#39;Spaces&amp;#39; on a Mac. So if you use a ton of different spaces in your workflow this would be a good place to do some optimizing.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;That&amp;#39;s pretty much all you would need to know to get started. Here some gists taken directly from &lt;a href=&quot;https://github.com/iansinnott/dotfiles/tree/master/dotfiles/hydra&quot;&gt;my own dotfiles&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First off, my init file which binds resize and window motion commands to a &amp;#39;meta&amp;#39; key, which I defined as cmd+shift:&lt;/p&gt;
&lt;p&gt;{% gist iansinnott/2cbecf87d9273a0d5918 %}&lt;/p&gt;
&lt;p&gt;I put most of the actual logic in a separate file to keep things tidy:&lt;/p&gt;
&lt;p&gt;{% gist iansinnott/0c9a0dcba88e6d0de0e5 %}&lt;/p&gt;
&lt;p&gt;That&amp;#39;s all. Feel free to leave a comment if there&amp;#39;s anything you would add. So far this has been all I need to keep my hands on the keyboard.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Jekyll Management Like a Boss]]></title><link>https://blog.iansinnott.com/jekyll-management-like-a-boss/</link><guid isPermaLink="false">https://blog.iansinnott.com/jekyll-management-like-a-boss/</guid><pubDate>Sat, 28 Jun 2014 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Blogging Without Friction&lt;/h2&gt;
&lt;p&gt;Yesterday I wrote a script to help myself blog more often. This is what it looks like in the terminal:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Create a new post: &lt;code &gt;post new [post title]&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;List all of my posts: &lt;code &gt;post list&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Search existing posts: &lt;code &gt;post search [post title]&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Edit a post: &lt;code &gt;post edit [partial post title]&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Publish to this blog: &lt;code &gt;post publish&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I really like &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, but having to manually create files with the Jekyll filename format (&lt;code &gt;YYYY-MM-DD-post-title&lt;/code&gt;) is a bit of a hassle. Clearly you could just do this by hand, but if you&amp;#39;re like me and want to automate all the minutia in your life, then that&amp;#39;s not going to cut it.&lt;/p&gt;
&lt;p&gt;The other reason I decided to write a script for managing Jekyll was &lt;span class=&quot;italic&quot;&gt;friction&lt;/span&gt;. Blogging can be fun, but sometimes it&amp;#39;s hard to get myself to actually start writing posts. In the past, that was largely because my post-writing workflow looked something like this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Open a new Markdown file&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Write an amazing post&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Open a browser, log in to WordPress&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Use the WordPress UI to create a new post&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Copy my Markdown from my editor into the WordPress WYSIWYG&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Hit publish&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Navigate to the post on the front-end to make sure it looked OK&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;Steps 3-7 were really causing a lot of friction when it came to writing blog posts. So much so that I still have some posts sitting on my computer that never got published because interacting with the WordPress UI is just too tedious. Here&amp;#39;s what my new workflow looks like:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;In a terminal: &lt;code &gt;post new Jekyll Management Like a Boss&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Write blog post about Jekyll. Save it.&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Back in a terminal: &lt;code &gt;post publish&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;And done.&lt;/p&gt;
&lt;p&gt;Now I have no excuses. If I don&amp;#39;t write a post, I can only blame my own lassitude since I now have a super efficient workflow. This is a good thing.&lt;/p&gt;
&lt;h2&gt;Why not Octopress&lt;/h2&gt;
&lt;p&gt;The only existing option for managing a Jekyll blog that I came across was &lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt;. It&amp;#39;s a good project, and I already miss some of its features by not using it, but to me it had one glaring problem: Theming. There is limited documentation on how to theme Octopress, and while there are a bunch of 3rd-part Octopress themes to choose from it&amp;#39;s just not good enough. I have nothing against using premade themes, it&amp;#39;s just that once in a while you will probably want to change some little thing about the site and if you don&amp;#39;t know how it&amp;#39;s a real pain.&lt;/p&gt;
&lt;p&gt;The other reason I decided against Octopress, is fairly minor, but significant in my mind: The CLI syntax. If you don&amp;#39;t know, creating a new post in Octopress looks like this:&lt;/p&gt;
&lt;pre&gt;rake new_post[&amp;#39;Post Title&amp;#39;]&lt;/pre&gt;
&lt;p&gt;To me that just doesn&amp;#39;t make sense, when you can just as easily write a script to do the same thing with much less typing:&lt;/p&gt;
&lt;pre&gt;post new Post Title&lt;/pre&gt;
&lt;p&gt;Octopress certainly does &lt;span class=&quot;italic&quot;&gt;way&lt;/span&gt; more than this little script I wrote, and I&amp;#39;m sure those guys knew exactly what they were doing when they designed the CLI the way they did, but it&amp;#39;s the little things like that that really make the experience for me so I just decided to write my own.&lt;/p&gt;
&lt;p&gt;For anyone interested, you can find my script on GitHub: https://github.com/iansinnott/jekyll-post&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Note:&lt;/span&gt; I haven&amp;#39;t optimized this script for use on other systems, so it may well not work on Linux or especially Windows. It also won&amp;#39;t work on any system without &lt;a href=&quot;http://nodejs.org/&quot;&gt; Node &lt;/a&gt; installed.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Meteor is (Almost) Awesome]]></title><link>https://blog.iansinnott.com/meteor-is-almost-awesome/</link><guid isPermaLink="false">https://blog.iansinnott.com/meteor-is-almost-awesome/</guid><pubDate>Sat, 28 Jun 2014 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Almost Perfect, But With Room For Improvement&lt;/h3&gt;
&lt;p&gt;Have you ever built a real-time web app? Well I hadn&amp;#39;t, not before meteor anyway. This framework makes it insanely easy to build apps that update in real-time across an unlimited number of screens, so I love it. Meteor is &lt;span class=&quot;italic&quot;&gt;so good&lt;/span&gt; in fact, that it was very easy to overlook what I would otherwise consider to be deal breakers like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Full blown app rebuilds, including file compilation, concatenation and minification &lt;span class=&quot;italic&quot;&gt;every time you save a file&lt;/span&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;No official testing solution&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;No official package manager&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;One of the first things you will read or be told when starting a meteor project, is to install &lt;a href=&quot;http://oortcloud.github.io/meteorite/&quot;&gt;Meteorite&lt;/a&gt; as a package manager, so the last bullet point is probably pretty clear to anyone who&amp;#39;s used Meteor. However, the other two pain points might be less obvious when just starting with the framework.&lt;/p&gt;
&lt;p&gt;That first one is a really big deal for anyone who likes to iterate on their design using CSS in a browser, and likes to see realtime changes to the web page. These days it&amp;#39;s fairly easy to accomplish this using [Grunt][grunt] or [Gulp][gulp] in combination with [Livereload][lr]. But if you have a large Meteor app, you might have to wait ten seconds (or more!) for your app to reload entirely, even if you just changed a margin or added a 1px border. This is ridiculous.&lt;/p&gt;
&lt;p&gt;Testing has also been an issue with Meteor. There have been a few decent contenders:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://arunoda.github.io/laika/&quot;&gt;Laika&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://rtd.xolv.io/&quot;&gt;RTD&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mad%E2%B8%BBeye/meteor%E2%B8%BBmocha%E2%B8%BBweb/&quot;&gt;Mocha Web&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;For the most part, these are all viable solutions and they are certainly all written by very smart and accomplished members of the community. However, they all fall short in one way or another:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Laika is slow to run, and not great for integration testing with a browser (well, PhantomJS).&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;RTD enforces a strict file structure, which is at odds with Meteor&amp;#39;s philosophy of letting you put code anywhere and having it work.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Mocha web is fine in my opinion (I&amp;#39;m currently using it for a project) but it&amp;#39;s &lt;span class=&quot;italic&quot;&gt;just&lt;/span&gt; mocha essentially. It works, but it doesn&amp;#39;t take advantage of Meteor&amp;#39;s reactivity.&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;A Solution&lt;/h2&gt;
&lt;p&gt;Both of these issues are pretty bad in my book, but luckily Meteor has an excellent community and a core team that is more than willing to collaborate with this awesome community. I had the chance to attend an excellent &lt;a href=&quot;http://www.meetup.com/Meteor%E2%B8%BBSFBay/&quot;&gt;Meteor devshop&lt;/a&gt; at Meteor HQ in San Francisco this week, and I my faith in and excitement for Meteor were both restored.&lt;/p&gt;
&lt;h3&gt;Long app rebuilds&lt;/h3&gt;
&lt;p&gt;One of the summer interns at Meteor gave a lightning talk at the event and talked about support for smart reloads coming in v0.9.0. The feature works today, but hasn&amp;#39;t shipped yet. Basically it&amp;#39;s exactly what you expect: Change a CSS file and the updated code will be injected into the browser. It still took a visible amount of time to update the page using simple CSS, whereas a setup using Gulp plus &lt;a href=&quot;https://www.npmjs.org/package/gulp%E2%B8%BBsass&quot;&gt;gulp-sass&lt;/a&gt; is nearly instantaneous, so there is clearly still some work to be done there. But I&amp;#39;m still super excited for the feature, as it demonstrates that the Meteor team is taking heed of what numerous developers have been complaining about on GitHub and on the mailing list.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;All the test-related pain points I mentioned above should be disappearing very soon with the emergence of &lt;a href=&quot;https://github.com/xolvio/velocity&quot;&gt;Velocity&lt;/a&gt;. This project is sort of like a framework for testing frameworks. It allows various frameworks to work with meteor, and here&amp;#39;s the kicker: They work &lt;span class=&quot;italic&quot;&gt;reactively&lt;/span&gt;. This means you get real-time feedback as to whether or not your tests are passing as you write them. Or if your into the TDD approach write the test first, then watch them turn green in real time as you write your code. Cool right?&lt;/p&gt;
&lt;p&gt;The best thing about this project is you can use it today. Just be aware that there &lt;span class=&quot;italic&quot;&gt;will&lt;/span&gt; be bugs (as of this writing), but once the framework matures a bit it will be a new and better way to test.&lt;/p&gt;
&lt;p&gt;Velocity will also become the official testing framework of Meteor, and will most likely eventually be rolled into Meteor itself and distributed along side it.&lt;/p&gt;
&lt;p&gt;What&amp;#39;s more, Velocity is being developed by the same guys behind all the current testing solutions I mentioned above, so hopefully going forward there will be much less fragmentation in Meteor testing, and we can all just write our tests and move on to the actual functionality. This is something I can&amp;#39;t wait to see.&lt;/p&gt;
&lt;h3&gt;Package Management&lt;/h3&gt;
&lt;p&gt;The last pain point I mentioned was packages, and Meteor is also planning on tackling this by v1.0. Meteorite is slated to be rolled into Meteor itself and will become fully integrated.&lt;/p&gt;
&lt;h2&gt;Just the beginning&lt;/h2&gt;
&lt;p&gt;The feeling as a Meteor developer must be somewhat like being a Rails dev back in 2007, or whenever it was just picking up and really becoming an amazing platform for creative applications. Going to that Meteor devshop renewed my faith in Meteor as the immediate future of web development. It still won&amp;#39;t be the right call for every project (read blog), but it&amp;#39;s a tremendously useful tool for building what used to be difficult, time-intensive projects. I can&amp;#39;t wait to see where it is in a few months.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Jekyll Theming Like a Boss With Gulp]]></title><link>https://blog.iansinnott.com/jekyll-theming-like-a-boss-with-gulp/</link><guid isPermaLink="false">https://blog.iansinnott.com/jekyll-theming-like-a-boss-with-gulp/</guid><pubDate>Thu, 19 Jun 2014 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Building your own Jekyll theme quickly and efficiently&lt;/h2&gt;
&lt;p&gt;Basically I was fed up with how inefficient coding Jekyll themes was, especially with Octopress, so I decided there must be a better way. These are my findings.&lt;/p&gt;
&lt;p&gt;We&amp;#39;re going to use &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp.js&lt;/a&gt; to automate most of what&amp;#39;s lame about creating themes for Jekyll. Gulp is just a task runner, so if you have another your more familiar with (i.e. &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt;) that would work too.&lt;/p&gt;
&lt;p&gt;First you need to go grab the boilerplate &lt;a href=&quot;http://getpoole.com/&quot;&gt;Poole&lt;/a&gt; code so that we are all on the same page.&lt;/p&gt;
&lt;h3&gt;Sass&lt;/h3&gt;
&lt;p&gt;Jekyll tempting is a pain compared to general web development and it shouldn&amp;#39;t be. Let&amp;#39;s get gulp set up to automate the usual crap for us. I&amp;#39;m using SCSS, but you could do the same thing with plain CSS, Less or Stylus just as easily. Here is the is a gulpfile to get get you set up:&lt;/p&gt;
&lt;p&gt;{% gist iansinnott/a9175e41f521a56eae52 %}&lt;/p&gt;
&lt;p&gt;The important task here is the &amp;#39;sass&amp;#39; task. That task will compile any sass in the &lt;code &gt;sass/&lt;/code&gt; directory, save it in two places:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;public/css&lt;/code&gt;: This is where you would normally save any CSS you wanted included in your project. These files would be copied into &lt;code &gt;_site/public/css&lt;/code&gt; whenever you run &lt;code &gt;jekyll build&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;_site/public/css&lt;/code&gt;: This is where your generated site lives. Normally you would never manually change any files in here, but by saving CSS to this directory on compile we can take advantage of CSS injections in the browser immediately, without having to run &lt;code &gt;jekyll build&lt;/code&gt; to have the files copied over. Basically we are doing exactly what &lt;code &gt;jekyll build&lt;/code&gt; would do, but only for our CSS so that the entire site doesn&amp;#39;t have to be built every time we change one style.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The key to this setup is the &lt;code &gt;watch&lt;/code&gt; task, which will compile are Sass files into CSS and inject the changes into the browser using live reload. This is an immense improvement over changing Sass files, manually running &lt;code &gt;jekyll build&lt;/code&gt; and then doing a full page refresh in the browser. As an added bonus, we can also have gulp automatically rebuild the site whenever any of our Markdown or html files change. First I set up gulp with [gulp-shell][gshell] so that it could run &lt;code &gt;jekyll build&lt;/code&gt; for me:&lt;/p&gt;
&lt;pre&gt;gulp.task(&amp;#39;build&amp;#39;, shell.task([ &amp;#39;jekyll build&amp;#39; ]));&lt;/pre&gt;
&lt;p&gt;Then the following code runs that &lt;code &gt;build&lt;/code&gt; task on the project whenever any HTML or Markdown files are changed in our project:&lt;/p&gt;
&lt;pre&gt;gulp.watch([
&amp;#39;_includes/**/&lt;span class=&quot;italic&quot;&gt;.html&amp;#39;,
&amp;#39;_layouts/**/&lt;/span&gt;.html&amp;#39;,
&amp;#39;_posts/**/*&amp;#39;
], [&amp;#39;build&amp;#39;]);&lt;/pre&gt;
&lt;h3&gt;Wrap up&lt;/h3&gt;
&lt;p&gt;That&amp;#39;s pretty much it. Just a way to get jekyll to act like a modern web technology when building templates. If you don&amp;#39;t like waiting for your Sass to compile or your browser to reload, hopefully this helped.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Vim: It's Awesome]]></title><link>https://blog.iansinnott.com/vim-its-awesome/</link><guid isPermaLink="false">https://blog.iansinnott.com/vim-its-awesome/</guid><pubDate>Mon, 03 Mar 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I&amp;#39;ve done a few posts on Vim before, but I realize how little I really knew about Vim as I wrote those posts. Lately I&amp;#39;ve taken the time to actually learn quite a bit of Vimscript, enough to finally start opening up the true power of Vim. I can customize &lt;span class=&quot;italic&quot;&gt;anything I want&lt;/span&gt; and create all sorts of new behavior in the editor. But it&amp;#39;s really true what many people have said over and over again…&lt;/p&gt;
&lt;h2&gt;There&amp;#39;s a learning curve&lt;/h2&gt;
&lt;p&gt;I would say at the very least it&amp;#39;s taken six months to get proficient in Vim. It could certainly be done in less time, but if you&amp;#39;re actively working on client projects you will find it hard to open up an editor you don&amp;#39;t yet know and be really productive.&lt;/p&gt;
&lt;h3&gt;Modal editing is easy&lt;/h3&gt;
&lt;blockquote&gt;I&amp;#39;ve heard learning the default mappings is sheer pain!&lt;/blockquote&gt;
&lt;p&gt;Learning how to use the well-known &lt;code &gt;hjkl&lt;/code&gt; keys for navigating around the document is surprisingly easy to learn. It just takes a bit of muscle memory, so by disabling your mouse and directional keys anyone could pick this up fairly quickly. I think it took me about two weeks of on-and-off practice, because again, if there&amp;#39;s real work that needs to get done it&amp;#39;s not practical to spend 90% of your time learning to navigate the document and only 10% actually coding.&lt;/p&gt;
&lt;blockquote&gt;I&amp;#39;ve used Vim a bit, and became fairly comfortable with simple motions, but it&amp;#39;s still slow! Why does anyone like this…&lt;/blockquote&gt;
&lt;p&gt;So if the mappings are actually easy to learn, what&amp;#39;s the catch?&lt;/p&gt;
&lt;h3&gt;Vimscript&lt;/h3&gt;
&lt;p&gt;Modal editing is indeed the foundation of Vim&amp;#39;s amazing usability, but the true core of it&amp;#39;s appeal to so many programmers is it&amp;#39;s customizability. That&amp;#39;s where Vimscript comes in. If you really want to make your editor do your work for you then you&amp;#39;ll need to learn at least a bit of Vimscript. &lt;a href=&quot;http://stevelosh.com/&quot;&gt;Steve Losh&lt;/a&gt; has written an amazing (and free) &lt;a href=&quot;http://learnvimscriptthehardway.stevelosh.com/&quot;&gt;book on Vimscript&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Being Super Productive&lt;/h2&gt;
&lt;p&gt;So what does Vimscript allow you to do? &lt;span class=&quot;bold&quot;&gt;Anything&lt;/span&gt;. At least anything I&amp;#39;ve had a need to do. Here are a few examples:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Type &lt;code &gt;,!&lt;/code&gt; to put &lt;code &gt;!important&lt;/code&gt; at the end of a css declaration.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Type &lt;code &gt;,{&lt;/code&gt; to go to the closing brace of the current function or block&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Type &lt;code &gt;,;&lt;/code&gt; to add a semicolon to the end of the current line&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;These sorts of mappings are all in addition to &lt;span class=&quot;italic&quot;&gt;super&lt;/span&gt; useful functionality that comes either from core Vim or from plugins. An example is the epic &lt;a href=&quot;https://github.com/tpope/vim%E2%B8%BBsurround&quot;&gt;Surround&lt;/a&gt; plugin by Tim Pope. That let&amp;#39;s you do things like this:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Type &lt;code &gt;ci&amp;#39;&lt;/code&gt; to delete everything within two single quotes (&lt;code &gt;&amp;#39;&lt;/code&gt;) and start typing. This is super useful for change CSS classes, where there are often more than one space-separated classes that need to be changed.&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;Ongoing benefits&lt;/h3&gt;
&lt;p&gt;The beauty of knowing enough Vimscript to create all the functionality I want is that I no longer have to wish my editor had a certain feature. The instant I realize something could be improved all I have to do is open up a new window and write a bit of code. This level of customization is truly necessary for most developers, and I myself could never go back to using a standard editor now that I have all this custom functionality at my fingertips.&lt;/p&gt;
&lt;p&gt;GitHub recently released a &lt;a href=&quot;http://atom.io&quot;&gt;new text editor called Atom&lt;/a&gt; that aims to be the best of both worlds. In their own blog post, they even point out the existing polarized nature of text editors: Either they are easy to use, and provide great functionality out of the box (TextMate, Sublime, most IDEs, etc.), or they provide very little of standard text editor functionality out of the box, but are extremely customizable (I.e. Vim and Emacs). I haven&amp;#39;t used that new editor yet, but I certainly hope they can achieve their goal. It would be nice to be able to script my editor with JavaScript instead of Vimscript…&lt;/p&gt;
&lt;p&gt;But as it currently stands, there really isn&amp;#39;t much in the middle. As a friend of mine recently said, if you&amp;#39;re using Vim or Emacs you get a lot of customizability but:&lt;/p&gt;
&lt;blockquote&gt;You bacically have to write your own editor.&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[From Startup Idea to (In)validation in a Week]]></title><link>https://blog.iansinnott.com/from-startup-idea-to-invalidation-in-a-week/</link><guid isPermaLink="false">https://blog.iansinnott.com/from-startup-idea-to-invalidation-in-a-week/</guid><pubDate>Mon, 27 Jan 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is the brief story of and reflection on me and a friend&amp;#39;s idea for a startup. We went from product idea, to super minimal prototype to finding out our product probably wasn&amp;#39;t going to make money all in a week. This is what happened.&lt;/p&gt;
&lt;h2&gt;The Idea&lt;/h2&gt;
&lt;p&gt;A good friend of mine, &lt;a href=&quot;http://nickbudden.com/&quot;&gt;Nick Budden&lt;/a&gt;, had an idea for a product, and after talking about it over the course of a few days we decided to build it. The product would be a unified solution to many of the problems we face as freelance developers. Problems may be the wrong word actually, more like annoyances. The parts of our job that just serve to get in the way and take up valuable time that could be spent creating cool new things. Let&amp;#39;s call the combined sum of these annoyances “Freelance Minutia.”&lt;/p&gt;
&lt;p&gt;Here was our initial definition of Freelance Minutia, and thus the problems we wanted to solve:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Finding work&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Getting design feedback from clients&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Managing projects and client relations&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Bookkeeping&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;Our big idea was to create &lt;span class=&quot;bold&quot;&gt;a freelance dashboard that would automate all the annoying aspects of our job.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;The Motivation&lt;/h2&gt;
&lt;p&gt;It sounded great at first. In my own day-to-day work as a freelancer I most often encounter points (1) and (3) above. Finding work sucks, not because it&amp;#39;s necessarily difficult but because it usually takes a bit of time, say two weeks to land a new client I didn&amp;#39;t know at all beforehand. Then once I landed a client, I would need to keep track of all the various emails we sent back and forth. This is a hassle. Even with separate work and personal email accounts it&amp;#39;s easy for emails to get lost in the mix when you have more than one client, or are working on more than one project for the same client.&lt;/p&gt;
&lt;h2&gt;The Competition&lt;/h2&gt;
&lt;p&gt;There are currently no shortage of ‘solutions&amp;#39; to either of these problems in the market. The first problem can be solved to some degree with online job boards. This is after all where me and Nick have both found a significant portion of our past work. But all those various job boards aren&amp;#39;t centralized, which makes it a hassle to sift through them all. The other friction point is that far too many of the jobs are complete and utter crap. I could write a whole post on what makes a ‘crap&amp;#39; job listing, so I&amp;#39;ll try to stay focused on the post at hand.&lt;/p&gt;
&lt;p&gt;Then in the realm of the second problem mentioned above, client management, there are endless software &amp;amp; services that pitch themselves as project management software. Basecamp is possibly the most prominent example of such competition.&lt;/p&gt;
&lt;p&gt;The issue with Basecamp-esque project management software in my opinion is that it introduces new friction into one&amp;#39;s workflow. As the developer, I must enter new clients in the system, and new clients need to sign up for an account before we can collaborate and discuss the project. If there is anything I have found that clients truly hate, it&amp;#39;s changing the way they already work. So introducing this new friction into a projects workflow isn&amp;#39;t ideal. The exception is of course clients that already use some sort of software solution, but in my experience they are the exception.&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;Given what we knew so far, we figured our ideal solution would be divided into a number of ‘modules&amp;#39;, each providing different functionality in the end product. The modules were as follows:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Job Board: An aggregated that would scrape jobs from a ton of sources on the web and display them to our users in a clean, easy to digest format. They would all be tagged with keywords of relevant skills such as &lt;span class=&quot;italic&quot;&gt;wordpress&lt;/span&gt;, &lt;span class=&quot;italic&quot;&gt;javascript&lt;/span&gt;, &lt;span class=&quot;italic&quot;&gt;rails&lt;/span&gt;, etc. They we would only show each user jobs relevant to the skills they had indicated on their profile. Simple.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Design Annotation: A portion of the site where users could upload a design mockup, as a simple image file, and clients could add annotation boxes along with text on any area they liked.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Client Feeds / Inbox: An area where any emails with clients would be aggregated into simple, digestible feeds that users could review quickly. No more client emails lost in a mountain of other stuff.&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Product Validation&lt;/h2&gt;
&lt;p&gt;So, with our product idea relatively clear in our heads and our belief that the competition was missing something we set out to build a prototype. There&amp;#39;s no point building this thing if no one wants it after all. We gave ourselves a one-week timebox to get something out to a group of ten beta testers. So we created the ‘initial version&amp;#39;, if you can even call it that, which was prototype of the Job Board. This was actually just a simple Rails app that would display job titles, how to apply, and a brief job description. All the jobs were added by hand by me and Nick. We created this initial version and sent it out to our testers in three days.&lt;/p&gt;
&lt;p&gt;The feedback on this first part wasn&amp;#39;t great. It was all very constructive, but it wasn&amp;#39;t overly positive. The recurring theme we kept on hearing was that other people found the majority of their work offline, usually at networking events or by referral. This meant that to them the job board was all but useless. The feedback wasn&amp;#39;t all negative, but it wasn&amp;#39;t positive enough for us to spend a ton of time creating a scraper and algorithm to find jobs and bring them into our dashboard. This would have to wait.&lt;/p&gt;
&lt;h2&gt;Validation Phase 2&lt;/h2&gt;
&lt;p&gt;Now that we knew the Job Board module wasn&amp;#39;t as important as we initially thought, it was time to focus on the Client Feeds / Inbox module. This time, to save even more time spent coding we decided it would be best to just mock it up and send out images of what the finished product would look like. So for the next two days Nick created the mockups while I read up on Rails (neither of us new anything about Rails before starting this project). We sent out the mockups and waited for responses.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;This morning, we reviewed that feedback and came to the conclusion that we need to reconsider the whole project.&lt;/span&gt; All of our beta testers gave long, insightful feedback and suggestions as to how we might move forward along with features they thought would be useful. However, one theme was consistent across all testers: They &lt;span class=&quot;bold&quot;&gt;wouldn&amp;#39;t&lt;/span&gt; pay for this — Not yet at least. Since what they had seen in the mockups was pretty much what we imagined the finished product looking like, this was a big hit to the validity of our idea. So, as I said before, we&amp;#39;ve decided to go in a different direction.&lt;/p&gt;
&lt;h2&gt;Take Aways&lt;/h2&gt;
&lt;p&gt;All things considered, we are both very happy with the past week and what we accomplished. We may not have a valid SaaS product yet, but we know that our initial idea wasn&amp;#39;t going to work and it took us only a week to figure this out. It would have been very easy to spend a month or two actually creating this product only to find out no one wanted to use it, so spending a week to come to this conclusion is good time in my mind.&lt;/p&gt;
&lt;p&gt;Furthermore, I learned Rails this past week. This is an excellent side-effect of actually trying to build something with a new technology. Unlike tutorials which take you step by step through a process and assume you will be able to replicate it later, actually building something forces you to think through a problem, consult documentation, implement and revise. I may not yet be an expert in Rails but I can already tell it will become the mainstay of my back-end development from here on out.&lt;/p&gt;
&lt;p&gt;We accomplished all of this while keeping up with our individual client projects as well.&lt;/p&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;In the end, I both don&amp;#39;t feel surprised by our testers&amp;#39; responses but I also feel there is value in our original idea. My problems that I mentioned in the beginning of this post haven&amp;#39;t yet been solved, so there&amp;#39;s clearly room for value to be created. I think the Client Inbox module discussed above hold great promise, and I still intend to build some version of it for my own use if nothing else.&lt;/p&gt;
&lt;p&gt;As for me and Nick as a team, we have decided to take this week for ourselves. We both have more client work to finish up, and I personally have something I want to build before moving on the next project. We have an idea of the next big product we want to create, but if you want to know more about that I recommend checking out &lt;a href=&quot;http://nickbudden.com/27/01/2014/the%E2%B8%BB1%E2%B8%BBweek%E2%B8%BBstartup%E2%B8%BBvalidation&quot;&gt;Nick&amp;#39;s post about this experience.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cheers from Taiwan, Ian&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Using Key Remap 4 MacBook's Private.xml]]></title><link>https://blog.iansinnott.com/using-key-remap-4-macbooks-privatexml/</link><guid isPermaLink="false">https://blog.iansinnott.com/using-key-remap-4-macbooks-privatexml/</guid><pubDate>Tue, 07 Jan 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Using the KeyRemap4MacBook private.xml mappings can be a bit opaque, so I&amp;#39;m writing this as a reference to myself and anyone else that needs to delve deep into customizing KeyRemap4MacBook (KRMB) by using the private.xml config file. Here are the more important rules:&lt;/p&gt;
&lt;h3&gt;Basic private.xml layout&lt;/h3&gt;
&lt;p&gt;This is an xml file you can start with.&lt;/p&gt;
&lt;pre&gt;&amp;lt;root&amp;gt;
  &amp;lt;list&amp;gt;
    &amp;lt;!-- &amp;lt;item&amp;gt; Tags Go Here --&amp;gt;
  &amp;lt;/list&amp;gt;
&amp;lt;/root&amp;gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;code &gt;&amp;lt;list&amp;gt;&lt;/code&gt; is an optional tag, but I think it&amp;#39;s nice for organization within KRMB. Leave it out if you want.&lt;/p&gt;
&lt;p&gt;The second basic piece is the &lt;code &gt;&amp;lt;item&amp;gt;&lt;/code&gt; tag. These represent the checkboxes you can turn on and off from within KRMB. They can contain multiple mappings or &lt;code &gt;&amp;lt;autogen&amp;gt;&lt;/code&gt; tags. Just remember that everything you put into one single &lt;code &gt;&amp;lt;item&amp;gt;&lt;/code&gt; will be activated or deactivated together. Here&amp;#39;s what they look like:&lt;/p&gt;
&lt;pre&gt;&amp;lt;item&amp;gt;
  &amp;lt;name&amp;gt;Item Name&amp;lt;/name&amp;gt;
  &amp;lt;appendix&amp;gt;Longer, more detailed information about the mapping if necessary.&amp;lt;/appendix&amp;gt;
  &amp;lt;appendix&amp;gt;You can add more than one appendix tag&amp;lt;/appendix&amp;gt;
  &amp;lt;identifier&amp;gt;private.unique_name_for_item&amp;lt;/identifier&amp;gt;&amp;lt;!-- Put autogen mappings here --&amp;gt;
&amp;lt;/item&amp;gt;&lt;/pre&gt;
&lt;p&gt;Now on to the actual mappings.&lt;/p&gt;
&lt;h3&gt;KeyToKey&lt;/h3&gt;
&lt;p&gt;For mapping one key to another, with potential modifier keys:&lt;/p&gt;
&lt;pre&gt;--KeyToKey--
KeyCode::&amp;lt;key we want to affect&amp;gt;, (optional modifier flags)
KeyCode::&amp;lt;key to fire when pressed&amp;gt;&lt;/pre&gt;
&lt;p&gt;Key to key mappings always take two &lt;code &gt;KeyCode&lt;/code&gt;s. The first is the key you would like to remap, the second is they key you would like to remap to. Both can take optional modifier flags. The example bellow remaps the curly braces, &lt;code &gt;{&lt;/code&gt; and &lt;code &gt;}&lt;/code&gt;, to nothing.&lt;/p&gt;
&lt;pre&gt;&amp;lt;autogen&amp;gt;
  --KeyToKey--
  KeyCode::BRACKET_RIGHT, ModifierFlag::SHIFT_L,
  KeyCode::VK_NONE
&amp;lt;/autogen&amp;gt;
&amp;lt;autogen&amp;gt;
  --KeyToKey--
  KeyCode::BRACKET_LEFT, ModifierFlag::SHIFT_L,
  KeyCode::VK_NONE
&amp;lt;/autogen&amp;gt;&lt;/pre&gt;
&lt;p&gt;That particular mapping may seem useless now, but these sorts of mappings, i.e. disabling a key by mapping it to nothing, are actually very important. After you come up with new mappings for various keys you should disable their former mappings in this way so that you are forced to retrain your muscle memory.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Note 1:&lt;/span&gt; KRMB doesn&amp;#39;t give you key codes for anything that would normally take a SHIFT to type, so to access anything that needs a shift modifier you just specify it as above. &lt;code &gt;BRACKET_RIGHT&lt;/code&gt; represents &lt;code &gt;[&lt;/code&gt;, so the combination of &lt;code &gt;BRACKET_RIGHT&lt;/code&gt; and &lt;code &gt;SHIFT_L&lt;/code&gt; is equal to &lt;code &gt;{&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Note 2:&lt;/span&gt; I&amp;#39;ve only disabled mappings of left shift, because I would never hold right shift while pressing a bracket if I wanted to type a curly brace. However, if do hold right shift and type a bracket a curly brace will be typed. Right Shift and Left Shift are completely separate keys so the above mapping only affects what I told it to: &lt;code &gt;SHIFT_L&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;KeyOverlaidModifier&lt;/h3&gt;
&lt;p&gt;This is the real meat of KRMB and was the real eye-opener for me. This let&amp;#39;s us map separate keys to a certain keys ‘hold&amp;#39; state as well as a single ‘tap&amp;#39;. Here&amp;#39;s the syntax:&lt;/p&gt;
&lt;pre&gt;--KeyOverlaidModifier--
KeyCode::&amp;lt;key we want to affect&amp;gt;,
KeyCode::&amp;lt;key to fire when held continuously&amp;gt;,
KeyCode::&amp;lt;key to fire when pressed and released quickly&amp;gt;&lt;/pre&gt;
&lt;p&gt;For example, the Shift keys are essential when typing, but we never tap them once once quickly. They are always held down as modifiers for other keys. This means each Shift key&amp;#39;s ‘tap&amp;#39; state is essentially wasted. We can utilize this and remap anything we want to that tap, all while preserving Shifts most essential functionality.&lt;/p&gt;
&lt;p&gt;What you would want to map to Shift is up to you. Steve Losh recommends mapping &lt;code &gt;(&lt;/code&gt; and &lt;code &gt;)&lt;/code&gt; to left and right Shift respectively. I totally agree that parentheses are vital when programming and should be easily accessible, but since I&amp;#39;ve already reversed my numbers and symbols it&amp;#39;s actually quite easy for me to hit &lt;code &gt;(&lt;/code&gt; and &lt;code &gt;)&lt;/code&gt; where they are. I also like being able to type them both in one quick rolling motion, since many function calls don&amp;#39;t take arguments and look like this: &lt;code &gt;someFunction()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So instead of parentheses, I decided to map &lt;code &gt;{&lt;/code&gt; and &lt;code &gt;}&lt;/code&gt;. When writing function definitions or conditional statements these symbols are prevalent in many languages, but they are also very useful outside of coding. On Mac OSX, &lt;code &gt;Command + {&lt;/code&gt; and &lt;code &gt;Command + }&lt;/code&gt; are assigned to switching tabs in most apps (Sublime, Terminal, Chrome, etc). So now I can hold Command and hit either left or right shift to navigate my tabs in Chrome (of which there are about 40 at any given time).&lt;/p&gt;
&lt;p&gt;So here&amp;#39;s what that mapping looks like:&lt;/p&gt;
&lt;pre&gt;&amp;lt;autogen&amp;gt;
  --KeyOverlaidModifier--
  KeyCode::SHIFT_L, ModifierFlag::SHIFT_L,
  KeyCode::SHIFT_L,
  KeyCode::BRACKET_LEFT, ModifierFlag::SHIFT_R
&amp;lt;/autogen&amp;gt;
&amp;lt;autogen&amp;gt;
  --KeyOverlaidModifier--
  KeyCode::SHIFT_R, ModifierFlag::SHIFT_R,
  KeyCode::SHIFT_R,
  KeyCode::BRACKET_RIGHT, ModifierFlag::SHIFT_L
&amp;lt;/autogen&amp;gt;&lt;/pre&gt;
&lt;p&gt;And now you see why I remapped my &lt;code &gt;{&lt;/code&gt; and &lt;code &gt;}&lt;/code&gt; keys to nothing earlier in the post: to train myself to use the shift keys instead.&lt;/p&gt;
&lt;h3&gt;ModifierFlag::NONE&lt;/h3&gt;
&lt;p&gt;One last thing to note about KRMB mappings is the &lt;code &gt;ModifierFlag::NONE&lt;/code&gt; flag, which let&amp;#39;s you keep certain mappings from interfering with others. I think of it a bit like non-recursive mappings in Vim. It means I could map a new key to &lt;code &gt;,&lt;/code&gt; (not sure why you would, but bear with me), but if you hit &lt;code &gt;Command + ,&lt;/code&gt; it would still open preferences in most applications.&lt;/p&gt;
&lt;p&gt;The example I&amp;#39;m using here isn&amp;#39;t going to make sense unless you have read &lt;a href=&quot;http://stevelosh.com/blog/2012/10/a%E2%B8%BBmodern%E2%B8%BBspace%E2%B8%BBcadet/&quot;&gt;Steve Losh&amp;#39;s post&lt;/a&gt; about creating a Hyper key, but here it is anyway:&lt;/p&gt;
&lt;pre&gt;&amp;lt;item&amp;gt;
  &amp;lt;name&amp;gt;Backslash to Hyper on hold&amp;lt;/name&amp;gt;
  &amp;lt;appendix&amp;gt;This makes Backslash function as hyper when held, otherwise pipe is fired. This is useful for app launching with hotkeys.&amp;lt;/appendix&amp;gt;
  &amp;lt;identifier&amp;gt;private.backslash_to_hyper_on_hold&amp;lt;/identifier&amp;gt;
  &amp;lt;autogen&amp;gt;
    --KeyOverlaidModifier--
    KeyCode::BACKSLASH, ModifierFlag::NONE,
    KeyCode::COMMAND_L,
    ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
    KeyCode::BACKSLASH, ModifierFlag::SHIFT_L
  &amp;lt;/autogen&amp;gt;
&amp;lt;/item&amp;gt;&amp;lt;item&amp;gt;
  &amp;lt;name&amp;gt;Swap backslash and pipe&amp;lt;/name&amp;gt;
  &amp;lt;appendix&amp;gt;This one i&amp;#39;m trying out really, it&amp;#39;s not as if I use either of these all that often, but I think writing OR statements happens more often than manually escaping characters. Still, if I was writing a lot of regex I would likely want the backslash back mapped to a single finger key.&amp;lt;/appendix&amp;gt;
  &amp;lt;identifier&amp;gt;private.backslash_pipe_swap&amp;lt;/identifier&amp;gt;
  &amp;lt;autogen&amp;gt;
    --KeyToKey--
    KeyCode::BACKSLASH, ModifierFlag::SHIFT_L,
    KeyCode::BACKSLASH
  &amp;lt;/autogen&amp;gt;
  &amp;lt;autogen&amp;gt;
    --KeyToKey--
    KeyCode::BACKSLASH, ModifierFlag::SHIFT_R,
    KeyCode::BACKSLASH
  &amp;lt;/autogen&amp;gt;
  &amp;lt;!--
    This is not needed as the main mapping above takes care of
    sending pipe instead of backslash.
  &amp;lt;autogen&amp;gt;
    --KeyToKey--
    KeyCode::BACKSLASH,
    KeyCode::BACKSLASH, ModifierFlag::SHIFT_L
  &amp;lt;/autogen&amp;gt;
  --&amp;gt;
&amp;lt;/item&amp;gt;&lt;/pre&gt;
&lt;p&gt;In that example I use ModifierFlag::NONE to allow me to do both a KeyToKey mapping and a KeyOverlaidModifier on the same single key.&lt;/p&gt;
&lt;h3&gt;Go off and learn more&lt;/h3&gt;
&lt;p&gt;You probably have different preferences and needs than me when it comes to how you interact with your computer, so here are some resources you can use to learn more about customizing your system through KRMB:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;http://stevelosh.com/blog/2012/10/a-modern-space-cadet/&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;https://pqrs.org/macosx/keyremap4macbook/pckeyboardhack.html.en&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;https://pqrs.org/macosx/keyremap4macbook/xml.html.en&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;Update 4/28/14&lt;/h3&gt;
&lt;p&gt;I realized when I first wrote this I didn&amp;#39;t link to my own private.xml file for anyone to look at. Here&amp;#39;s the link:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/iansinnott/dotfiles/blob/master/dotfiles/KeyRemap4MacBook/private.xml&quot;&gt;Private.xml&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[WordPress Needs Better Automation]]></title><link>https://blog.iansinnott.com/wordpress-needs-better-automation/</link><guid isPermaLink="false">https://blog.iansinnott.com/wordpress-needs-better-automation/</guid><pubDate>Thu, 02 Jan 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;It&amp;#39;s occurred to me time and time again that I don&amp;#39;t write as much as I should. In fact I think I even wrote up a short post about that some time back. Anyway, another thing that&amp;#39;s been on my mind lately is the friction that comes from small tasks that keeps us (or at least me) from completing larger tasks.&lt;/p&gt;
&lt;p&gt;In the case of WordPress, there is far too much friction associated with creating new posts on a regular basis. As a programmer, I have come to despise most interfaces that require me to carry out repetitive tasks myself when they could be easily automated. I&amp;#39;m talking about things like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Open browser, head to my site login page&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Ideally I&amp;#39;m already logged in, but more likely I need to login again&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Spend a few seconds remembering my password&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;In the WP dashboard, click on New &amp;gt; Post&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Copy and paste the title from the blog post I just finished&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Copy and paste the content as Markdown into the WP editor&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Hit publish&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;That&amp;#39;s the basic procedure when it comes to creating a new post, at least for me. The issue is that most of this is really repetitive and shouldn&amp;#39;t require my attention. Ideally I could type a command in Terminal, something like:&lt;/p&gt;
&lt;pre&gt;wp post awesome-blog-post.md&lt;/pre&gt;
&lt;p&gt;Then it would just shoot of to my server and post for me. If I could do this I would write more. I know for a fact that this automation friction is keeping me from posting more on my blog.&lt;/p&gt;
&lt;p&gt;Using a terminal command would mean I could just store my blog&amp;#39;s URL, my username and my password in a local configuration file and everything would work, every time. Another massive time-saver would be not having to wait for page loads as I navigate the WP admin.&lt;/p&gt;
&lt;p&gt;So I&amp;#39;ve concluded &lt;span class=&quot;bold&quot;&gt;WordPress needs better automation&lt;/span&gt;.&lt;/p&gt;
&lt;h2&gt;There are better ways…&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m aware that there are much better platforms for blogging out there, or at least more suitable for a programmer&amp;#39;s workflow (definitely &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt;, maybe &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt; as well). In fact I plan to change my blog setup next time I do a site redesign. But that&amp;#39;s a relatively large project to undertake in say, 20 minutes. So I haven&amp;#39;t made the switch yet.&lt;/p&gt;
&lt;h2&gt;An opportunity&lt;/h2&gt;
&lt;p&gt;So in the end I&amp;#39;ve also come to the conclusion that this would be something very useful to build myself. Since I recently started using Ruby this could be a good opportunity to make something useful from scratch with the language. Still, the same reason I haven&amp;#39;t switched blogging platforms hasn&amp;#39;t changed: where does one find the time…?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JavaScript Everywhere]]></title><link>https://blog.iansinnott.com/javascript-everywhere/</link><guid isPermaLink="false">https://blog.iansinnott.com/javascript-everywhere/</guid><pubDate>Thu, 05 Dec 2013 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Over the past week or so I&amp;#39;ve really been diving into JavaScript to get a deeper understanding of the underlying language (not just jQuery). What I&amp;#39;m realizing, and what prompted me to actually write this, is that Node is clean, unfiltered awesomeness.&lt;/p&gt;
&lt;p&gt;I had been contemplating diving into Ruby for a long time. I&amp;#39;m currently actually auditing a course on Ruby. But once I fired up Node most of that motivation to learn a new back-end language went out the window. The thing is, I really enjoy doing stuff in the terminal and writing scripts that will do things for me. &lt;span class=&quot;bold&quot;&gt;Automation&lt;/span&gt;, as we say. This has prompted me to learn a significant amount of bash scripting (used for Z shell of course), but that has it&amp;#39;s own limitations, and it was never really designed to be good at many of the things I would want to do from the terminal.&lt;/p&gt;
&lt;p&gt;PHP works as a scripting language, and it&amp;#39;s already my go-to language for development, but the lack of well known PHP shell scripts made me wary. Whereas Ruby and Python both have a ton of excellent scripts under their belt, PHP just never seems to have caught on outside of server-side scripting. This may be changing, as Composer makes it abundantly clear that one can do awesome things with PHP on the command line, but I still wanted something different.&lt;/p&gt;
&lt;h2&gt;Enter Node.js&lt;/h2&gt;
&lt;p&gt;I won&amp;#39;t go into the specifics of what it is or does, there&amp;#39;s a whole internet out there that will provide that information. Suffice to say, Node let&amp;#39;s you run JavaScript without a browser. For many developers these days, this means running it on a server. In my case however, this means running it in the terminal.&lt;/p&gt;
&lt;h2&gt;JavaScript is Everywhere Now&lt;/h2&gt;
&lt;p&gt;JavaScript was already making waves before Node, but only as a front-end language that allowed developers to do awesome things in a browser. Still, we then had to send any information back to the server for ‘serious&amp;#39; processing or storing to a database.&lt;/p&gt;
&lt;p&gt;What Node has done, is freed JS from the confines of the browser. By adding allowing it to be used on a server or in a terminal it now has what it needs to truly become ubiquitous. This is all in addition to an emerging trend:&lt;/p&gt;
&lt;h2&gt;Compile Anything to JS&lt;/h2&gt;
&lt;p&gt;Today we have things like CoffeeScript and TypeScript as well as an array of tools for compiling probably anything you would care to develop with to JS. These include compilers for C#, Java, Python, C/C++, etc.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s crazy, it&amp;#39;s awesome and even if there are now more ways than ever to create JS without actually writing it, it&amp;#39;s still an amazingly exciting time to be a JavaScript developer.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Integrating Alfred With Keyboard Maestro]]></title><link>https://blog.iansinnott.com/integrating-alfred-with-keyboard-maestro/</link><guid isPermaLink="false">https://blog.iansinnott.com/integrating-alfred-with-keyboard-maestro/</guid><pubDate>Thu, 14 Nov 2013 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Update 7/6/2015:&lt;/span&gt; I&amp;#39;ve now been using this Alfred workflow for over a year and I still use it &lt;span class=&quot;italic&quot;&gt;every single day&lt;/span&gt;. It&amp;#39;s become vital to my workflow and I highly recommend it to anyone trying to boost their productivity.&lt;/p&gt;
&lt;p&gt;However, other parts of my workflow have evolved quite a bit (such as window management). If you&amp;#39;re interested in a full post on the subject &lt;a href=&quot;https://twitter.com/ian_sinn/&quot;&gt;drop me a line on twitter&lt;/a&gt; or leave a comment at the bottom.&lt;/p&gt;
&lt;p&gt;Now back to the original article.&lt;/p&gt;
&lt;h2&gt;One step closer to a mouse-less workflow&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m going to show you how to integrate Alfred with the excellent Keyboard Maestro. Why? Because I have a vendetta against my mouse and I&amp;#39;m constantly finding new ways to remove it from my workflow entirely. To this end, the discovery of &lt;a href=&quot;http://www.keyboardmaestro.com/main/&quot;&gt;Keyboard Maestro&lt;/a&gt; by &lt;a href=&quot;http://www.stairways.com/main/&quot;&gt;Stairways Software&lt;/a&gt; was a big win.&lt;/p&gt;
&lt;h3&gt;Keyboard Maestro (KM)&lt;/h3&gt;
&lt;p&gt;Super quick introduction: KM makes it easy to assign almost any Mac action to an easy-to-use trigger. It&amp;#39;s a great piece of software and is backed by a friendly and accessible developer, Peter Lewis. Seriously, go check it out right now if you haven&amp;#39;t yet. It&amp;#39;s free to try.&lt;/p&gt;
&lt;h3&gt;Combine &amp;amp; Conquer&lt;/h3&gt;
&lt;p&gt;So, let&amp;#39;s be honest: if you you&amp;#39;re already a Mac power user, you probably have far too many hotkeys rattling around in your brain already. This is especially true if your a developer. KM is an excellent piece of software out of box, but adding more hotkeys to the list of things you must remember might not be the ideal solution. But if we could just name our macros in a memorable way and then call them up at will based on that name we could do amazing things.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Enter &lt;/span&gt;&lt;a class=&quot;bold&quot; href=&quot;http://www.alfredapp.com/&quot;&gt;Alfred&lt;/a&gt;. By combining the functionality of Alfred with the system control of KM you can make your Mac do pretty much anything, &lt;span class=&quot;italic&quot;&gt;very quickly&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Setup&lt;/h3&gt;
&lt;p&gt;To integrate the two, download the workflow I made for this purpose.&lt;/p&gt;
&lt;p&gt;&amp;lt;a class=&amp;quot;btn btn-download&amp;quot; href=&amp;quot;https://github.com/iansinnott/alfred-maestro/raw/master/AlfredMaestro.alfredworkflow&amp;quot;&amp;gt;Download&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;p&gt;You can also &lt;a href=&quot;https://github.com/iansinnott/keyboard%E2%B8%BBmaestro%E2%B8%BBalfred&quot;&gt;download the source&lt;/a&gt; from GitHub if you feel so inclined. Once you have the &lt;code &gt;KeyboardMaestro.alfredworkflow&lt;/code&gt; file just double click it to install it in Alfred. Done!&lt;/p&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;Now, as long as you actually have KM installed you can type &lt;code &gt;km&lt;/code&gt; in the Alfred prompt and then the name of a macro. Here&amp;#39;s a simple example; I really don&amp;#39;t like continually typing out my email, so I made a macro for it:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/email-macro.png?table=block&amp;id=&quot; alt=&quot;Email Macro&quot;/&gt;&lt;figcaption&gt;Email Macro&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Notice that I don&amp;#39;t even have to assign a trigger to it. This is somewhat of a new feature in KM 6.3, and the reason you must have that version or above. This is a great feature as it leaves room for macros that really deserve their own hotkey and doesn&amp;#39;t clutter your mind with unnecessary information. Just type &lt;code &gt;km&lt;/code&gt; into Alfred and then start typing the title of the macro:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/Screen%20Shot%202015-07-06%20at%209.15.08%20PM.png?table=block&amp;id=&quot; alt=&quot;Email macro example&quot;/&gt;&lt;figcaption&gt;Email macro example&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;If I hit enter my email address will be pasted into whatever text I&amp;#39;m editing. This is great for filling forms online. Another one that is use all the time in this same way is date insertion. I always have to think for a second about what the date is. Luckily KM comes to the rescue:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/Screen%20Shot%202015-07-06%20at%209.18.19%20PM.png?table=block&amp;id=&quot; alt=&quot;Date macro&quot;/&gt;&lt;figcaption&gt;Date macro&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Now if I start typing &lt;code &gt;km date:&lt;/code&gt; and hit enter, the date will be inserted in the mm/dd/yyyy format:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/Screen%20Shot%202015-07-06%20at%209.19.00%20PM.png?table=block&amp;id=&quot; alt=&quot;Date macro example&quot;/&gt;&lt;figcaption&gt;Date macro example&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;This example also shows two good examples of the power of KM. First, you get set values, like &lt;code &gt;%NumberDate%&lt;/code&gt; that you can pass in. Second, when you want/need to, you can also assign triggers that are fully independent of Alfred and this workflow.&lt;/p&gt;
&lt;p&gt;To start making your own crazy macros, you should hit the KM docs. I&amp;#39;ll point you specifically to the &lt;a href=&quot;http://www.keyboardmaestro.com/documentation/6/calculations.html&quot;&gt;calculations section&lt;/a&gt;, where you can dive into some of the more obscure functionality (like the &lt;code &gt;SCREEN&lt;/code&gt; function for manipulating application screens. Then from there you can check out the other sections about more general functionality.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;One Last Note:&lt;/span&gt; KM is fully capable of triggering macros by name all on it&amp;#39;s own. See?&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://dropsinn.s3.amazonaws.com/Screen%20Shot%202015-07-06%20at%209.12.29%20PM.png?table=block&amp;id=&quot; alt=&quot;Keyboard Maestro macro by name&quot;/&gt;&lt;figcaption&gt;Keyboard Maestro macro by name&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;So if you&amp;#39;re not an Alfred user, there is a remote possibility that you can get by with just KM. In fact, if you really wanted to you could probably replicate most of Alfred&amp;#39;s functionality entirely with KM, but why bother?&lt;/p&gt;
&lt;p&gt;The other reason to use these two programs together is the Active community behind Alfred. This community means you can usually find a workflow to help with whatever your looking to accomplish. Community involvement however is much more limited with KM. This is surprising, considering the built in ‘Export macro&amp;#39; functionality. KM does have an &lt;a href=&quot;http://www.keyboardmaestro.com/main/macro%E2%B8%BBlibrary&quot;&gt;existing macro library&lt;/a&gt;, but I&amp;#39;m not sure how many users know about it. That said, this certainly isn&amp;#39;t a deal breaker. It&amp;#39;s not difficult to make macros in KM, and there &lt;span class=&quot;italic&quot;&gt;is&lt;/span&gt; an active community that I think would be happy to contribute macros if there was a well-known, central location at which to share them.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Keyboard Maestro and Alfred make an amazing combination. If you don&amp;#39;t have them already, get them now! I myself have &amp;lt;del&amp;gt;just started using it&amp;lt;/del&amp;gt; been using it for &lt;span class=&quot;bold&quot;&gt;well over a year&lt;/span&gt;. I have a ton more functionality planned with this app that I haven&amp;#39;t gotten around to implementing (system-wide Vim bindings anyone?). Moreover, as I mentioned before, the developer Peter Lewis is very accessible. When I first showed him how my workflow was inherently limited by KM itself, he added the necessary functionality and shipped it a few days later with KM 6.3! That&amp;#39;s amazing.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;One last note:&lt;/span&gt; If you have any issues with this plugin head over to the &lt;a href=&quot;https://github.com/iansinnott/keyboard%E2%B8%BBmaestro%E2%B8%BBalfred/issues&quot;&gt;issues section of my GitHub repo&lt;/a&gt; and let me know. And if you you find it useful, &lt;a href=&quot;https://github.com/iansinnott/keyboard%E2%B8%BBmaestro%E2%B8%BBalfred&quot;&gt;starring the repo&lt;/a&gt; on GitHub is a great way to say thanks. Have fun 😎&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Getting Productive With Fish Shell]]></title><link>https://blog.iansinnott.com/getting-productive-with-fish-shell/</link><guid isPermaLink="false">https://blog.iansinnott.com/getting-productive-with-fish-shell/</guid><pubDate>Mon, 11 Nov 2013 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Today I took it upon myself to try out the very new and very cool looking &lt;a href=&quot;http://fishshell.com/&quot;&gt;Fish Shell&lt;/a&gt;. This is the second time I have taken it upon myself to really dive into the customization of my Terminal and after the fact I&amp;#39;m left with much the same feeling as the first time: I feel like I didn&amp;#39;t get anything done today.&lt;/p&gt;
&lt;p&gt;This experience made me think a bit about a certain habit I have to get really dive into my workflow and try to find areas that are lacking or could be more efficient. The first time I did this was after watching a great &lt;a href=&quot;https://peepcode.com/products/advanced%E2%B8%BBcommand%E2%B8%BBline&quot;&gt;tutorial by PeepCode&lt;/a&gt; on the advanced ways I could use the command line. The whole video was about how to use [Bash], and then at the very end they recommend that those who want more serious customization should check out something called &lt;a href=&quot;http://en.wikipedia.org/wiki/Z_shell&quot;&gt;Z shell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That recommendation led me on an all-day adventure learning Z shell customization. The real killer feature of Z shell actually turned out to be the community involvement, and the GitHub users who were putting out easy-to-use plugins for the esoteric shell. The project is called &lt;a href=&quot;https://github.com/robbyrussell/oh%E2%B8%BBmy%E2%B8%BBzsh&quot;&gt;oh my zsh&lt;/a&gt;, and it&amp;#39;s a great place to start for anyone who wants a more usable terminal.&lt;/p&gt;
&lt;p&gt;The point being, there was recently an announcement on Hacker News that someone had started a &lt;a href=&quot;https://github.com/bpinto/oh%E2%B8%BBmy%E2%B8%BBfish&quot;&gt;similar project&lt;/a&gt; for this new shell called Fish. As soon as I saw that, a big chunk of my time for the day went out the window. I knew if I started looking into the code and the various customizations I would lose many hours of the day, but I couldn&amp;#39;t resist. I LOVE improving my workflow.&lt;/p&gt;
&lt;h2&gt;One shell to rule them all&lt;/h2&gt;
&lt;p&gt;Like most developers I spend a lot of time in the Terminal, and it can be a pain. Fish shell actually offers code-completion in the terminal as you type. This is a step up from Z shell which would offer decent tab completion but would not print out suggestions for you as you type. What&amp;#39;s not great about Z shell is that much like bash customizing it can be a real pain. Fish on the other hand simplifies customization by making everything a function, and making functions easily definable. Here&amp;#39;s an example of one I use often with Git:&lt;/p&gt;
&lt;pre&gt;function gg -d &amp;quot;Commit all&amp;quot;
git commit -v -a -m &amp;quot;$argv&amp;quot;
end&lt;/pre&gt;
&lt;p&gt;The first line defines the function &lt;code &gt;gg&lt;/code&gt;, and then is passed the optional description option &lt;code &gt;-d&lt;/code&gt;. This isn&amp;#39;t really important, but it provides a nice and easy way to add a bit of text to remind yourself what the hell these two letters do. When you type &lt;code &gt;gg&lt;/code&gt; into the command line and hit tab this description will pop up next to it. Anyway, the second line is easy, it&amp;#39;s just a git command with a few options passed. The only part that has to do with Fish shell is the &lt;code &gt;$argv&lt;/code&gt; variable which is a ‘list&amp;#39; of arguments that you pass. In this case I wrap it in &lt;code &gt;&amp;quot;&lt;/code&gt; (double quotes) so that I don&amp;#39;t have to do that myself. The third line just ends the block. Now I can type something like this:&lt;/p&gt;
&lt;pre&gt;git add .
gg Initial Commit&lt;/pre&gt;
&lt;p&gt;And my commit is done without having to type the usual annoying &lt;code &gt;&amp;quot;&lt;/code&gt; or &lt;code &gt;-m&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What&amp;#39;s also great though, is that Fish shell comes with a predefined function called &lt;code &gt;alias&lt;/code&gt; that supports the exact same syntax you used in Bash or Z shell. So for all those aliases sitting in your old config file you can just copy them over and be done. Or if you don&amp;#39;t have any incompatible code in your alias file (i.e. bash or zsh functions) that would cause things to break, then just source it using the &lt;code &gt;.&lt;/code&gt; syntax. Sidenote: Fish doesn&amp;#39;t seem to support the familiar &lt;code &gt;source&lt;/code&gt; keyword, you have to use the shorthand &lt;code &gt;.&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Caveats&lt;/h2&gt;
&lt;p&gt;Two things I&amp;#39;ve noticed so far that I&amp;#39;m not super thrilled about:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Often have to type &lt;code &gt;cd&lt;/code&gt; to change directory&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;No official support for Vim-like editing on the command line&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;That first one is probably customizable somehow but I just didn&amp;#39;t put time into figuring out how. It&amp;#39;s a feature of Z shell that you can choose to omit &lt;code &gt;cd&lt;/code&gt; before typing out a directory name and it will know what you mean.&lt;/p&gt;
&lt;p&gt;The second one isn&amp;#39;t a huge issue either, because Vim integration with the command line doesn&amp;#39;t actually provide any massive boost to productivity or usability. It&amp;#39;s nice, to be sure, but Vim really shines when editing longer documents. When using the command line I don&amp;#39;t make many typos so most of what I&amp;#39;m doing is entering text not editing it.&lt;/p&gt;
&lt;p&gt;The second one isn&amp;#39;t a huge issue either, because Vim integration with the command line doesn&amp;#39;t actually provide any massive boost to productivity or usability. It&amp;#39;s nice to be sure, but&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So that&amp;#39;s it. My experience so far has been good, and hopefully all the time I spent today customizing this will pay off in future productivity.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Page reloads are a thing of the past]]></title><link>https://blog.iansinnott.com/page-reloads-are-a-thing-of-the-past/</link><guid isPermaLink="false">https://blog.iansinnott.com/page-reloads-are-a-thing-of-the-past/</guid><pubDate>Thu, 07 Nov 2013 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I occurred to me recently as I have been delving deeper into JavaScript and Backbone.js that single-page applications are the future. I say this because when I look back at older web pages they usually have some distinctive characteristics that instantly grant them outdated status. For instance:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Table-based layouts&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;HTML-based styling&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Unresponsive, etc..&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I believe full-page reloads will belong on this list before too long.&lt;/p&gt;
&lt;h2&gt;No, but seriously&lt;/h2&gt;
&lt;p&gt;Have you ever used &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt;? If you haven&amp;#39;t, it&amp;#39;s a really promising blogging platform that recently got released to the public and has scored six-digit funding on Kickstarter. I&amp;#39;m still using WordPress for this blog, but after a few minutes using Ghost I could say it was a vast improvement. This isn&amp;#39;t a review, so I won&amp;#39;t get into the specifics except to say that it built with JavaScript, so it runs like an app not a web page.&lt;/p&gt;
&lt;h2&gt;The issue with browser reloads&lt;/h2&gt;
&lt;p&gt;They are &lt;span class=&quot;bold&quot;&gt;slow&lt;/span&gt;. That is really all I need to say. I spend a lot of time developing on my local server, where page reloads are as fast as possible, and it still feels slow after a while. Even when all the files are stored locally,there&amp;#39;s still an amount of time that must be consumed for the browser to do a reload. And for what? Most elements on a given page, especially a blog, don&amp;#39;t actually change from page to page. The header, footer and often the sidebar are all the same page-to-page. So why reload all those assets for nothing? It&amp;#39;s a waste.&lt;/p&gt;
&lt;p&gt;The other issue is that they are unnecessary. Through the use of AJAX we can accomplish pretty much anything we want on the back-end without actually reloading the page. Just send the necessary information, parse the response and update the page. Simple.&lt;/p&gt;
&lt;p&gt;Admittedly this might not be &lt;span class=&quot;italic&quot;&gt;as&lt;/span&gt; simple as just using page reloads but the user experience would suffer. Look at some of the largest commercial websites right now (Google, Facebook, Twitter, etc.) and see how many make extensive use of AJAX to minimize page reloads. Google&amp;#39;s instant search and maps are both good examples. Twitter uses a ton of AJAX on their pages and Facebook, although still making use of numerous page reloads has decreased the number significantly over the years.&lt;/p&gt;
&lt;h2&gt;When?&lt;/h2&gt;
&lt;p&gt;That&amp;#39;s hard to say. Terrible websites will always exist, as will websites that inevitably fall into disuse and never get updated, so reloads never disappear entirely. However, the explosion of awesome JavaScript libraries along with the increasing power of online applications is also making it ever simpler to implement advanced front-end functionality. Not to mention the fact that &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; now allows anyone to use JS for both the front and back-end.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m admittedly not an expert on the nitty-gritty of HTTP requests so if anyone wants to point out an aspect that I&amp;#39;m overlooking, feel free to do so below.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Learn Vim & Code Like a Boss]]></title><link>https://blog.iansinnott.com/learn-vim-and-code-like-a-boss/</link><guid isPermaLink="false">https://blog.iansinnott.com/learn-vim-and-code-like-a-boss/</guid><pubDate>Fri, 09 Aug 2013 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Learn Vim and remove the trackpad from your workflow&lt;/h2&gt;
&lt;p&gt;Since your here, you probably alredy want to learn the amazing editing software that is Vim. But if you haven&amp;#39;t yet decided to take the plunge, here are three reasons to start &lt;span class=&quot;italic&quot;&gt;today&lt;/span&gt;.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Code Faster, better and maybe even stronger.&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Code easily on any system.&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Understand the command line (you will need it later)&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;This article is also the base for an upcoming article on being insanely productive on a Mac and eliminating the trackpad from your workflow (almost) entirely.&lt;/p&gt;
&lt;blockquote&gt;But Ian, isn&amp;#39;t Vim a productivity killer for new users?&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;No.&lt;/span&gt; Vim only hurts productivity if you are very hardcore about learning the esoteric commands as quickly as possible. People assume learning Vim involves a mandatory dive into the deep end. That&amp;#39;s &lt;span class=&quot;italic&quot;&gt;not true&lt;/span&gt;, and I&amp;#39;m going to show you why.&lt;/p&gt;
&lt;h2&gt;Quck setup (Updated)&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;Download &lt;a href=&quot;http://www.sublimetext.com/3&quot;&gt;Sublime Text&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Either &lt;a href=&quot;http://www.sublimetext.com/docs/2/vintage.html&quot;&gt;enable vintage mode&lt;/a&gt; or install the &lt;a href=&quot;https://github.com/guillermooo/Vintageous&quot;&gt;Vintageous plugin&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;Enabling Vintage mode in Sublime involves a very quick edit to your user preferences file. See the link above for the official instructions. Vintageous is actually better, but I believe it&amp;#39;s only compatible with Sublime Text 3, so to install it you have to manually bring it into your Plugins folder for ST3. The creator gives good instructions on his GitHub page. If you know git already this is super simple to set up.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Note:&lt;/span&gt; You can of course use the real Vim if you prefer, but having access to a full on text editor makes the transition much easier and keeps you from loosing productivity during the transition. Another option for Mac users is &lt;a href=&quot;https://code.google.com/p/macvim/&quot;&gt;MacVim&lt;/a&gt;. I&amp;#39;ve never used it but heard good things.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Update:&lt;/span&gt; The people over at Square recently published a great Vim starter kit for those who want to get set up very quickly with the real thing. If you&amp;#39;re interested in learning Vim in it&amp;#39;s native environment, check out &amp;lt;a href=&amp;quot;https://github.com/square/maximum-awesome&amp;quot; title=&amp;quot;Maximum awesome by square&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Maximum Awesome&amp;lt;/a&amp;gt;.&lt;/p&gt;
&lt;h2&gt;Let&amp;#39;s get started with movement&lt;/h2&gt;
&lt;p&gt;Movement in Vim is accomplished a number of ways. The most simple way is using the keyboard equivalent of the directional keys (I know the directional keys are technically on the keyboard as well, but you will be training yourself not to use them. Just bare with me!).&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Quick Note:&lt;/span&gt; To switch modes between normal and insert mode use the &lt;code &gt;Esc&lt;/code&gt; and &lt;code &gt;i&lt;/code&gt; keys. I&amp;#39;m just mentioning offhand in case you feel the need to switch modes immediately. I&amp;#39;ll cover modes bellow, just know that you must be in &amp;#39;normal&amp;#39; mode to move with the keys.&lt;/p&gt;
&lt;h3&gt;Vim Directional Keys&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;h&lt;/code&gt;, &lt;code &gt;j&lt;/code&gt;, &lt;code &gt;k&lt;/code&gt; and &lt;code &gt;l&lt;/code&gt; equate to left, up, down and right respectively.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;If you&amp;#39;re following along, try it out. It will feel strange at first.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Here&amp;#39;s a tip:&lt;/span&gt; Don&amp;#39;t take your fingers of the keys they would usually rest on (&lt;code &gt;jkl;&lt;/code&gt;). You may initially think you need four fingers on the four directional keys, but you don&amp;#39;t. You will find that reaching over with the index finger when you need &lt;code &gt;h&lt;/code&gt; is not that great a challenge.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s cool right? No? I agree. It&amp;#39;s slow, but you will probably only use &lt;code &gt;h&lt;/code&gt; for minute movements of the cursor to the left. You will be surprised how little you actually need it, once you know the rest of the movement keys. Now let&amp;#39;s talk about the faster ways of getting around.&lt;/p&gt;
&lt;h3&gt;Words, line-search and text-search&lt;/h3&gt;
&lt;p&gt;To navigate forward or backward word-wise, use these three keys: &lt;code &gt;w&lt;/code&gt;, &lt;code &gt;e&lt;/code&gt;, &lt;code &gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These all have built in mnemonics to help you keep theme straight.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;w&lt;/code&gt;: Move forward to the start of the next &lt;span class=&quot;bold&quot;&gt;word&lt;/span&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;e&lt;/code&gt;: Move forward to the &lt;span class=&quot;bold&quot;&gt;end&lt;/span&gt; of the word.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;b&lt;/code&gt;: Move &lt;span class=&quot;bold&quot;&gt;backward&lt;/span&gt; one word.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The capital versions of these, &lt;code &gt;W&lt;/code&gt;, &lt;code &gt;E&lt;/code&gt;, &lt;code &gt;B&lt;/code&gt;, to the same thing but you get bigger chunks of characters with each key press because they use whitespace to differentiate words instead of a set of characters. Don&amp;#39;t worry about that for now, you will figure it out without my help.&lt;/p&gt;
&lt;p&gt;Ready to get crazy? Use &lt;code &gt;f&lt;/code&gt; and &lt;code &gt;t&lt;/code&gt; to jump to a specific character on the current line. Use &lt;code &gt;;&lt;/code&gt; and &lt;code &gt;,&lt;/code&gt; to repeat forward and backward.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;fA&lt;/code&gt;: Moves the cursor to the next &lt;span class=&quot;italic&quot;&gt;capital A&lt;/span&gt; (&lt;code &gt;A&lt;/code&gt;) in the line.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;;&lt;/code&gt;: Move to the &lt;span class=&quot;italic&quot;&gt;next&lt;/span&gt; occurrence of &lt;code &gt;A&lt;/code&gt; if that was your last &lt;code &gt;f&lt;/code&gt; command.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;,&lt;/code&gt;: Move to the &lt;span class=&quot;italic&quot;&gt;previous&lt;/span&gt; occurrence of &lt;code &gt;A&lt;/code&gt; (I.e. do the same search to the left of the cursor instead of to the right).&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;t&amp;quot;&lt;/code&gt;: Moves to cursor to the character &lt;span class=&quot;italic&quot;&gt;immediately before&lt;/span&gt; the next &lt;code &gt;&amp;quot;&lt;/code&gt; in the line. &lt;code &gt;;&lt;/code&gt; and &lt;code &gt;,&lt;/code&gt; work just the same as with &lt;code &gt;f&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;code &gt;F&lt;/code&gt; and &lt;code &gt;T&lt;/code&gt; function the same but do the initial search to the left of the cursor. Consequently, using &lt;code &gt;;&lt;/code&gt; will consider the next occurrence to also be to the left of the current position, while &lt;code &gt;,&lt;/code&gt; will be to the right. This can sound confusing on paper, but once you use it it will make sense very quickly.&lt;/p&gt;
&lt;p&gt;The larger implications of these will become more clear later on once we start &lt;span class=&quot;bold&quot;&gt;deleting&lt;/span&gt; and &lt;span class=&quot;bold&quot;&gt;changing&lt;/span&gt; text. For now just know that this stuff is important.&lt;/p&gt;
&lt;p&gt;Now the real speed booster: text-search. Use &lt;code &gt;/&lt;/code&gt; and &lt;code &gt;?&lt;/code&gt; to search for any string within the current open document (buffer). This is &lt;span class=&quot;italic&quot;&gt;case sensitive&lt;/span&gt; by default. Don&amp;#39;t worry, you can change that later.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;/class&lt;/code&gt;: Moves the cursor to the &lt;span class=&quot;italic&quot;&gt;next&lt;/span&gt; occurrence of the string &lt;code &gt;class&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;?id&lt;/code&gt;: Moves to the &lt;span class=&quot;italic&quot;&gt;previous&lt;/span&gt; occurrence of the string &lt;code &gt;id&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;If you&amp;#39;ve used Sublime Text before, these commands function much like the built in &amp;#39;Incremental Search&amp;#39; functionality, so you may not be floored by this efficiency. Either way, this is Vim so learn it. Now let&amp;#39;s change some stuff.&lt;/p&gt;
&lt;h2&gt;Changing and deleting text&lt;/h2&gt;
&lt;p&gt;As you noticed with many of the other keys, Vim likes to give you built in mnemonics where possible. Changing and deleting text are no exceptions to this rule. Use &lt;code &gt;c&lt;/code&gt; to &amp;#39;change&amp;#39; text and &lt;code &gt;d&lt;/code&gt; to delete.&lt;/p&gt;
&lt;blockquote&gt;&lt;span class=&quot;italic&quot;&gt;Change&lt;/span&gt; text.. ?&lt;/blockquote&gt;
&lt;p&gt;Yeah, changing text tells Vim to delete it, and then enter insert mode so you can enter new text. Thus &lt;span class=&quot;italic&quot;&gt;changing&lt;/span&gt; the text. You could accomplish the same by deleting the text with a movement + &lt;code &gt;d&lt;/code&gt; and then entering insert mode with &lt;code &gt;i&lt;/code&gt;. Let&amp;#39;s see some basic examples. I&amp;#39;ll use an &lt;code &gt;*&lt;/code&gt; (asterisk) to show you where the is when the command is typed:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code &gt;This is a *blog&lt;/code&gt; : Typing &lt;code &gt;cw&lt;/code&gt; will &amp;#39;&lt;span class=&quot;italic&quot;&gt;change&lt;/span&gt; the &lt;span class=&quot;italic&quot;&gt;word&lt;/span&gt;&amp;#39;.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Since the cursor is at the beginning of &amp;#39;blog&amp;#39; this would then change the word &amp;#39;blog&amp;#39;. So if you first type &lt;code &gt;cw&lt;/code&gt; followed by &lt;code &gt;house&lt;/code&gt; the new string will look like &lt;code &gt;This is a house&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code &gt;c&lt;/code&gt; command really shines in my opinion when you want to change text between two dellimeters. So maybe you have some HTML that looks like:&lt;/p&gt;
&lt;pre&gt;&amp;lt;div class=&amp;quot;so many damny classes on this div&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/pre&gt;
&lt;p&gt;But maybe you decided that many classes is a little rediculous and you consolodated the CSS into a single class called &lt;code &gt;single-class&lt;/code&gt;. Now to apply this class, normally we might use the mouse to select everythign inside those double-quotes. Unfortunately, that&amp;#39;s slow. With Vim, we get to use the awesome &amp;#39;inner&amp;#39; command to select everything &lt;span class=&quot;italic&quot;&gt;inside&lt;/span&gt; a delimmiter. Here that delimiter is &lt;code &gt;&amp;quot;&lt;/code&gt;. So if we type:&lt;/p&gt;
&lt;p&gt;&lt;code &gt;ci&amp;quot;&lt;/code&gt; followed by &lt;code &gt;single-class&lt;/code&gt; get the result we want super quickly:&lt;/p&gt;
&lt;pre&gt;&amp;lt;div class=&amp;quot;single-class&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/pre&gt;
&lt;blockquote&gt;Like a boss!&lt;/blockquote&gt;
&lt;p&gt;Yup. This generally works great with things like &lt;code &gt;(&lt;/code&gt;, &lt;code &gt;)&lt;/code&gt;, &lt;code &gt;{&lt;/code&gt;, &lt;code &gt;}&lt;/code&gt;, &lt;code &gt;&amp;#39;&lt;/code&gt;, &lt;code &gt;&amp;quot;&lt;/code&gt; and HTML tags. For that last one, the syntax is &lt;code &gt;cit&lt;/code&gt;. Think of it as &amp;#39;change inner tag&amp;#39;, and commit it to memory. If you code HTML, XML or anything else with tags, &lt;code &gt;cit&lt;/code&gt; will become your new best friend.&lt;/p&gt;
&lt;h3&gt;Deleting Text&lt;/h3&gt;
&lt;p&gt;You can often think of the &lt;code &gt;d&lt;/code&gt; key the same way you think of &lt;code &gt;c&lt;/code&gt;, except you don&amp;#39;t end up in insert mode. Use &lt;code &gt;d&lt;/code&gt; when you want to delete a group of text but don&amp;#39;t necessarily want to replace it right away. In the above example of &lt;code &gt;cw&lt;/code&gt;, using &lt;code &gt;dw&lt;/code&gt; instead would have simply deleted the word. I often find &lt;code &gt;d&lt;/code&gt; works wonders when combined with inline-search using &lt;code &gt;t&lt;/code&gt; or &lt;code &gt;f&lt;/code&gt;. Example:&lt;/p&gt;
&lt;pre&gt;$var = func(nested_fun($other_var));&lt;/pre&gt;
&lt;p&gt;Given a line like that above, how would you go about deleting everything after the &lt;code &gt;=&lt;/code&gt; sign? If you&amp;#39;re coding in a language that uses a fairly unique line-ending character like &lt;code &gt;;&lt;/code&gt; then your in luck. With the cursor in normal mode under the &lt;code &gt;=&lt;/code&gt;, you can type &lt;code &gt;dt;&lt;/code&gt; to plow through that nested function nonsense and make room for something new. Speaking of which, if you wanted to change the assigned value of &lt;code &gt;$var&lt;/code&gt; and wanted to save a step, you could use &lt;code &gt;ct;&lt;/code&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The WP_Post Object]]></title><link>https://blog.iansinnott.com/the-wp_post-object/</link><guid isPermaLink="false">https://blog.iansinnott.com/the-wp_post-object/</guid><pubDate>Sat, 15 Jun 2013 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a quick reference for myself and anyone else who commonly uses the WP_Post object in WordPress. I find that I often forget exactly what attributes this object has so I finally decided to just make a post about it and save my future self having to dump the var to remember. Here it is:&lt;/p&gt;
&lt;pre&gt;WP_Post Object
(
[ID] =&amp;gt; 252
[post_author] =&amp;gt; 81
[post_date] =&amp;gt; 2013-06-13 09:27:19
[post_date_gmt] =&amp;gt; 2013-06-13 09:27:19
[post_content] =&amp;gt;
[post_title] =&amp;gt; Mac Mall, 1be/5ba
[post_excerpt] =&amp;gt;
[post_status] =&amp;gt; publish
[comment_status] =&amp;gt; open
[ping_status] =&amp;gt; open
[post_password] =&amp;gt;
[post_name] =&amp;gt; mac-mall-1be5ba
[to_ping] =&amp;gt;
[pinged] =&amp;gt;
[post_modified] =&amp;gt; 2013-06-13 09:27:19
[post_modified_gmt] =&amp;gt; 2013-06-13 09:27:19
[post_content_filtered] =&amp;gt;
[post_parent] =&amp;gt; 0
[guid] =&amp;gt; http://orangefinders.dev/listing/mac-mall-1be5ba/
[menu_order] =&amp;gt; 0
[post_type] =&amp;gt; listing
[post_mime_type] =&amp;gt;
[comment_count] =&amp;gt; 0
[filter] =&amp;gt; raw
)&lt;/pre&gt;
&lt;p&gt;This is the result of calling &lt;code &gt;print_r()&lt;/code&gt; on a &lt;code &gt;WP_Post&lt;/code&gt; object. Enjoy.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[WordPress Development Server - Full Set Up Guide]]></title><link>https://blog.iansinnott.com/wordpress-development-server---full-set-up-guide/</link><guid isPermaLink="false">https://blog.iansinnott.com/wordpress-development-server---full-set-up-guide/</guid><pubDate>Thu, 30 May 2013 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Unleashing your WordPress Development Server&lt;/h2&gt;
&lt;p&gt;So you want to escape inclusive packages like MAMP, learn about web servers and generally code like a boss? Well if you use a Mac your in the right place, but guess what we need before we get started? A local development environment! If you don&amp;#39;t know what that is, read the next paragraph. If you do, then skip down. Even if you already have a local dev server set up this will still be useful knowledge should you want to untether yourself from MAMP or any other AMP stack bundle.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Windows Users:&lt;/span&gt; This article is about setting up a local dev environment on Mac OSX 10.8. You will also need to get an AMP stack up and running but I&amp;#39;m not familiar with Windows so I&amp;#39;m just going to recommend &lt;a href=&quot;http://bitnami.org/stack/wamp&quot;&gt;WAMP&lt;/a&gt; (sigh).&lt;/p&gt;
&lt;h2&gt;The Local Dev Environment&lt;/h2&gt;
&lt;p&gt;When you code in PHP you need somewhere to test your work as you go along. This is where the local dev server comes in. You will also need a local dev server if you do any sort of online development. What the local dev server is… is just that: a server that runs on your computer. When you buy web hosting your paying for disk space on someone else&amp;#39;s server. That server is running server-side software that let&amp;#39;s you do many things, like using PHP and MySQL. So we&amp;#39;re going to set up the same thing running from our own computer. This means web files (.php, .html, etc.) on your own hard drive will be hosted and served to your browser. &lt;span class=&quot;bold&quot;&gt;Let&amp;#39;s go!&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;This tutorial&lt;/h3&gt;
&lt;p&gt;There are so many tutorials on this subject out there, so why read this one… I&amp;#39;ll tell you: Because most of the rest suck. Notice how I said most. I will refer in this lesson to some tutorials elsewhere that are actually very useful. Also, I will be focusing on setting up a professional dev environment, free of MAMP or XAMP or whatever else is out there. If you&amp;#39;ve ever seen/used MAMP Pro this is essentially setting up the same thing without a GUI. And my way is free!&lt;/p&gt;
&lt;p&gt;There is also the added benefit that you get to better understand your server, learn a bit of terminal and in the end feel a huge sense of accomplishment (maybe). So with that, let&amp;#39;s see what we will need to get started.&lt;/p&gt;
&lt;h3&gt;Necessary Ingredients&lt;/h3&gt;
&lt;p&gt;Todays recipe is fairly simple in prep, more difficult later on in pickup. Her&amp;#39;s what we need (follow the links to download):&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;phpMyAdmin (maybe not &amp;#39;required&amp;#39; but you want it)&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;MySQL&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;An open Terminal window (../Applications/Utilities/Terminal.app)&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Disclaimer:&lt;/span&gt; This tutorial is for Mac OSX 10.8. I&amp;#39;ve seen it work on 10.6 and 10.7 but you may run into bugs that I don&amp;#39;t solve in this post.&lt;/p&gt;
&lt;p&gt;Now let&amp;#39;s get cooking! The first step is in Terminal. Before we really delve in we want to make a backup copy of the files we&amp;#39;re going to edit. Skip this step if you like, but do so at your own peril. I don&amp;#39;t want to see angry comments later saying I broke your machine.&lt;/p&gt;
&lt;h3&gt;Step 0: Setup / Backup&lt;/h3&gt;
&lt;p&gt;If it doesn&amp;#39;t already exit, make a file under your home directory called &lt;code &gt;Sites&lt;/code&gt;. This is going to be the root of your server, and where you will store all your sites. In this new folder make another folder called something like &amp;#39;server-backup&amp;#39;. This is where we will backup to.&lt;/p&gt;
&lt;p&gt;The three files we will be editing are:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code &gt;httpd.conf&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;&lt;code &gt;httpd-vhosts.conf&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;&lt;code &gt;[username].conf&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;That last one is specific to you. During this post if I write &amp;#39;[username]&amp;#39; what I mean is your own username on the system. You can find this if you don&amp;#39;t know it by typing &lt;code &gt;whoami&lt;/code&gt; into terminal and hitting return.&lt;/p&gt;
&lt;p&gt;So to backup these files do the following commands.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code &gt;cp /etc/apache2/httpd.conf ~/Sites/server-backup&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;&lt;code &gt;cp /etc/apache2/extra/httpd-vhosts.conf ~/Sites/server-backup&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;&lt;code &gt;cp /etc/apache2/users/[username].conf ~/Sites/server-backup&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;That last command may or may not work because you may not have created the [username].conf file yet. Don&amp;#39;t worry, we&amp;#39;ll get to that soon.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;One last setup step:&lt;/span&gt; You will need to be able to open files for editing &lt;span class=&quot;italic&quot;&gt;from the Terminal&lt;/span&gt;. You can use whatever editor you want. My favorite is &lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;Sublime Text 2&lt;/a&gt;. I wrote a quick &lt;a href=&quot;http://iansinnott.com&quot;&gt;writeup on SB2&lt;/a&gt; that you can check out if your interested. To see how to set up sublime for terminal use, check out this &lt;a href=&quot;https://gist.github.com/artero/1236170&quot;&gt;Gist on GitHub&lt;/a&gt;. If you don&amp;#39;t want to do anything like that and just want to get moving, use nano. It&amp;#39;s built in to Terminal. Use it by typing something like the following:&lt;/p&gt;
&lt;pre&gt;nano [filename]&lt;/pre&gt;
&lt;p&gt;Where &amp;#39;[filename]&amp;#39; would be the file you want to open and edit. It&amp;#39;s a bit esoteric so I don&amp;#39;t recommend it, but it&amp;#39;s built into your computer.&lt;/p&gt;
&lt;h3&gt;Step 1: Enabling Apache&lt;/h3&gt;
&lt;p&gt;Open up Terminal. Then use the following command to start Apache:&lt;/p&gt;
&lt;pre&gt;sudo apachectl start&lt;/pre&gt;
&lt;p&gt;Now fire up your favorite browser and make sure everything is in order. In the nav bar type &amp;lt;a href=&amp;quot;http://localhost&amp;quot;&amp;gt;http://localhost&amp;lt;/a&amp;gt;. You should see something like this displaying the text “It Works!”:&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;http://coolestguyplanettech.com/downtown/sites/default/files/itworks.png&amp;quot; alt=&amp;quot;it works apache&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;Now that we&amp;#39;re all set there, let&amp;#39;s see what we&amp;#39;re looking at. Localhost is the default web root for your local server. The file being displayed can be found here:&lt;/p&gt;
&lt;pre&gt;/Library/WebServer/Documents/&lt;/pre&gt;
&lt;p&gt;This is the system root, but we want to get your user root directory running properly. That&amp;#39;s the next step.&lt;/p&gt;
&lt;h3&gt;The User Root&lt;/h3&gt;
&lt;p&gt;Remember the &amp;#39;Sites&amp;#39; folder you created? Open finder and get to it. If you haven&amp;#39;t made that file yet for some reason, create it now and name it &amp;#39;Sites&amp;#39;. Here&amp;#39;s a pic I pulled from Google. You can see the Sites folder at the bottom.&lt;/p&gt;
&lt;h3&gt;Set Up Development Folders&lt;/h3&gt;
&lt;p&gt;Now within the Sites folder you need to create all the folders you want to be able to serve to your local browser. You can make as many as you want. For instance, my sites folder contains wp1.dev, wp2.dev, etc. I also have a folder named ian.dev where I keep the local installation of my personal site for editing. Name these folders whatever you want. The point is that each one will eventually contain a full site. Just name the folder something that you don&amp;#39;t mind typing into a browser (i.e. something short).&lt;/p&gt;
&lt;p&gt;&amp;lt;a href=&amp;quot;http://phpbackward.files.wordpress.com/2013/01/home-folder.jpeg&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://phpbackward.files.wordpress.com/2013/01/home-folder.jpeg?w=300&amp;quot; alt=&amp;quot;Making the sites folder&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;p&gt;This is the home folder for the user &amp;#39;admin&amp;#39;.&lt;/p&gt;
&lt;p&gt;Now it&amp;#39;s time to get serious. We need to edit your computers hosts file so that when we actually type these addresses into the browser they are redirected. To edit the hosts file do this:&lt;/p&gt;
&lt;pre&gt;sudo subl /private/etc/hosts&lt;/pre&gt;
&lt;p&gt;Or, if you are using nano do this:&lt;/p&gt;
&lt;pre&gt;sudo nano /private/etc/hosts&lt;/pre&gt;
&lt;p&gt;&amp;lt;p&amp;gt;It doesn&amp;#39;t matter what is currently in there, but don&amp;#39;t delete anything. What were going to do is add some lines to the bottom. You need to add &amp;#39;127.0.0.1&amp;amp;#8242; followed by the name of one of the folders you just created. So for my wp1.dev site I have a line in my hosts file that reads &amp;#39;127.0.0.1 wp1.dev&amp;#39;. Here&amp;#39;s a bit of my hosts file:&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;pre&gt;127.0.0.1 ian.dev
127.0.0.1 wp1.dev
127.0.0.1 wp2.dev
127.0.0.1 wp3.dev&lt;/pre&gt;
&lt;p&gt;&amp;lt;p&amp;gt;You see that I have my personal site plus three development servers. This list actually goes all the way to wp15.dev, but you get the point. I recommend creating more of these aliases than you think you will need so you don&amp;#39;t have to come back and edit hosts later. As I&amp;#39;ll show you in a bit, this allows me to simply create a new folder in Sites with one of these names and bam! a new site is good to go. Now save hosts and exit Sublime or whatever text editor your in.&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;p&amp;gt;Jump into Terminal and do the following two commands:&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;pre&gt;cd /etc/apache2/users
sudo nano username.conf&lt;/pre&gt;
&lt;p&gt;You will need to enter your password to use sudo commands. For anyone not familiar with the Terminal, the first line gets us to the right folder and the second line opens up the file for editing. Past in the following, but remember to put your username in the place of &amp;#39;your_user_name&amp;#39;. For me it&amp;#39;s /Users/Ian/Sites/:&lt;/p&gt;
&lt;pre&gt;&amp;lt;Directory &amp;quot;/Users/ian/Sites/&amp;quot;&amp;gt;
Options Indexes MultiViews FollowSymLinks
AllowOverride All AuthConfig
Order allow,deny
Allow from all
&amp;lt;/Directory&amp;gt;&lt;/pre&gt;
&lt;p&gt;Now save the changes and close out of nano. Your editing window will show you the hotkeys you need at the bottom. It will probably prompt you to name your file when you save. Keep the name unchanged so that we overwrite the original.&lt;/p&gt;
&lt;p&gt;Now check the permissions on the file you just edited. To do that type &lt;code &gt;ls -lah&lt;/code&gt; in Terminal. As long as you&amp;#39;re in the right directory already, it should look something like this:&lt;/p&gt;
&lt;pre&gt;-rw-r--r--  1 root  wheel  148 12 28 21:11 username.conf&lt;/pre&gt;
&lt;p&gt;If the permissions come up with anything other than &lt;code &gt;-rw-r--r--&lt;/code&gt; use this next command to fix them:&lt;/p&gt;
&lt;pre&gt;sudo chmod 644 username.conf&lt;/pre&gt;
&lt;p&gt;Remember you can&amp;#39;t just copy and paste that. You need to write in your own username. Now restart Apache. You will need to use this command several more times so keep it on hand.&lt;/p&gt;
&lt;pre&gt;sudo apachectl restart&lt;/pre&gt;
&lt;h2&gt;Setting Up PHP (editing httpd.conf)&lt;/h2&gt;
&lt;p&gt;Finally! We&amp;#39;re going to get PHP running. This is actually super simple. All we have to do is uncomment a line in our Apache config file. Before we do that I will say again: &lt;span class=&quot;bold&quot;&gt;BE CAREFUL!&lt;/span&gt; This file is one of those system files that can seriously break things if not handled with care. If you have been following from the beginning you already backed this file up, so your all set. Alright, back to it. Do this:&lt;/p&gt;
&lt;pre&gt;sudo nano /etc/apache2/httpd.conf&lt;/pre&gt;
&lt;p&gt;&amp;lt;p&amp;gt;Now find and uncomment the following line:&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;pre&gt;LoadModule php5_module libexec/apache2/libphp5.so&lt;/pre&gt;
&lt;p&gt;When within nano, you can use the &amp;#39;control + W&amp;#39; hotkey to search the document. After you remove the &amp;#39;#&amp;#39; and save the file that&amp;#39;s it, PHP is enabled. However, I&amp;#39;m going to suggest you don&amp;#39;t close out of httpd.conf just yet. Let&amp;#39;s make a few more changes while were here.&lt;/p&gt;
&lt;p&gt;Move down a number of lines to roughly 130. You should see two lines of code for User and Group. Comment the existing lines and input your own username and the group name staff. It should look like this:&lt;/p&gt;
&lt;pre&gt;#User _www
#Group _www
User username
Group staff&lt;/pre&gt;
&lt;p&gt;This makes Apache run as you, meaning you will be given full server permissions. This is optional but it may save you trouble later. For me it was needed to allow local WordPress installations to download and install plugins/themes from the back end. I&amp;#39;ll also remind you again to make user you replace &amp;#39;username&amp;#39; with your own user name. If you&amp;#39;re having an identity crisis, use the &lt;code &gt;whoami&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Now find the following line of code via search (ctrl+w in nano):&lt;/p&gt;
&lt;pre&gt;#Include /private/etc/apache2/extra/httpd-vhosts.conf&lt;/pre&gt;
&lt;p&gt;Remove the pound sign to uncomment. This enables the virtual hosts file which is necessary to turn our folders within Sites into local websites.&lt;/p&gt;
&lt;p&gt;Finally, search for the text “AllowOverride”. This will bring you to a comment block describing “what directives may be placed in .htaccess files.” This is what you’re after. Change the line &lt;code &gt;AllowOverride None&lt;/code&gt; to &lt;code &gt;AllowOverride All&lt;/code&gt;. Save and close your httpd.conf file, hopefully you will never have to touch it again.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;The User.conf File&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Next we need to edit a user specific file. In terminal do the following, replacing username with your user name:&lt;/p&gt;
&lt;pre&gt;sudo nano /private/etc/apache2/users/Ian.conf&lt;/pre&gt;
&lt;p&gt;Make sure the file looks like this:&lt;/p&gt;
&lt;pre&gt;&amp;lt;Directory &amp;quot;/Users/your_user_name/Sites/&amp;quot;&amp;gt;
Options Indexes MultiViews FollowSymLinks
AllowOverride All AuthConfig
Order allow,deny
Allow from all
&amp;lt;/Directory&amp;gt;&lt;/pre&gt;
&lt;p&gt;Save and close that file. Then restart Apache (remember the command?).&lt;/p&gt;
&lt;h2&gt;Virtual Hosts&lt;/h2&gt;
&lt;p&gt;Open up the virtual hosts file:&lt;/p&gt;
&lt;pre&gt;sudo subl /private/etc/apache2/extra/httpd-vhosts.conf&lt;/pre&gt;
&lt;p&gt;You should see a file around 40 lines long, with a couple of virtual host entries. These are sample entries. We&amp;#39;re going to be making a number of entries in here and they will depend on how you named your files within Sites. The head of your virtual-hosts file will need a line like this:&lt;/p&gt;
&lt;pre&gt;NameVirtualHost *:80

&amp;lt;VirtualHost *:80&amp;gt;
DocumentRoot &amp;quot;/Users/ian/Sites&amp;quot;
&amp;lt;/VirtualHost&amp;gt;&lt;/pre&gt;
&lt;p&gt;Then you need to specify the actual virtual hosts for each of your local sites. Here is a sample from my own vhosts file:&lt;/p&gt;
&lt;pre&gt;&amp;lt;VirtualHost *:80&amp;gt;
DocumentRoot &amp;quot;/Users/Ian/Sites/wp1.dev&amp;quot;
ServerName wp1.dev
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;VirtualHost *:80&amp;gt;
DocumentRoot &amp;quot;/Users/Ian/Sites/wp2.dev&amp;quot;
ServerName wp2.dev
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;VirtualHost *:80&amp;gt;
DocumentRoot &amp;quot;/Users/Ian/Sites/wp3.dev&amp;quot;
ServerName wp3.dev
&amp;lt;/VirtualHost&amp;gt;&lt;/pre&gt;
&lt;p&gt;You can see the pattern. All you need to do is create lines like these replacing the directory to your sites folder as well as the folder names.&lt;/p&gt;
&lt;p&gt;Within the VirtualHost block the first line points to the file location on the system and the second line indicates the web address. Meaning that when you type that string into your browser you should get to the folder indicated in line one. So after you input all the virtual hosts you want then you&amp;#39;re done! Finally. Now you should be able to input any of these addresses and get to that folder, which is probably still empty at this point.&lt;/p&gt;
&lt;p&gt;So now we should be up and running with PHP. To make sure go to your document root (either the sites folder or the system root mentioned above). Find the file that&amp;#39;s currently being served at localhost. It will probably be named something like &amp;#39;index.html&amp;#39;. Now edit this using either the nano command or any text editor. Here&amp;#39;s the nano command on my system:&lt;/p&gt;
&lt;pre&gt;sudo nano Library/WebServer/Documents/index.php&lt;/pre&gt;
&lt;p&gt;Edit that file and add the following code to anywhere. Here&amp;#39;s what my &amp;#39;index.php&amp;#39; file looks like. I added an extra paragraph to remind myself where the doc was being served from:&lt;/p&gt;
&lt;pre&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h1&amp;gt;It works!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This doc at: /Library/WebServer/Documents/
&amp;lt;?php phpinfo();&amp;gt;
&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;
&lt;p&gt;Save the file. Now when you reload localhost you should see all your php info. NOTE: Be sure that the file is a .php file. I think by default it will be a .html file so you may need to change it.&lt;/p&gt;
&lt;p&gt;If you don&amp;#39;t get the expected page with a big list of php settings then something went wrong. Check the filename, check that you edited the file in the right directory and if that doesn&amp;#39;t work go back up and try following from the beginning of this section again.&lt;/p&gt;
&lt;h2&gt;MySQL&lt;/h2&gt;
&lt;p&gt;So now we have PHP and Apache up and running. The last key ingredient MySQL. To be half-decent PHP developers we need to be able to work well with a database, so even though you could start coding PHP right now with the current setup we still need a database. Download it from the &amp;lt;a href=&amp;quot;http://dev.mysql.com/downloads/mysql/&amp;quot; title=&amp;quot;download mysql&amp;quot;&amp;gt;MySQL site&amp;lt;/a&amp;gt;. Use the Mac OS X ver. 10.6 (x86, 64-bit), DMG Archive version (works fine on 10.8). Install everything that comes in the DMG.&lt;/p&gt;
&lt;p&gt;You can now start the MySQL server from the System Preferences pane or via the command line.&amp;lt;a href=&amp;quot;http://phpbackward.files.wordpress.com/2013/01/e89ea2e5b995e5bfabe785a7-2013-01-22-e4b88ae58d882-14-31.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://phpbackward.files.wordpress.com/2013/01/e89ea2e5b995e5bfabe785a7-2013-01-22-e4b88ae58d882-14-31.png&amp;quot; alt=&amp;quot;You can start the MySQL server from the System Preferences&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;h3&gt;Set The Root Password&lt;/h3&gt;
&lt;p&gt;Use this command, and remember the password you use:&lt;/p&gt;
&lt;p&gt;&lt;code &gt;/usr/local/mysql/bin/mysqladmin -u root password &amp;#39;yourpasswordhere&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we&amp;#39;re ready for phpMyAdmin.&lt;/p&gt;
&lt;h2&gt;Installing phpMyAdmin&lt;/h2&gt;
&lt;p&gt;If I wrote up this section I would pretty much just be copying word for word the article that helped me get it set up, so I&amp;#39;m just going to point you there. Here&amp;#39;s the link:&lt;/p&gt;
&lt;p&gt;&amp;lt;a href=&amp;quot;http://coolestguyplanettech.com/downtown/install-and-configure-apache-mysql-php-and-phpmyadmin-osx-108-mountain-lion&amp;quot; title=&amp;quot;phpMyAdmin installation&amp;quot;&amp;gt;Installing phpMyAdmin&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;p&gt;If you have read along here you can scroll down to the last section where you will find out how to get phpMyAdmin up and running. This is a very good article and if anything has gone wrong up to this point I suggest checking it out, as I may have forgotten something. Once you get phpMyAdmin set up your done! Now we can get to the real purpose of why were here: Coding PHP.&lt;/p&gt;
&lt;h2&gt;Done!&lt;/h2&gt;
&lt;h2&gt;External Resources&lt;/h2&gt;
&lt;p&gt;Most of what I wrote here is a combination of various articles I read myself to learn how to make this work. Here are two great articles that talk about setting up your own AMP stack and working with virtual hosts, respectively:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&amp;lt;a href=&amp;quot;http://coolestguyplanettech.com/downtown/install-and-configure-apache-mysql-php-and-phpmyadmin-osx-108-mountain-lion&amp;quot; title=&amp;quot;setting up amp stack&amp;quot;&amp;gt;Install and configure phpMyAdmin and MySql on Mac&amp;lt;/a&amp;gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&amp;lt;a href=&amp;quot;http://wpcandy.com/teaches/how-to-improve-local-wordpress-development-on-a-mac/#.UP43IaFARdQ&amp;quot; title=&amp;quot;virtual hosts with wordpress&amp;quot;&amp;gt;How to improve local WordPress development&amp;lt;/a&amp;gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Portfolio Update + Future Site Update]]></title><link>https://blog.iansinnott.com/portfolio-update-future-site-update/</link><guid isPermaLink="false">https://blog.iansinnott.com/portfolio-update-future-site-update/</guid><pubDate>Tue, 14 May 2013 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Today I Made Some New Additions&lt;/h2&gt;
&lt;p&gt;The portfolio hasn&amp;#39;t seen an update in at least a few months, so I figured it&amp;#39;s about time I made an effort to make it reflect what I&amp;#39;ve actually been doing lately. So today I added two new items:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;OrangeFinders.com&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;Creative Words Theme&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;The Creative Words Theme is something I threw together this last weekend. I went through a Photoshop tutorial to create the design, then decided to test my new WP skills by coding it up clean and fast. Said new WP skills come from the former item on that list: OrangeFinders.com&lt;/p&gt;
&lt;h2&gt;My First Full Web App&lt;/h2&gt;
&lt;p&gt;OrangeFinders.com marks my first fully featured web app created. I say fully featured in full knowledge of the fact that there are still a few minor changes that I need to make, and that the ‘wish list&amp;#39; of features for the site is still quite long.&lt;/p&gt;
&lt;p&gt;But that&amp;#39;s beside the point. This site taught me a plethora of new skills that are highly relevent to web design and WP development. This include: Form Validation (soooo boring), AJAX (super cool) and general PHP awesomeness. Having largely completed the functionality of that site I&amp;#39;m now fully confident standing by the ‘developer&amp;#39; half of my job. I now feel capable of doing just about anything I need to for a client with the combination of PHP and WP. Consequently, I&amp;#39;ve reshifted my focus back to the design half of my job. I&amp;#39;m going to learn Illustrator, create a logo for myself and most importantly completely redesign my site from the ground up. When? Good question, ideally before my birthday next month.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m still a long ways from where I want to be in terms of personal knowledge on both the design and development fronts, but I&amp;#39;m quite content that way. Having myriad new fields that I intend to learn about is much more exciting than it is daunting. Not time to waste, I&amp;#39;m getting started right after I finish this post.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Becoming A Developer Is A Process]]></title><link>https://blog.iansinnott.com/becoming-a-developer-is-a-process/</link><guid isPermaLink="false">https://blog.iansinnott.com/becoming-a-developer-is-a-process/</guid><pubDate>Sat, 11 May 2013 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Version Control Added to My List!&lt;/h2&gt;
&lt;p&gt;Today I started seriously learning Git. Why? I&amp;#39;m tired to manual version control, and I enjoy adding new skills to the list of things I&amp;#39;ve learned to become a developer.&lt;/p&gt;
&lt;h2&gt;Becoming a developer is a process&lt;/h2&gt;
&lt;p&gt;No one seems to tell you that there are many great ways to manage your code that don&amp;#39;t involve making tons of backup directories manually in Finder. Well, no one told me anyway. As with many things in the world of development, version control seems to be a simple concept that everyone is already familiar with, so no one talks about it. I&amp;#39;m not complaining, just pointing it out. Putting this mental note down on my blog for later reference.&lt;/p&gt;
&lt;h2&gt;So much to learn&lt;/h2&gt;
&lt;p&gt;I take the time to note this stuff because I want to stay consciously aware of all the seemingly minor things that I learn as I continue to improve my development skills. I was talking to my friend &lt;a href=&quot;http://nickbudden.com/&quot;&gt;Nick&lt;/a&gt; recently about this and he said something along the lines of:&lt;/p&gt;
&lt;blockquote&gt;Welcome to your new life. You will have epiphanies about every three months.&lt;/blockquote&gt;
&lt;p&gt;Becoming a developer means continually learning, and so far I love it.&lt;/p&gt;
&lt;h2&gt;The road traveled so far&lt;/h2&gt;
&lt;p&gt;I think this is a good opportunity to think back on the road I took to get to where I am now. I learned HTML/CSS about two years ago, before taking an long hiatus from web work. When I got back in the game and decided to really learn development my list of necessary skills looked like this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;HTML/CSS&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;PHP&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;JavaScript (+jQuery)&lt;/li&gt;&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;MySQL&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;Awesome! I was already 1/4 of the way there… but really I wasn&amp;#39;t. Here&amp;#39;s the one point I would like to make in this post: For better or worse, no one tells you how much you will actually have to learn to be a developer. My actual list of things to learn indeed had those items above, but it also had things like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PhotoShop (learn design)&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Text Editor (Dreamweaver is bloated, wanted something new)&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;SCSS (or LESS)&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Compass (no more manual prefixing!)&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Setting up Apache locally (I don&amp;#39;t use MAMP)&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Markdown (blogging regularly demands it)&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Version Control (Git)&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;There are probably some other things that belong in that last, oh well. However, seeing the extended list does make me happy that no one told me beforehand how much I would really be learning. The task would have been daunting.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Life Upgrades & Reasons To Write More]]></title><link>https://blog.iansinnott.com/life-upgrades-and-reasons-to-write-more/</link><guid isPermaLink="false">https://blog.iansinnott.com/life-upgrades-and-reasons-to-write-more/</guid><pubDate>Tue, 30 Apr 2013 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;I Should Write More&lt;/h2&gt;
&lt;p&gt;I don&amp;#39;t necessarily want to, but I should. A &lt;a href=&quot;http://nathanmarz.com/blog/you%E2%B8%BBshould%E2%B8%BBblog%E2%B8%BBeven%E2%B8%BBif%E2%B8%BByou%E2%B8%BBhave%E2%B8%BBno%E2%B8%BBreaders.html&quot;&gt;very nice article&lt;/a&gt; I read today by &lt;a href=&quot;http://nathanmarz.com/&quot;&gt;Nathan Marz&lt;/a&gt; basically hammered home an idea I already knew to be true: Writing often and eventually writing well can be a key to success.&lt;/p&gt;
&lt;p&gt;So, with that in mind I&amp;#39;m going to start writing more often. Not because I think the world needs to hear what I have to say (yet), and not because I think anyone actually reads my posts, but because it will help me improve.&lt;/p&gt;
&lt;h2&gt;Upgrade&lt;/h2&gt;
&lt;p&gt;This new motivation to write isn&amp;#39;t just due to that article though. Over the past two months I&amp;#39;ve also made several other upgrades to my life style that will make this much easier.&lt;/p&gt;
&lt;h3&gt;New Computer&lt;/h3&gt;
&lt;p&gt;That&amp;#39;s right, brand new Macbook Pro. The ultra sexy retina display means I can finally switch over to using Traditional Chinese as my default language and be able to see all the tiny strokes of characters I need to look up. The massive speed increase means I no longer loath opening Photoshop or more than one browser at a time. Point being, &lt;span class=&quot;italic&quot;&gt;This is awesome!&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;New Phone&lt;/h3&gt;
&lt;p&gt;About two years ago I lost my then beloved iPhone 4. Now, after finally deciding to shell out the cash for an unlocked iPhone I&amp;#39;m once again a part of modern smartphone ubiquity. Feels good.&lt;/p&gt;
&lt;p&gt;The point though, is not so much the phone as the great apps I now have access to, namely &lt;a href=&quot;http://lift.do/&quot;&gt;Lift&lt;/a&gt;. This boss of an app is simple, well-designed and made me wakeup without snooze this morning! Only slightly short of a miracle. The app is meant to help anyone achieve any goal simply through tracking. In the future I can see this taking a turn towards notifying all of Facebook/Twitter whenever you fail to meet a daily goal, but for now it is simply an accountability system with other lift users. Even so I can respect the influence this app has already had on me. Just having something to check off the moment I wake up is satisfying enough that I think I&amp;#39;ll keep doing it. Here&amp;#39;s hoping that&amp;#39;s the case.&lt;/p&gt;
&lt;p&gt;The other big one is &lt;a href=&quot;http://skritter.com/&quot;&gt;Skritter&lt;/a&gt;. I&amp;#39;ve been using this Chinese review software for months now but it never really had much of an impact on my studies until I got the new phone. Lately I&amp;#39;ve been using it any moment I don&amp;#39;t have anything better to do. This means on the subway or in the elevator usually. I obliterated my 1300 word study list that had accumulated from lack of use in a week.Cheers to productivity.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Victory! The realization of a goal]]></title><link>https://blog.iansinnott.com/victory-the-realization-of-a-goal/</link><guid isPermaLink="false">https://blog.iansinnott.com/victory-the-realization-of-a-goal/</guid><pubDate>Fri, 22 Feb 2013 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Today I met the goal I set a month ago of making money as a freelancer. Well, that was a two week goal so I didn&amp;#39;t exactly meet it. But the work I did during those weeks working towards this goal was the foundation for success, and now the benefits of my work have become tangible. This is just the beginning though. One goal should lead to another, so tomorrow I will figure out what that next goal shall be.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[I'm famous on GoBodyLanguage.com!]]></title><link>https://blog.iansinnott.com/im-famous-on-gobodylanguagecom/</link><guid isPermaLink="false">https://blog.iansinnott.com/im-famous-on-gobodylanguagecom/</guid><pubDate>Wed, 20 Feb 2013 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Well the intro video that I&amp;#39;m in is bellow the fold on the homepage of godbodylanguage but it counts as fame (right?). This is what a good friend of mine created and launched today. I&amp;#39;m wishing the best of luck to &lt;a href=&quot;http://nickbudden.com/&quot;&gt;Nick&lt;/a&gt; as he promotes his new site. Can&amp;#39;t wait to go through this course myself, and I hope this helps motivate more people to &lt;a href=&quot;http://gobodylanguage.com/&quot;&gt;learn body language&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The Wonders of CSS Frameworks]]></title><link>https://blog.iansinnott.com/the-wonders-of-css-frameworks/</link><guid isPermaLink="false">https://blog.iansinnott.com/the-wonders-of-css-frameworks/</guid><pubDate>Thu, 07 Feb 2013 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Today was my first dive into CSS frameworks. Creating layout from scratch is perfectly doable but also perfectly tedious. I have yet to meet a developer who enjoys that aspect of it. We like the stages where we get to build shiny things on a site. So here is what I got into today:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://cssgrid.net/&quot;&gt;The 1140 Grid System&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://imperavi.com/kube/&quot;&gt;Kube&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The first one has been around for quite some time. The original developer actually stopped updating it because after creating it he learned so much that it lost it&amp;#39;s use. That&amp;#39;s awesome, but for a ton of developers it&amp;#39;s still a great tool. I would say it&amp;#39;s best feature is simplicity. It&amp;#39;s not the most robust framework but if you want something really light and simple to set up try it out.&lt;/p&gt;
&lt;p&gt;The second, Kube, is another fully responsive grid system. I didn&amp;#39;t really look into Kube&amp;#39;s layout features because I was already using 1140, but I&amp;#39;m sure it&amp;#39;s good. I really like Kube&amp;#39;s design elements that make it super simple to add very sophisticated styling to elements in a few seconds. The one drawback to me was that it is built with LESS instead of Sass. I actually run into this fairly often. It seems as though the majority of the well known frameworks are built with LESS.&lt;/p&gt;
&lt;p&gt;So, instead of sit around and pout I converted a number of Kube&amp;#39;s features into Sass. Now I&amp;#39;m developing with a mix of these two grid systems. Kube mainly for UI elements and 1140 for layout. I&amp;#39;m considering actually rolling these together into something usable and Sass based (finally) so that anyone else can enjoy it without switching to LESS. I&amp;#39;ll post an update with that is finished.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[WordPress Theming From Scratch]]></title><link>https://blog.iansinnott.com/wordpress-theming-from-scratch/</link><guid isPermaLink="false">https://blog.iansinnott.com/wordpress-theming-from-scratch/</guid><pubDate>Fri, 11 Jan 2013 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When I first started my exploration of WP I did so one small step at a time. When I look back on those initial stages of learning I think about how much quicker the process could have been if I had just dove in and conquered obstacles as they arose.&lt;/p&gt;
&lt;p&gt;For beginner WP developers it may be tempting to stick with theme modification. By this I mean just taking a theme, whether premium or free, and simply modifying bits of it&amp;#39;s code (or child theming) to get the desired results. This can be great in some cases and well warranted. However, in the end this leaves you or your client with a pile of code you may or may not fully understand (seriously, open up &lt;code &gt;functions.php&lt;/code&gt; on a theme you didn&amp;#39;t create and witness how much excess code your theme ships with).&lt;/p&gt;
&lt;p&gt;I was in the same boat initially, child-theming and theme-editing my way to early victories. This was important, but it wasn&amp;#39;t until after I built my first theme from scratch that I felt fully in control of my theme. Building a theme from scratch also gives you a nice sense of accomplishment in the end that you may not get from editing an existing theme: everything you see in the final design was your own doing. So what is starting from scratch? An empty folder in &lt;code &gt;wp-content/themes/&lt;/code&gt; on your local dev server. Then just add &lt;code &gt;index.php&lt;/code&gt; and style.css and get coding.&lt;/p&gt;
&lt;p&gt;Of course you will want to use JavaScript plugins and other premade assets as you would normally, but by starting from scratch you will teach yourself some very essential WP basics like registering/enqueing scripts and customizing the loop.&lt;/p&gt;
&lt;p&gt;So if you&amp;#39;re looking to get some good hands on practice with WP just open up a new folder on your dev server and get started. If you&amp;#39;re not the type to craft all site assets by hand then just Google free website PSD templates. Find a template you like and then theme it up. PSD templates are great because they often come pre-sliced so you get to spend most of the time in the code editor and in the browser.&lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Custom Post Types: A Great Article]]></title><link>https://blog.iansinnott.com/custom-post-types-a-great-article/</link><guid isPermaLink="false">https://blog.iansinnott.com/custom-post-types-a-great-article/</guid><pubDate>Tue, 18 Dec 2012 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Justin Tadlock is a boss&lt;/h3&gt;
&lt;p&gt;I just read an article (link below) of his on custom post types in WordPress that was illuminating. Also, it turns out he is another developer that jumped ship for Asia (he&amp;#39;s in Seoul).&lt;/p&gt;
&lt;p&gt;So where was I. Ah, custom posts. Custom posts provide great flexibility for WP developers and a simple user experience for the client. This article is the primary reason I decided to use this feature for my latest client project. I&amp;#39;ll be using custom posts to handle addresses for company that has about 20 branches spread over three cities. Nothing too exciting but this will allow simple edits and updates as the company expands. That&amp;#39;s all for now, must sleep...&lt;/p&gt;
&lt;p&gt;Oh and here&amp;#39;s &lt;a href=&quot;http://justintadlock.com/archives/2010/04/29/custom%E2%B8%BBpost%E2%B8%BBtypes%E2%B8%BBin%E2%B8%BBwordpress&quot;&gt;the link&lt;/a&gt; for anyone interested. Enjoy.&lt;/p&gt;</content:encoded></item></channel></rss>