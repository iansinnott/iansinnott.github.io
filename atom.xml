<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.iansinnott.com/</id>
    <title>Ian Sinnott</title>
    <updated>2018-05-08T01:03:57Z</updated>
    <generator>Feed for Node.js</generator>
    <author>
        <name>Ian Sinnott</name>
        <uri>https://www.iansinnott.com</uri>
    </author>
    <link rel="alternate" href="https://blog.iansinnott.com/"/>
    <link rel="self" href="https://example.com/atom.xml"/>
    <subtitle>Sometimes I write things</subtitle>
    <contributor>
        <name>Ian Sinnott</name>
        <uri>https://www.iansinnott.com</uri>
    </contributor>
    <entry>
        <title type="html"><![CDATA[Migrating my blog to Gatsby (Part 2 of Gatsby migration)]]></title>
        <id>https://blog.iansinnott.com/migrating-a-blog-to-gatsby-part-2-of-gatsby-migration/</id>
        <link href="https://blog.iansinnott.com/migrating-a-blog-to-gatsby-part-2-of-gatsby-migration/">
        </link>
        <updated>2017-08-21T06:53:54Z</updated>
        <content type="html"><![CDATA[Migrating a blog to Gatsby NOTE:  This is part 2 of my Gatsby migration series. You can find part 1 here:  Migrating to GatsbyJS Part 1 . Abstract:  Gatsby is a great tool for building a blog. In part 1 I did the more simple task of migrating an existing React site to Gatsby. This time I migrated my blog, which was a lot more involved and required a lot more Gatsby-specific knowledge. Here's the gist of what I'm going to cover: Preparing an existing blog for migration Configuring Gatsby to handle markdown Querying your markdown files using GraphQL Adding custom data to the generated GraphQL schema Turning all your markdown files into static pages Let's jump in. Preparing your existing blog for migration NOTE:  If you don't already have a blog or want to create one from scratch there's a  tutorial for exactly that on Gatsby's website . Let's move some files around. Gatsby gives you a good amount of flexibility when it comes to file structure, but for consistency with the docs I'm going...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Migrating to GatsbyJS Part 1]]></title>
        <id>https://blog.iansinnott.com/migrating-to-gatsbyjs-part-1/</id>
        <link href="https://blog.iansinnott.com/migrating-to-gatsbyjs-part-1/">
        </link>
        <updated>2017-07-09T07:00:00Z</updated>
        <content type="html"><![CDATA[Abstract:  Migrating a static site to  Gatsby  is pretty simple. I'll walk through how I did it and the pitfalls along the way. Gatsby 1.0  was just recently published and I got excited. I've been excited about static sites for  a while , especially in combination with React. I've  spoken publicly about building static sites with React  and two of my top repositories on GitHub are just for building static sites with React... So I was pretty pumped to see Gatsby hit 1.0. And so far it has not disappointed. Migrating to Gatsby 1.0 OK, enough context! Let's migrate something. I chose to start by migrating  my personal site  since it's already built with React and is literally 1 page. Here it is—the entire site: Adding Gatsby to an exiting project Step 1 is to  install Gatsby . I'm also adding   and the react helmet plugin because I knew I would need them: Create a   file  in the project root and drop the following into it: Run Gatsby  to make sure everything is working. This will start a...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The importance of Webpack context]]></title>
        <id>https://blog.iansinnott.com/the-importance-of-webpack-context/</id>
        <link href="https://blog.iansinnott.com/the-importance-of-webpack-context/">
        </link>
        <updated>2016-11-24T08:00:00Z</updated>
        <content type="html"><![CDATA[Today I ran into an issue testing my  react-static-webpack-plugin  plugin. I've been running webpack builds in subdirectories of the repository and then running test assertions against the output in order to test the project. So far it's worked great, but after updating my dependencies recently I ran into a nasty error: ...😖 Not good. But looking at the output and enabling the debug logger in my build process led me to the ultimate culprit, Webpack's context. Here's what was happening: I was running build commands from the root directory of my project The builds I was running needed to be ran in their own subdirectory Building directly in the subdirectory worked fine... Webpack's context was getting set to the root directory no matter what After looking at the  Webpack docs  it quickly became apparent what was happening:  in the  The base directory (absolute path!) for resolving the entry option. If output.pathinfo is set, the included pathinfo is shortened to this directory.
 Default...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A refreshing dose of minimalism]]></title>
        <id>https://blog.iansinnott.com/a-refreshing-dose-of-minimalism/</id>
        <link href="https://blog.iansinnott.com/a-refreshing-dose-of-minimalism/">
        </link>
        <updated>2016-11-16T08:00:00Z</updated>
        <content type="html"><![CDATA[Today I finished rebuilding my blog using Hexo (see last blog post for details). It's a blog, so I knew I wouldn't need too much JS. I started with a blank file and started coding. Once I was satisfied with the event handling logic I had set up I sat back and reviewed my work. 44 lines including a few comments and zero dependencies. Not too bad. The web has come a long way. CSS was able to take care of a lot of the interactions and animations. But I still wanted to do better. It occurred to me that I could actually use the   state to accomplish all of my open/close menu interactions. Done! A few more lines eliminated. But I still had the   event handler I was using to select all text in a text box whenever a user put their cursor inside it. I don't think CSS can do that... so I did end up using JS for this. I took it out of my script file and in-lined it on the input directly. That was the last event I was handling so now I scrapped my whole JS file with its event logic. Wow! No...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Migrating from Jekyll to Hexo]]></title>
        <id>https://blog.iansinnott.com/migrating-from-jekyll-to-hexo/</id>
        <link href="https://blog.iansinnott.com/migrating-from-jekyll-to-hexo/">
        </link>
        <updated>2016-11-16T08:00:00Z</updated>
        <content type="html"><![CDATA[TL;DR:  I migrated my blog from Jekyll to Hexo. This is everything you need to know to do the same. Initializing Hexo in your existing Jekyll project Here's what I did: Back up your existing Jekyll blog to a subdirectory so you can wildly make changes with impunity: Now move all the non-git files in the directory into  . Initially I just did it in finder, but then I got curious about how to do it in bash. So if you want to just run a nifty command here you go: We keep the   dir around so that we can cleanly iterate towards a Hexo blog from our Jekyll blog while maintaining all previous version control history. However, the   command actually removed   on my system so we need to move it too, but only temporarily: Now initialize Hexo in your project directory: This should have left   and   intact while adding a bunch of new files. Now it's safe to bring back your Git history and add a commit: Now we've succesffully initialize Hexo. From here on out everything we do will to customize Hexo...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Getting Started with Flow and Webpack]]></title>
        <id>https://blog.iansinnott.com/getting-started-with-flow-and-webpack/</id>
        <link href="https://blog.iansinnott.com/getting-started-with-flow-and-webpack/">
        </link>
        <updated>2016-06-11T07:00:00Z</updated>
        <content type="html"><![CDATA[TL;DR:  This post will show you how to get set up with  Flow  and  Webpack  as quickly as possible so that you can benefit from some degree of type safety in your JS code! What are we talking about? Flow Flow  is like ESLint on steroids. It is a static type checker for JavaScript. It let's you add types to any existing JS code.  Why would you want to do this?   The short answer is because JS ❤️ runtime errors, but runtime errors make your users sad. The more helpful answer is that Flow will analyze your codebase and catch bugs that may otherwise go unnoticed until you're app is already deployed to production. There is an entire site dedicated to explaining Flow, so I will let you check that out for more detailed information:  http://flowtype.org/ However, what may not be immediately obvious from the Flow site is the reason why it's so appealing for existing projects, which is that you can  iterate  to full Flow coverage with minimal overhead. That means you can keep on hitting all your...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Testing Webpack Plugins]]></title>
        <id>https://blog.iansinnott.com/testing-webpack-plugins/</id>
        <link href="https://blog.iansinnott.com/testing-webpack-plugins/">
        </link>
        <updated>2016-05-11T07:00:00Z</updated>
        <content type="html"><![CDATA[TL;DR:  I'm going to show you how to test Webpack plugins. I'll even show you how to integrate with a CI server 😄. The trick is to use the Webpack  Node API . Ever built a  Webpack Plugin ? Ever wondered how to test that awesome plugin you just built? If so, this article is for you. I scoured the internet (skimmed the first page of a google search) for resources on testing Webpack plugins and came up empty, so I decided it was time to take matters into my own hands! I recently built my own Webpack plugin for generating static sites from React Router routes. You can check it out  here if interested . Anyway, I was getting somewhat annoyed that I hadn't yet tested the plugin. I had seen some regressions as I added support for more features and it was no fun to have to resolve those issues when I really just anted to generate awesome static sites using React and Webpack. Where to turn... Even if the first page of a google search didn't answer my questions, I figured someone somewhere...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Going fully HTTPS (SSL) fo' free]]></title>
        <id>https://blog.iansinnott.com/going-fully-https-fo-free/</id>
        <link href="https://blog.iansinnott.com/going-fully-https-fo-free/">
        </link>
        <updated>2016-04-29T07:00:00Z</updated>
        <content type="html"><![CDATA[A few weeks ago I moved  my website  over to HTTPS. Then, yesterday I moved my  blog  over to HTTPS. This now means that my two primary web properties are both using SSL, and one of them was completely free to set up. Free SSL with LetsEncrypt If you want SSL on your site for free there's a new certificate authority called  LetsEncrypt  which is completely free! 👏 This is excellent news, and definitely an option for you, especially if you're managing your own server. My main site, iansinnott.com, actually uses LetsEncrypt under the hood through  Netlify , but it's not exactly free because I do pay  Netlify  to host my site every month. However, LetsEncrypt is not what I'm talking about today. I just discovered something super cool which is currently letting my host my blog, a  GitHub Pages  site, using SSL. All the SSL fo' free using CloudFlare It turns out if you use  CloudFlare  for DNS on your domain you can also get SSL completely for free. The setup is pretty simple as well...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Importance of Community]]></title>
        <id>https://blog.iansinnott.com/the-importance-of-community/</id>
        <link href="https://blog.iansinnott.com/the-importance-of-community/">
        </link>
        <updated>2016-04-29T07:00:00Z</updated>
        <content type="html"><![CDATA[Specifically, when making technical decisions. Community his hugely important any many areas of life, but lately I've found that it's particularly pertinent in making technical decisions. An example Recently at  Trustar  we started using a  graph database . We have a lot of interrelated data so the graph model has made conceptual sense for a long time.  So this year when we decided to implement a graph database in production we had a technical decision to make: Which database do we use? We're a small team (currently ~5 engineers) so we definitely don't have the bandwidth to build our own implementation. That means we need to choose among the existing solutions. There are currently several graph database providers in the wild, and they all seem to do pretty much the same thing. Technically speaking, the usual points they hit in differentiating themselves are ones of how they handle scalability and replication. But technical points are not the only ones to consider when making a decision...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Teaching a React.js Workshop]]></title>
        <id>https://blog.iansinnott.com/teaching-a-reactjs-workshop/</id>
        <link href="https://blog.iansinnott.com/teaching-a-reactjs-workshop/">
        </link>
        <updated>2016-02-27T08:00:00Z</updated>
        <content type="html"><![CDATA[Who wants to be a speaker? This guy! 🙌 Last Sunday was a significant event for me: I put on a  React  workshop ( link here ) to teach beginners how to get started with React. It was a full day event and it was a great learning experience for myself and hopefully for the students as well. Giving back to the community The community surrounding React has done a lot for me. It's only been a year since I started using this technology, but it's played a tremendous role in my personal development as a programmer. As such, I really wanted to start contributing back to this amazing community that has helped nurture my own development. I learned React and the surrounding ecosystem on my own and I know how daunting it can be. As a community we love to toss around terms like ES6, Babel, Webpack, Flux, Redux, etc. as if it's all expected knowledge for the field. And while you probably should know what all these things are after being part of the community for a while it can be very daunting when...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Switching Away From Mongoose]]></title>
        <id>https://blog.iansinnott.com/switching-away-from-mongoose/</id>
        <link href="https://blog.iansinnott.com/switching-away-from-mongoose/">
        </link>
        <updated>2015-08-01T07:00:00Z</updated>
        <content type="html"><![CDATA[I've been using MongoDB as my primary database for some time now. That means all new projects I created were running Mongo, and Mongoose was my ORM of choice. Mongoose has worked well for my in the past and even  still  does, but I can feel that it's time for a switch. Why the change? Mongo The main reason actually isn't Mongoose, but rather  Mongo . The data in  most  applications is probably going to be relational so why would you use a non-relational database? The main reason I liked Mongo initially was that it had a JavaScript API but I've come to realize that doesn't matter that much, and it can even be a hindrance when working with team members that know and love SQL. Mpromise For anyone who doesn't know already, Mongoose provides a promise-based API for doing async database operations in addition to the classic callbacks. This API is unfortunately under documented, but it exists none-the-less and the library it uses to implement promises is  Mpromise . Mpromise seemed fine at...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Use SSH ForwardAgent for fun and profit]]></title>
        <id>https://blog.iansinnott.com/use-ssh-forwardagent-for-fun-and-profit/</id>
        <link href="https://blog.iansinnott.com/use-ssh-forwardagent-for-fun-and-profit/">
        </link>
        <updated>2015-07-20T07:00:00Z</updated>
        <content type="html"><![CDATA[Yesterday I discovered something amazing. With just  one line  of code you can bypass the annoyance of not being able to access private web services (i.e. GitHub) while SSHed into a machine. The method is called SSH agent forwarding and it's changed my deployment workflow. Here's the quick version. For every   in your   file you can add a new line that allows you to use your own  local  SSH keys even while SSHed into the remote server. Example: See that last line? That is all it takes to turn on agent forwarding whenever you SSH into the server called  . Cool right? The workflow So, you might be wondering why this matters. The answer is ease of deployment. For small and even mid-size projects it's probably not too much to ask to SSH in to the actual server whenever you need to deploy new code. This may not be the best or easiest deployment workflow, but it not difficult and it's quite simple. Furthermore, if your deployment process ever breaks it will not be difficult to troubleshoot...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Managing state and controlled form fields with React]]></title>
        <id>https://blog.iansinnott.com/managing-state-and-controlled-form-fields-with-react/</id>
        <link href="https://blog.iansinnott.com/managing-state-and-controlled-form-fields-with-react/">
        </link>
        <updated>2015-05-11T07:00:00Z</updated>
        <content type="html"><![CDATA[UPDATE (2016-07-28):  As of React v15   and   are officially deprecated. I heavily advocate the use of both of these APIs in this article. If you want to see my thoughts on the deprecation see  this comment below . For the official deprecation see  the docs article here . With React, you basically get two different ways to deal with forms: Standard input elements that can be modified by the user "Controlled" input elements that can only be modified programatically The first type is pretty straightforward in React, you simply don't provide a   prop: The value of that   element can be edited by the user in a browser, just like one would expect in a normal we app. The other type of input—a "Controlled" input—looks almost the same, but has a   property: The value of this   element will stubbornly refuse to change no matter what the user does. This is generally a terrible user experience, so React will actually warn you that your input cannot be modified: If you're new-ish to React you...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[In search of the ultimate tooling workflow]]></title>
        <id>https://blog.iansinnott.com/in-search-of-the-ultimate-tooling-workflow/</id>
        <link href="https://blog.iansinnott.com/in-search-of-the-ultimate-tooling-workflow/">
        </link>
        <updated>2015-05-03T07:00:00Z</updated>
        <content type="html"><![CDATA[Lately I've been exploring the various options out there for front-end tooling. I'm about to start a greenfield project next week and I figure I might as well do it right. The goal is not to look back in two months and wish I had implemented a better workflow. The tooling can always change, but in practice it usually doesn't so it's best to get it right the first time. In short, here's what I've decided on: Webpack  w/  Hot Module Replacement  enabled Babel  (ES6 compilation) Gulp Stylus Webpack Webpack is amazing. I never thought  Browserify  would be replaced in my workflow, but it has been. Webpack essentially does everything Browserify did and more. It let's you require  anything , including images, Markdown files, fonts and probably anything else you would need in a website. So what? Webpack let's you truly componentize your applications by letting you keep  everything  organized in a single directory. For example, if you wanted to componentize your website's header you could put...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Solving problems is the biggest win]]></title>
        <id>https://blog.iansinnott.com/solving-a-problem-is-the-biggest-win/</id>
        <link href="https://blog.iansinnott.com/solving-a-problem-is-the-biggest-win/">
        </link>
        <updated>2015-02-20T08:00:00Z</updated>
        <content type="html"><![CDATA[As I ramp up my job search, I've recently become more introspective about why I like programming. It's not uncommon during an initial phone screen to be asked some variation of the following “soft” interview question: What are you passionate about? or... Why do you like software development? As simple and possibly over-used as these questions are, they're still good ones. So am I  really  passionate about software development? Hell yes. But that's not the answer to the underlying question of why—why am I passionate about it? It's this line of thinking that has led me to do some introspection recently, and I've come to the conclusion that what it really boils down to is  solving problems . Solving problems is the biggest win When you solve a problem for yourself it feels great. Not only that, but you then have one less problem. The satisfaction of solving problems certainly isn't exclusive to programming, but programming is one of the best tools to solve an extremely wide array of...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A New Direction]]></title>
        <id>https://blog.iansinnott.com/a-new-direction/</id>
        <link href="https://blog.iansinnott.com/a-new-direction/">
        </link>
        <updated>2015-02-16T08:00:00Z</updated>
        <content type="html"><![CDATA[For the past few years I've been living in Taiwan running my own freelance business. It's been an amazing, transformative experience and I've had a great time doing it. Entering 2015, I was planning to continue growing my business into the foreseeable future, but after a recent revelation I feel it's time for a change. It's time to get a  real  job. At my last “job” I was my own boss, I worked my own hours, I traveled often and lived however I wanted. So, why then would I choose to give all that up? The answer is simple, it's because... I'm in my comfort zone. I woke up one morning and realized:  I've acclimated.  I'm no longer challenged on a daily basis. This was a hard realization to come by, but it's true. The projects I had been working on might have been fun or interesting but they were ultimately well within my current skill set, which means I had stopped pushing. “Never stop pushing.” I once heard that quote somewhere and it really resonated with me. I never want to stop...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Express Basics]]></title>
        <id>https://blog.iansinnott.com/express-basics/</id>
        <link href="https://blog.iansinnott.com/express-basics/">
        </link>
        <updated>2015-02-02T08:00:00Z</updated>
        <content type="html"><![CDATA[A quick guide to using Express, and the basics of Express middleware Intro All source files for this article can be found in the  GitHub Repo: iansinnott/express-middleware-lecture . Outline Intro (Simplifying Express) What is middleware? The relationship between Express and middleware Explanation (it's just a function) Build a simple logger Important points about middleware MUST  call  Order matters Middleware can be localized to various routes Routes are also middleware Handling errors 404 Internal server error (500) Conclusion Express is just a stack of middleware Common and useful middleware you will undoubtedly see More resources Simplifying Express So first things first, rather than starting with everything and figuring out what it all does, let's start with a base Express configuration and add things as we need them. A standard Express app configuration using the   NPM module will produce something like this: There's a lot going on there, and for anyone without experience using...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Use RedCarpet to Render Markdown]]></title>
        <id>https://blog.iansinnott.com/use-redcarpet-to-render-markdown/</id>
        <link href="https://blog.iansinnott.com/use-redcarpet-to-render-markdown/">
        </link>
        <updated>2015-01-26T08:00:00Z</updated>
        <content type="html"><![CDATA[Most of the markdown I write ends up on GitHub, so when I preview my markdown I on my computer I like it to look  exactly  like it will once I push it live to some repository. I also like to use the excellent  Marked  app to preview my markdown. Unfortunately, even though Marked claims to support  Github Flavored Markdown  (GFM) it leaves some features out. I'm not going to blame Marked for the incomplete implementation of GFM, they outsource the processing to  Discount , so it's probably not their fault. But certain features of GFM, like nested lists, are really useful so I decided to switch to  RedCarpet , since that is the Gem GitHub itself uses to parse READMEs. So, for anyone else who runs into the issue of Marked's incomplete GFM support, simply install   and use it as a custom processor: In the "Advanced" section of Marked's preferences you can find the custom processor section: Note:  You  might  have to click the "Update Permissions" button since Marked may not have read...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Back to the JavaScript Basics]]></title>
        <id>https://blog.iansinnott.com/back-to-the-javascript-basics/</id>
        <link href="https://blog.iansinnott.com/back-to-the-javascript-basics/">
        </link>
        <updated>2015-01-09T08:00:00Z</updated>
        <content type="html"><![CDATA[Today I was interviewed for a developer position at a San Francisco startup and I was caught off guard when I was asked to create a simple implementation of "inheritance" in JS. Inheritance is in quotes because, well, this is JS we're talking about. There is no real inheritance in the classical sense, but we can certainly make it work. The interview question went something like this: Create a class Animal with a   method. Then create a class Dog that inherits from Animal. Simple enough, right? Here's what I wrote: This is certainly how I would have solved the inheritance problem in any of my projects, but as it turns out this isn't the best solution in the context of someone evaluating your JS prowess. Firstly, my solution explicitly depends on  Lo-Dash  (Underscore.js would also work just as well). These days it's hardly outlandish to assume that a given project would depend on either Lo-Dash or Underscore, so I don't see anything wrong with this but it still wasn't optimal in the...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[New Site Is Live]]></title>
        <id>https://blog.iansinnott.com/new-site-is-live/</id>
        <link href="https://blog.iansinnott.com/new-site-is-live/">
        </link>
        <updated>2015-01-08T08:00:00Z</updated>
        <content type="html"><![CDATA[Yup, the new site is up and running! It's been a bit of a long time coming, but my new website is finally live online. If you're interested you can check it out at my home page here:  iansinnott.com . So what? The big reason I'm super excited about this iteration of my home site is that it was designed entirely from scratch. The previous iterations of my site were all influenced heavily by designer friends of mine, but this latest work is my own. So you'll have to excuse me if I'm a little more excited than usual about launching a new site. Note quite done All that being said, there is still work to be done. The new site isn't entirely consistent with this blog. It's not a very big deal, but I really like consistency so updating this site to match the new visual style is now on my to-do list. The new site is also thoroughly untested, so if you stumble upon a part of it that seems broken please don't hesitate to  get in touch  and let me know.]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[New Site in the Works]]></title>
        <id>https://blog.iansinnott.com/new-site-in-the-works/</id>
        <link href="https://blog.iansinnott.com/new-site-in-the-works/">
        </link>
        <updated>2014-12-13T08:00:00Z</updated>
        <content type="html"><![CDATA[One of my personal projects recently has been completely redesigning my website. Well, I'm excited to say it's coming along quite nicely. Here is a preview of the new look: If you have any feedback I'd love to hear it. Feel free to comment bellow. Motivation My motivation for redesigning the site pretty simple: The site hasn't changed in over  two years . Under "Work", the old site lists a number of personal projects that don’t even exist anymore. The "Skills" section is likewise outdated, listing PHP, MySQL and Photoshop. These days those have all been replaced by Node.js/Ruby, MongoDB and Sketch respectively. If I'm being honest with myself I don't think the old site is  that  bad, but it's time for a change. I'll be launching sometime before Christmas. 😎]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Site a Day]]></title>
        <id>https://blog.iansinnott.com/a-site-a-day/</id>
        <link href="https://blog.iansinnott.com/a-site-a-day/">
        </link>
        <updated>2014-12-08T08:00:00Z</updated>
        <content type="html"><![CDATA[Yesterday I wrote about  teaching my brother to code . Today I thought I'd elucidate the strategy I'm using to teach him. A site a day The idea is simple: every day my brother will code up a new site and do a quick writeup about the experience. This structure is meant to really make him get his hands dirty and make some sites — to cause him all sorts of frustration with CSS positioning, JavaScript scope and all the other pitfalls of front-end development. Essentially to help my brother speed through the most daunting, "weed-out" phases of learning to code. This structure was also partially inspired by  Jennifer Dewalt  and her amazing 6-month journey to becoming a developer, where she created a new site every day for 180 days. Our goal is more incremental, and will initially only span the month of December. Mutually Beneficial It should probably go without saying that this course structure is not only beneficial to my brother but also to me as well. It is my opinion that you never...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Teaching My Brother To Code]]></title>
        <id>https://blog.iansinnott.com/teaching-my-brother-to-code/</id>
        <link href="https://blog.iansinnott.com/teaching-my-brother-to-code/">
        </link>
        <updated>2014-12-07T08:00:00Z</updated>
        <content type="html"><![CDATA[I just returned to the US after a few months in Asia, and my goal for the month of December is to teach my brother how to code. One month, that's how much time I have to get him up to speed. Sound crazy? It might be, but that depends on the concrete goal. "Learn to code" is far too abstract. The Goal In one month's time I intend to get my brother up to speed with front-end development. But "up to speed" does not mean he will be writing the next front-end framework in just one month. My goal is more along the lines of quickly smashing through the usual barriers people face when they want to learn code. These usually include things like: All sorts of mental barriers ("It's too hard.", "I'm starting too late?", "Where do I start?") Frustration Time constraints. (If you have a full-time job it might be hard to find the time to code.) When I learned to code those first two points were the biggest barriers to progress. Not knowing where to start is a big hurdle to overcome if you are brand...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Running a Meteor App on Dokku]]></title>
        <id>https://blog.iansinnott.com/running-a-meteor-app-on-dokku/</id>
        <link href="https://blog.iansinnott.com/running-a-meteor-app-on-dokku/">
        </link>
        <updated>2014-11-22T08:00:00Z</updated>
        <content type="html"><![CDATA[This is a quick overview of how to get a Meteor app set up on Dokku. It's actually not difficult, but it doesn't seem to have been well documented anywhere yet. Let's get started. What you need Obviously, you will need a server running Dokku. I used the Digital Ocean Dokku droplet, which uses the following versions: Ubuntu 14.04 Docker 1.1.2 Dokku 0.2.3 If you have a different setup your results may vary, but I'm guessing this guide will generally work for you as long as you have Dokku v0.2.3 setup. You also need a meteor app. If you are reading this just out of curiosity and don't have an app feel free to use one of the example apps. You can generate them easily through the CLI. Example: Dokku Configuration First of all, the default buildpack that Dokku will use if it detects a Meteor app is the  Heroku Buildpack , which is not yet compatible with Meteor 1.0 and still uses Meteorite. That's no good, so you will need to specify a custom buildpack for Dokku. The buildpack I've used...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Time Machine to the Rescue]]></title>
        <id>https://blog.iansinnott.com/time-machine-to-the-rescue/</id>
        <link href="https://blog.iansinnott.com/time-machine-to-the-rescue/">
        </link>
        <updated>2014-10-03T07:00:00Z</updated>
        <content type="html"><![CDATA[A couple weeks ago I made the decision to reinstall OSX and start anew, washing away over a years worth of accumulated files. It took about two hours to get most things reinstalled and running again, and after the fact I was very happy with the results. My computer is now fresh again, the downloads folder doesn't have 1000 items in it and I have over 100GB of free space (up from ~5GB before)! All in all a very quick and painless experience... until this week. Know what to migrate It's tough to keep track of everything on your system that's vital to your day-to-day workflow. The toughest are the things that aren't needed day-to-day, but which become vital the second you try do something that depends on them. In my case this was building an android app for distribution. To distribute an app on the Google Play Store you need to create a Java Keystore to sign your app with. This file is monumentally important if you're an app developer, because without it you cannot update your app. This...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Business]]></title>
        <id>https://blog.iansinnott.com/business/</id>
        <link href="https://blog.iansinnott.com/business/">
        </link>
        <updated>2014-10-01T07:00:00Z</updated>
        <content type="html"><![CDATA[I was reminded today of just how much opportunity there is in the world. I met with a new friend and potential client to discuss two websites he wants to build. Our talk focused mostly on his business, but we made a number of digressions into general business in Asia, incorporation, visa issues and a number of other topics of concern to expats. A quick digression ...don't work for free. After a nice hour long chat we finally came to the point of the matter: Project details and compensation. The offer he gave was an all-to-common one: Build this "small" thing for free and their will be tons of paying work down the road. I can't speak to the experience of other developers, but this is something I hear all too often. Potential clients like to lure people of various background to do some up front work for free with a promise to deliver paying work down the road. Projects like these can be tempting for new developers, but they rarely pan out. Doing free work, regardless of the promised...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How I Nearly Gave Up Coffee]]></title>
        <id>https://blog.iansinnott.com/how-to-nearly-give-up-coffee/</id>
        <link href="https://blog.iansinnott.com/how-to-nearly-give-up-coffee/">
        </link>
        <updated>2014-09-28T07:00:00Z</updated>
        <content type="html"><![CDATA[Drink coffee you don't like, and drink it black... I'm now well into week two of  my diet  and I realized something unexpected: I have largely given up coffee. I the past I would regularly drink 3-4 cups a day, but lately that amount has decreased to 1 cup at most. I would have never expected to accidentally give up coffee, I always thought it would be a sever exercise in willpower if I were to ever decide I needed to give it up. Turns out all I needed was to stop drinking coffee I liked... Turns out I really don't like dark roasts. I know many people like the bitter, charred flavor that you get with a darker roast but it is not for me. Despite drinking dark roast coffee black on a regular basis since starting my diet, it was only a couple days ago that I discovered what it means to enjoy a cup of black coffee. I was out at a café and ordered their daily special. I had no idea what it was, but daily specials usually interest me and it also happened to be much cheaper than all the...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Road to Absterdam Part 1]]></title>
        <id>https://blog.iansinnott.com/road-to-absterdam-part-1/</id>
        <link href="https://blog.iansinnott.com/road-to-absterdam-part-1/">
        </link>
        <updated>2014-09-26T07:00:00Z</updated>
        <content type="html"><![CDATA[My diet choices have been generally unhealthy for the past year, but lately I've decided I want abs. As such I asked  my buddy Ravi  for nutrition advice, and came up with the following daily macros: Protein: 180g Carbs: 45g Fats: 90g This is a very minimal diet as it comes out to ~1800 calories. The point being, I would put my body at a caloric deficit every day and lose weight. Simple 😎 So much protein Since my normal diet of the past year wouldn't get me anywhere near 180g of protein in a day I needed to make a change. The simplest way in my mind was to just eat more chicken. Easy enough, I love chicken and know how to cook it. As far as sources of protein go, chicken is amazing. It's low fat, has zero carbs and of course packs tons of protein. I live near a large chain store called RT-mart (大潤發) here in Taipei. At RT-mart raw chicken breast is packaged such that 1kg of chicken meat costs about $6.60. Not bad a bad price, so I this became my main source of chicken. I used all that...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using Docker on a Mac with Boot2Docker]]></title>
        <id>https://blog.iansinnott.com/using-docker-on-a-mac-with-boot2docker/</id>
        <link href="https://blog.iansinnott.com/using-docker-on-a-mac-with-boot2docker/">
        </link>
        <updated>2014-09-25T07:00:00Z</updated>
        <content type="html"><![CDATA[UPDATE 2016-11-12:   This post is no longer relevant now that  Docker for Mac . One thing to remember When your running  boot2docker  on a Mac (and probably Windows as well) it's important to remember that ports exposed by your containers will not be directly accessible via localhost as you might expect. Since docker is running within boot2docker containers will be exposed via ports on the boot2docker IP. For example, if running   tells you your app is exposing port 80 on some high-numbered port on the local host, it is actually exposed via boot2dockers IP: Going to   in your browser won't work. You need to replace   with boot2docker's IP address. To find it, run: Putting that into the browser will along with the correct port will give you   and you will be able to access your web app as expected. This may all be very simple for anyone familiar with networking, but it took me a good amount of time to figure this out with no error message. I guess you should just run Docker on Linux...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Programmer, Maker or Both?]]></title>
        <id>https://blog.iansinnott.com/engineer-maker-or-both/</id>
        <link href="https://blog.iansinnott.com/engineer-maker-or-both/">
        </link>
        <updated>2014-09-24T07:00:00Z</updated>
        <content type="html"><![CDATA[I just want my stuff to work and not break. Programming is not my passion. Making stuff is my passion.
--  Levels.io That's not my quote, but it certainly resonated with me. For the better part of two years I've been working as a freelance developer, coding projects for clients to generate some income and occasionally working on projects of my own in my spare time. This has worked out great for me so far: I live where I want (currently Taipei), work when I want and generally have quite a bit of freedom in what I do on a given day. This line of work has also led me to discover how much I love the web and creating for it. At the same time I've also (re)discovered the joy of programming. I regularly tell friends, acquaintances and people I just met that they should learn to code. Not because I believe I know what's best for them, but because I truly enjoy what I do and I think others might as well. But why do I enjoy it? This question has come up more than once in my mind. Do I actually...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dokku, Mongo & Node.js]]></title>
        <id>https://blog.iansinnott.com/dokku-mongo-node/</id>
        <link href="https://blog.iansinnott.com/dokku-mongo-node/">
        </link>
        <updated>2014-08-22T07:00:00Z</updated>
        <content type="html"><![CDATA[TL;DR: If you run into trouble using Mongo with Dokku for a Node.js app, re-image your server and start from scratch. Today was my first adventure into setting up a full-fledged, database-driven application with Dokku. I built the app with Node.js so I chose Mongo as the database. Local setup was easy, I already had Mongo installed. Setting up the production server also seemed easy at first until it just didn't work. Here's I troubleshot it: Nginx Error The first problem I ran into was an Nginx error page. I forgot the status code, but it essentially meant there was no app running. Strange, since the app was running fine on my local system. Since my application was set to log to stdout I wasn't able to see any information about what was causing the app to error out, so I decided to do a quick deploy to Heroku and see what was amiss. Sidenote : I  really  like Heroku. If it wasn't so much more expensive than a Digital Ocean droplet I would probably use them for every project...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Useful Bash Commands For Web Developers]]></title>
        <id>https://blog.iansinnott.com/useful-bash-commands-for-web-developers/</id>
        <link href="https://blog.iansinnott.com/useful-bash-commands-for-web-developers/">
        </link>
        <updated>2014-08-15T07:00:00Z</updated>
        <content type="html"><![CDATA[I recently found myself tutoring a friend in the ways of the command line and thought I'd write a quick post about it. Being comfortable with bash (or some other shell) isnt necessarily a prerequisite for web development, but it certainly makes the process smoother and more enjoyable. For anyone just starting to learn the command line, here are a few useful tips: The Basics : Short for 'change directory'. This is probably the command you will use most often until you decide to  do away with it altogether . : Think 'print working directory'. This outputs the path to your current working directory. : Display the contents of the  . The common form of this command,  , really isn't very useful in my opinion, so skip it and go straight for this useful directory listing command. Alias it to something shorter like so:  . Directory Shortcuts You don't always have to type a full path to get where you want to be. : Home directory. Ex:  . : A single period. Present directory, i.e.  . Ex:  . : Two...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using Dokku As A Personal Heroku]]></title>
        <id>https://blog.iansinnott.com/using-dokku-as-a-personal-heroku/</id>
        <link href="https://blog.iansinnott.com/using-dokku-as-a-personal-heroku/">
        </link>
        <updated>2014-07-24T07:00:00Z</updated>
        <content type="html"><![CDATA[Dokku For The Win I might just be in love with  Dokku . Why? Here are some things I like as a developer: Not having to configure servers Not having to upload files Deploying apps to production (or staging!) with a few key strokes Portability of code Extensibility With a service like Heroku you get all of this, but with free, open source software like  Dokku  you not only get these great features but you don't have to pay a premium. It's completely free, which means if you're like me and you enjoy using  Digital Ocean's  $5/mo base package you get the most critical features of Heroku for five bucks a month. That's a deal in my book. After a session of coding, here's what my new deployment process looks like: It's  that  simple. Setting Up I'm not going to go in depth on this because there's really not that much to say. Here are the steps you would take to get set up with Dokku if you're using Digital Ocean: Crete a new droplet from the standard Dokku image.  Here's a guide . Install the...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Month In San Francisco]]></title>
        <id>https://blog.iansinnott.com/a-month-in-san-francisco/</id>
        <link href="https://blog.iansinnott.com/a-month-in-san-francisco/">
        </link>
        <updated>2014-07-08T07:00:00Z</updated>
        <content type="html"><![CDATA[Four Weeks in  the  city for tech I'm from California. I grew up in tiny town called Point Arena, about four hours north of the Bay Area. Despite this, I never actually spent any significant time in San Francisco, so I was very excited to have the chance to live here for a month, especially after spending two years abroad. Better yet, the day I landed was my birthday :+1: The Vibe is right... As soon as I had spend 24 hours in the city, I could see myself living here. I like to walk and take public transportation, so I don't generally speak very highly of American cities. SF has that. Nightlife that's not strictly limited to weekends is also a plus, and that also seems to be a thing here. But what I have thus far enjoyed most about this city, is the mentality. People everywhere here are trying to start a company, or get recruited by their favorite company, or just build something cool in their spare time. Everyone seems to be  doing  something, and that something is usually very cool...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using Emoji in Excerpts on GitHub Pages]]></title>
        <id>https://blog.iansinnott.com/using-emoji-in-excerpts-on-github-pages/</id>
        <link href="https://blog.iansinnott.com/using-emoji-in-excerpts-on-github-pages/">
        </link>
        <updated>2014-07-08T07:00:00Z</updated>
        <content type="html"><![CDATA[Here's how to get GitHub emoji working in post excerpts As I was redesigning my blog recently I decided I wanted all the emoji in all of the places. That's not usually a problem on GitHub pages. Seriously, they even have  an official page about it. . But if you want emoji in your post excerpts, you will have a problem. GitHub pages only support emoji in post or page content. In theory, that should really apply to excerpts as well, but for some reason it does not. Here is what emoji looked like on my site before: ({{ site.image_dir }}broken-emoji.png) The problem was this line of code which uses Jekyll's built-in excerpt feature: The solution? Generate your own excerpts directly from the content using Jekyll's built-in helpers: Thank goodness that worked, I thought I was going to have to move away from GitHub pages. If you want to be able to play around with the excerpt length easily without editing   you can also add it as a  custom variable  in  : Then in  : This is the approach I...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Setting Up Hydra Config on A Mac]]></title>
        <id>https://blog.iansinnott.com/setting-up-hydra-config-on-a-mac/</id>
        <link href="https://blog.iansinnott.com/setting-up-hydra-config-on-a-mac/">
        </link>
        <updated>2014-07-03T07:00:00Z</updated>
        <content type="html"><![CDATA[Update 2016-11-12:  I no longer use either Hydra or Mjolnir. Currently my go to app for window management is  Phoenix . Update:  The Hydra project referenced in this post no longer exists. It's been succeeded by  Mjolnir , a project by the initial creator of Hydra. So whenever you see me reference "Hydra" I'm now actually referencing  Mjolnir . I Set Up Hydra to Minimize my Dependence on a Mouse This post is about moving one step closer to a mouse-less workflow, where any command can be accomplished trivially from the keyboard. I discovered  Hydra  through Hacker News earlier today, and it's almost everything I could wish for in a window management tool. My new setup allows me to manage windows somewhat like you see in the image bellow: ({{ site.url }}/public/images/hydra.gif) If you interested,  here's the source  to make Hydra work like you see in that image. But if you're like me, you will probably want to customize everything, so here's a quick tutorial on how to do that. init.lua...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jekyll Management Like a Boss]]></title>
        <id>https://blog.iansinnott.com/jekyll-management-like-a-boss/</id>
        <link href="https://blog.iansinnott.com/jekyll-management-like-a-boss/">
        </link>
        <updated>2014-06-28T07:00:00Z</updated>
        <content type="html"><![CDATA[Blogging Without Friction Yesterday I wrote a script to help myself blog more often. This is what it looks like in the terminal: Create a new post:  List all of my posts:  Search existing posts:  Edit a post:  Publish to this blog:  I really like  Jekyll , but having to manually create files with the Jekyll filename format ( ) is a bit of a hassle. Clearly you could just do this by hand, but if you're like me and want to automate all the minutia in your life, then that's not going to cut it. The other reason I decided to write a script for managing Jekyll was  friction . Blogging can be fun, but sometimes it's hard to get myself to actually start writing posts. In the past, that was largely because my post-writing workflow looked something like this: Open a new Markdown file Write an amazing post Open a browser, log in to WordPress Use the WordPress UI to create a new post Copy my Markdown from my editor into the WordPress WYSIWYG Hit publish Navigate to the post on the front-end to...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Meteor is (Almost) Awesome]]></title>
        <id>https://blog.iansinnott.com/meteor-is-almost-awesome/</id>
        <link href="https://blog.iansinnott.com/meteor-is-almost-awesome/">
        </link>
        <updated>2014-06-28T07:00:00Z</updated>
        <content type="html"><![CDATA[Almost Perfect, But With Room For Improvement Have you ever built a real-time web app? Well I hadn't, not before meteor anyway. This framework makes it insanely easy to build apps that update in real-time across an unlimited number of screens, so I love it. Meteor is  so good  in fact, that it was very easy to overlook what I would otherwise consider to be deal breakers like: Full blown app rebuilds, including file compilation, concatenation and minification  every time you save a file . No official testing solution No official package manager One of the first things you will read or be told when starting a meteor project, is to install  Meteorite  as a package manager, so the last bullet point is probably pretty clear to anyone who's used Meteor. However, the other two pain points might be less obvious when just starting with the framework. That first one is a really big deal for anyone who likes to iterate on their design using CSS in a browser, and likes to see realtime changes to...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jekyll Theming Like a Boss With Gulp]]></title>
        <id>https://blog.iansinnott.com/super-birthday-post/</id>
        <link href="https://blog.iansinnott.com/super-birthday-post/">
        </link>
        <updated>2014-06-19T07:00:00Z</updated>
        <content type="html"><![CDATA[Building your own Jekyll theme quickly and efficiently Basically I was fed up with how inefficient coding Jekyll themes was, especially with Octopress, so I decided there must be a better way. These are my findings. We're going to use  Gulp.js  to automate most of what's lame about creating themes for Jekyll. Gulp is just a task runner, so if you have another your more familiar with (i.e.  Grunt ) that would work too. First you need to go grab the boilerplate  Poole  code so that we are all on the same page. Sass Jekyll tempting is a pain compared to general web development and it shouldn't be. Let's get gulp set up to automate the usual crap for us. I'm using SCSS, but you could do the same thing with plain CSS, Less or Stylus just as easily. Here is the is a gulpfile to get get you set up: {% gist iansinnott/a9175e41f521a56eae52 %} The important task here is the 'sass' task. That task will compile any sass in the   directory, save it in two places: : This is where you would normally...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vim: It's Awesome]]></title>
        <id>https://blog.iansinnott.com/vim-awesome/</id>
        <link href="https://blog.iansinnott.com/vim-awesome/">
        </link>
        <updated>2014-03-03T08:00:00Z</updated>
        <content type="html"><![CDATA[I've done a few posts on Vim before, but I realize how little I really knew about Vim as I wrote those posts. Lately I've taken the time to actually learn quite a bit of Vimscript, enough to finally start opening up the true power of Vim. I can customize  anything I want  and create all sorts of new behavior in the editor. But it's really true what many people have said over and over again … There's a learning curve I would say at the very least it's taken six months to get proficient in Vim. It could certainly be done in less time, but if you're actively working on client projects you will find it hard to open up an editor you don't yet know and be really productive. Modal editing is easy I've heard learning the default mappings is sheer pain! Learning how to use the well-known   keys for navigating around the document is surprisingly easy to learn. It just takes a bit of muscle memory, so by disabling your mouse and directional keys anyone could pick this up fairly quickly. I think...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[From Startup Idea to (In)validation in a Week]]></title>
        <id>https://blog.iansinnott.com/startup-idea-feedback-week/</id>
        <link href="https://blog.iansinnott.com/startup-idea-feedback-week/">
        </link>
        <updated>2014-01-27T08:00:00Z</updated>
        <content type="html"><![CDATA[This is the brief story of and reflection on me and a friend's idea for a startup. We went from product idea, to super minimal prototype to finding out our product probably wasn't going to make money all in a week. This is what happened. The Idea A good friend of mine,  Nick Budden , had an idea for a product, and after talking about it over the course of a few days we decided to build it. The product would be a unified solution to many of the problems we face as freelance developers. Problems may be the wrong word actually, more like annoyances. The parts of our job that just serve to get in the way and take up valuable time that could be spent creating cool new things. Let's call the combined sum of these annoyances  “ Freelance Minutia. ” Here was our initial definition of Freelance Minutia, and thus the problems we wanted to solve: Finding work Getting design feedback from clients Managing projects and client relations Bookkeeping Our big idea was to create  a freelance dashboard...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using Key Remap 4 MacBook's Private.xml]]></title>
        <id>https://blog.iansinnott.com/using-keyremap4macbooks-private-xml/</id>
        <link href="https://blog.iansinnott.com/using-keyremap4macbooks-private-xml/">
        </link>
        <updated>2014-01-07T08:00:00Z</updated>
        <content type="html"><![CDATA[Using the KeyRemap4MacBook private.xml mappings can be a bit opaque, so I'm writing this as a reference to myself and anyone else that needs to delve deep into customizing KeyRemap4MacBook (KRMB) by using the private.xml config file. Here are the more important rules: Basic private.xml layout This is an xml file you can start with. Note that   is an optional tag, but I think it's nice for organization within KRMB. Leave it out if you want. The second basic piece is the   tag. These represent the checkboxes you can turn on and off from within KRMB. They can contain multiple mappings or   tags. Just remember that everything you put into one single   will be activated or deactivated together. Here's what they look like: Now on to the actual mappings. KeyToKey For mapping one key to another, with potential modifier keys: Key to key mappings always take two  s. The first is the key you would like to remap, the second is they key you would like to remap to. Both can take optional modifier...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WordPress Needs Better Automation]]></title>
        <id>https://blog.iansinnott.com/wordpress-needs-better-automation/</id>
        <link href="https://blog.iansinnott.com/wordpress-needs-better-automation/">
        </link>
        <updated>2014-01-02T08:00:00Z</updated>
        <content type="html"><![CDATA[It's occurred to me time and time again that I don't write as much as I should. In fact I think I even wrote up a short post about that some time back. Anyway, another thing that's been on my mind lately is the friction that comes from small tasks that keeps us (or at least me) from completing larger tasks. In the case of WordPress, there is far too much friction associated with creating new posts on a regular basis. As a programmer, I have come to despise most interfaces that require me to carry out repetitive tasks myself when they could be easily automated. I'm talking about things like: Open browser, head to my site login page Ideally I'm already logged in, but more likely I need to login again Spend a few seconds remembering my password In the WP dashboard, click on New > Post Copy and paste the title from the blog post I just finished Copy and paste the content as Markdown into the WP editor Hit publish That's the basic procedure when it comes to creating a new post, at least for...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript Everywhere]]></title>
        <id>https://blog.iansinnott.com/javascript-everywhere/</id>
        <link href="https://blog.iansinnott.com/javascript-everywhere/">
        </link>
        <updated>2013-12-05T08:00:00Z</updated>
        <content type="html"><![CDATA[Over the past week or so I've really been diving into JavaScript to get a deeper understanding of the underlying language (not just jQuery). What I'm realizing, and what prompted me to actually write this, is that Node is clean, unfiltered awesomeness. I had been contemplating diving into Ruby for a long time. I'm currently actually auditing a course on Ruby. But once I fired up Node most of that motivation to learn a new back-end language went out the window. The thing is, I really enjoy doing stuff in the terminal and writing scripts that will do things for me.  Automation , as we say. This has prompted me to learn a significant amount of bash scripting (used for Z shell of course), but that has it's own limitations, and it was never really designed to be good at many of the things I would want to do from the terminal. PHP works as a scripting language, and it's already my go-to language for development, but the lack of well known PHP shell scripts made me wary. Whereas Ruby and...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Integrating Alfred With Keyboard Maestro]]></title>
        <id>https://blog.iansinnott.com/integrating-alfred-and-keyboard-maestro/</id>
        <link href="https://blog.iansinnott.com/integrating-alfred-and-keyboard-maestro/">
        </link>
        <updated>2013-11-14T08:00:00Z</updated>
        <content type="html"><![CDATA[Update 7/6/2015:  I've now been using this Alfred workflow for over a year and I still use it  every single day . It's become vital to my workflow and I highly recommend it to anyone trying to boost their productivity. However, other parts of my workflow have evolved quite a bit (such as window management). If you're interested in a full post on the subject  drop me a line on twitter  or leave a comment at the bottom. Now back to the original article. One step closer to a mouse-less workflow I'm going to show you how to integrate Alfred with the excellent Keyboard Maestro. Why? Because I have a vendetta against my mouse and I'm constantly finding new ways to remove it from my workflow entirely. To this end, the discovery of  Keyboard Maestro  by  Stairways Software  was a big win. Keyboard Maestro (KM) Super quick introduction: KM makes it easy to assign almost any Mac action to an easy-to-use trigger. It's a great piece of software and is backed by a friendly and accessible developer...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Getting Productive With Fish Shell]]></title>
        <id>https://blog.iansinnott.com/getting-productive-with-fish-shell/</id>
        <link href="https://blog.iansinnott.com/getting-productive-with-fish-shell/">
        </link>
        <updated>2013-11-11T08:00:00Z</updated>
        <content type="html"><![CDATA[Today I took it upon myself to try out the very new and very cool looking  Fish Shell . This is the second time I have taken it upon myself to really dive into the customization of my Terminal and after the fact I'm left with much the same feeling as the first time: I feel like I didn't get anything done today. This experience made me think a bit about a certain habit I have to get really dive into my workflow and try to find areas that are lacking or could be more efficient. The first time I did this was after watching a great  tutorial by PeepCode  on the advanced ways I could use the command line. The whole video was about how to use  Bash , and then at the very end they recommend that those who want more serious customization should check out something called  Z shell . That recommendation led me on an all-day adventure learning Z shell customization. The real killer feature of Z shell actually turned out to be the community involvement, and the GitHub users who were putting out...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Page reloads are a thing of the past]]></title>
        <id>https://blog.iansinnott.com/page-reloads-thing-past/</id>
        <link href="https://blog.iansinnott.com/page-reloads-thing-past/">
        </link>
        <updated>2013-11-07T08:00:00Z</updated>
        <content type="html"><![CDATA[I occurred to me recently as I have been delving deeper into JavaScript and Backbone.js that single-page applications are the future. I say this because when I look back at older web pages they usually have some distinctive characteristics that instantly grant them outdated status. For instance: Table-based layouts HTML-based styling Unresponsive, etc.. I believe full-page reloads will belong on this list before too long. No, but seriously Have you ever used  Ghost ? If you haven't, it's a really promising blogging platform that recently got released to the public and has scored six-digit funding on Kickstarter. I'm still using WordPress for this blog, but after a few minutes using Ghost I could say it was a vast improvement. This isn't a review, so I won't get into the specifics except to say that it built with JavaScript, so it runs like an app not a web page. The issue with browser reloads They are  slow . That is really all I need to say. I spend a lot of time developing on my...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Learn Vim & Code Like a Boss]]></title>
        <id>https://blog.iansinnott.com/learn-vim-code-like-a-boss/</id>
        <link href="https://blog.iansinnott.com/learn-vim-code-like-a-boss/">
        </link>
        <updated>2013-08-09T07:00:00Z</updated>
        <content type="html"><![CDATA[Learn Vim and remove the trackpad from your workflow Since your here, you probably alredy want to learn the amazing editing software that is Vim. But if you haven't yet decided to take the plunge, here are three reasons to start  today . Code Faster, better and maybe even stronger. Code easily on any system. Understand the command line (you will need it later) This article is also the base for an upcoming article on being insanely productive on a Mac and eliminating the trackpad from your workflow (almost) entirely. But Ian, isn't Vim a productivity killer for new users? No.  Vim only hurts productivity if you are very hardcore about learning the esoteric commands as quickly as possible. People assume learning Vim involves a mandatory dive into the deep end. That's  not true , and I'm going to show you why. Quck setup (Updated) Download  Sublime Text Either  enable vintage mode  or install the  Vintageous plugin Enabling Vintage mode in Sublime involves a very quick edit to your user...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The WP_Post Object]]></title>
        <id>https://blog.iansinnott.com/the-wp_post-object/</id>
        <link href="https://blog.iansinnott.com/the-wp_post-object/">
        </link>
        <updated>2013-06-15T07:00:00Z</updated>
        <content type="html"><![CDATA[This is a quick reference for myself and anyone else who commonly uses the WP_Post object in WordPress. I find that I often forget exactly what attributes this object has so I finally decided to just make a post about it and save my future self having to dump the var to remember. Here it is: This is the result of calling   on a   object. Enjoy.]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WordPress Development Server - Full Set Up Guide]]></title>
        <id>https://blog.iansinnott.com/wordpress-development-server-full-set-up-guide/</id>
        <link href="https://blog.iansinnott.com/wordpress-development-server-full-set-up-guide/">
        </link>
        <updated>2013-05-30T07:00:00Z</updated>
        <content type="html"><![CDATA[Unleashing your WordPress Development Server So you want to escape inclusive packages like MAMP, learn about web servers and generally code like a boss? Well if you use a Mac your in the right place, but guess what we need before we get started? A local development environment! If you don't know what that is, read the next paragraph. If you do, then skip down. Even if you already have a local dev server set up this will still be useful knowledge should you want to untether yourself from MAMP or any other AMP stack bundle. Windows Users:  This article is about setting up a local dev environment on Mac OSX 10.8. You will also need to get an AMP stack up and running but I'm not familiar with Windows so I'm just going to recommend  WAMP  (sigh). The Local Dev Environment When you code in PHP you need somewhere to test your work as you go along. This is where the local dev server comes in. You will also need a local dev server if you do any sort of online development. What the local dev...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Portfolio Update + Future Site Update]]></title>
        <id>https://blog.iansinnott.com/portfolio-update-future-site-update/</id>
        <link href="https://blog.iansinnott.com/portfolio-update-future-site-update/">
        </link>
        <updated>2013-05-14T07:00:00Z</updated>
        <content type="html"><![CDATA[Today I Made Some New Additions The portfolio hasn't seen an update in at least a few months, so I figured it's about time I made an effort to make it reflect what I've actually been doing lately. So today I added two new items: OrangeFinders.com Creative Words Theme The Creative Words Theme is something I threw together this last weekend. I went through a Photoshop tutorial to create the design, then decided to test my new WP skills by coding it up clean and fast. Said new WP skills come from the former item on that list: OrangeFinders.com My First Full Web App OrangeFinders.com marks my first fully featured web app created. I say fully featured in full knowledge of the fact that there are still a few minor changes that I need to make, and that the  ‘ wish list' of features for the site is still quite long. But that's beside the point. This site taught me a plethora of new skills that are highly relevent to web design and WP development. This include: Form Validation (soooo boring...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Becoming A Developer Is A Process]]></title>
        <id>https://blog.iansinnott.com/becoming-a-developer-is-a-process/</id>
        <link href="https://blog.iansinnott.com/becoming-a-developer-is-a-process/">
        </link>
        <updated>2013-05-11T07:00:00Z</updated>
        <content type="html"><![CDATA[Version Control Added to My List! Today I started seriously learning Git. Why? I'm tired to manual version control, and I enjoy adding new skills to the list of things I've learned to become a developer. Becoming a developer is a process No one seems to tell you that there are many great ways to manage your code that don't involve making tons of backup directories manually in Finder. Well, no one told me anyway. As with many things in the world of development, version control seems to be a simple concept that everyone is already familiar with, so no one talks about it. I'm not complaining, just pointing it out. Putting this mental note down on my blog for later reference. So much to learn I take the time to note this stuff because I want to stay consciously aware of all the seemingly minor things that I learn as I continue to improve my development skills. I was talking to my friend  Nick  recently about this and he said something along the lines of: Welcome to your new life. You will...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Life Upgrades & Reasons To Write More]]></title>
        <id>https://blog.iansinnott.com/life-upgrades-4-13/</id>
        <link href="https://blog.iansinnott.com/life-upgrades-4-13/">
        </link>
        <updated>2013-04-30T07:00:00Z</updated>
        <content type="html"><![CDATA[I Should Write More I don't necessarily want to, but I should. A  very nice article  I read today by  Nathan Marz  basically hammered home an idea I already knew to be true: Writing often and eventually writing well can be a key to success. So, with that in mind I'm going to start writing more often. Not because I think the world needs to hear what I have to say (yet), and not because I think anyone actually reads my posts, but because it will help me improve. Upgrade This new motivation to write isn't just due to that article though. Over the past two months I've also made several other upgrades to my life style that will make this much easier. New Computer That's right, brand new Macbook Pro. The ultra sexy retina display means I can finally switch over to using Traditional Chinese as my default language and be able to see all the tiny strokes of characters I need to look up. The massive speed increase means I no longer loath opening Photoshop or more than one browser at a time...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Victory! The realization of a goal.]]></title>
        <id>https://blog.iansinnott.com/victory-the-realization-of-a-goal/</id>
        <link href="https://blog.iansinnott.com/victory-the-realization-of-a-goal/">
        </link>
        <updated>2013-02-22T08:00:00Z</updated>
        <content type="html"><![CDATA[Today I met the goal I set a month ago of making money as a freelancer. Well, that was a two week goal so I didn't exactly meet it. But the work I did during those weeks working towards this goal was the foundation for success, and now the benefits of my work have become tangible. This is just the beginning though. One goal should lead to another, so tomorrow I will figure out what that next goal shall be.]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[I'm famous on GoBodyLanguage.com!]]></title>
        <id>https://blog.iansinnott.com/im-famous-on-gobodylanguage-com/</id>
        <link href="https://blog.iansinnott.com/im-famous-on-gobodylanguage-com/">
        </link>
        <updated>2013-02-20T08:00:00Z</updated>
        <content type="html"><![CDATA[Well the intro video that I'm in is bellow the fold on the homepage of godbodylanguage but it counts as fame (right?). This is what a good friend of mine created and launched today. I'm wishing the best of luck to  Nick  as he promotes his new site. Can't wait to go through this course myself, and I hope this helps motivate more people to  learn body language .]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Wonders of CSS Frameworks]]></title>
        <id>https://blog.iansinnott.com/the-wonders-of-css-frameworks/</id>
        <link href="https://blog.iansinnott.com/the-wonders-of-css-frameworks/">
        </link>
        <updated>2013-02-07T08:00:00Z</updated>
        <content type="html"><![CDATA[Today was my first dive into CSS frameworks. Creating layout from scratch is perfectly doable but also perfectly tedious. I have yet to meet a developer who enjoys that aspect of it. We like the stages where we get to build shiny things on a site. So here is what I got into today: The 1140 Grid System Kube The first one has been around for quite some time. The original developer actually stopped updating it because after creating it he learned so much that it lost it's use. That's awesome, but for a ton of developers it's still a great tool. I would say it's best feature is simplicity. It's not the most robust framework but if you want something really light and simple to set up try it out. The second, Kube, is another fully responsive grid system. I didn't really look into Kube's layout features because I was already using 1140, but I'm sure it's good. I really like Kube's design elements that make it super simple to add very sophisticated styling to elements in a few seconds. The one...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WordPress Theming From Scratch]]></title>
        <id>https://blog.iansinnott.com/wordpress-theming-from-scratch/</id>
        <link href="https://blog.iansinnott.com/wordpress-theming-from-scratch/">
        </link>
        <updated>2013-01-11T08:00:00Z</updated>
        <content type="html"><![CDATA[When I first started my exploration of WP I did so one small step at a time. When I look back on those initial stages of learning I think about how much quicker the process could have been if I had just dove in and conquered obstacles as they arose. For beginner WP developers it may be tempting to stick with theme modification. By this I mean just taking a theme, whether premium or free, and simply modifying bits of it's code (or child theming) to get the desired results. This can be great in some cases and well warranted. However, in the end this leaves you or your client with a pile of code you may or may not fully understand (seriously, open up   on a theme you didn't create and witness how much excess code your theme ships with). I was in the same boat initially, child-theming and theme-editing my way to early victories. This was important, but it wasn't until after I built my first theme from scratch that I felt fully in control of my theme. Building a theme from scratch also...]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Custom Post Types: A Great Article]]></title>
        <id>https://blog.iansinnott.com/custom-post-types-a-great/</id>
        <link href="https://blog.iansinnott.com/custom-post-types-a-great/">
        </link>
        <updated>2012-12-18T08:00:00Z</updated>
        <content type="html"><![CDATA[Justin Tadlock is a boss I just read an article (link below) of his on custom post types in WordPress that was illuminating. Also, it turns out he is another developer that jumped ship for Asia (he's in Seoul). So where was I. Ah, custom posts. Custom posts provide great flexibility for WP developers and a simple user experience for the client. This article is the primary reason I decided to use this feature for my latest client project. I'll be using custom posts to handle addresses for company that has about 20 branches spread over three cities. Nothing too exciting but this will allow simple edits and updates as the company expands. That's all for now, must sleep... Oh and here's  the link  for anyone interested. Enjoy.]]></content>
        <author>
            <name>Ian Sinnott</name>
            <uri>https://www.iansinnott.com</uri>
        </author>
    </entry>
</feed>