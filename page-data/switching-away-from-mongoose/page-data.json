{"componentChunkName":"component---src-templates-post-js","path":"/switching-away-from-mongoose/","result":{"data":{"post":{"canonicalURL":"https://blog.iansinnott.com/switching-away-from-mongoose/","content_html":"<p>I&#39;ve been using MongoDB as my primary database for some time now. That means all new projects I created were running Mongo, and Mongoose was my ORM of choice. Mongoose has worked well for my in the past and even <span class=\"italic\">still</span> does, but I can feel that it&#39;s time for a switch.</p>\n<h2>Why the change?</h2>\n<h3>Mongo</h3>\n<p>The main reason actually isn&#39;t Mongoose, but rather <span class=\"bold\">Mongo</span>. The data in <span class=\"italic\">most</span> applications is probably going to be relational so why would you use a non-relational database? The main reason I liked Mongo initially was that it had a JavaScript API but I&#39;ve come to realize that doesn&#39;t matter that much, and it can even be a hindrance when working with team members that know and love SQL.</p>\n<h3>Mpromise</h3>\n<p>For anyone who doesn&#39;t know already, Mongoose provides a promise-based API for doing async database operations in addition to the classic callbacks. This API is unfortunately under documented, but it exists none-the-less and the library it uses to implement promises is <a href=\"https://github.com/aheckmann/mpromise\">Mpromise</a>.</p>\n<p>Mpromise seemed fine at first, but it turns out it simply doesn&#39;t adhere to the ES6 Promise spec. The most glaring example of this is that Mpromise does not implement <code >.catch</code>, meaning you can&#39;t do nice pretty error handling at the bottom of your then-stack. Here&#39;s an example using Express to build an API:</p>\n<pre>import Model from &#39;../models/Model.js&#39;;\n\n// GET all the Models\napi.get(&#39;/models&#39;, (req, res, next) =&gt; {\nModel.find({})\n.then(data =&gt; res.send(data))\n.catch(next);\n});</pre>\n<p>The above code will break, throwing an error because an Mpromise Promise has no <code >catch</code> method. There&#39;s even an <a href=\"https://github.com/aheckmann/mpromise/issues/15\">open issue about this</a> from <span class=\"italic\">last year</span>. That&#39;s probably already a dealbreaker, but we can get around this by patching Mpromise ourself:</p>\n<pre>var mpromise = require(&#39;mongoose/node_modules/mpromise&#39;);\n\nmpromise.prototype.catch = function(onReject) {\nreturn this.then(undefined, onReject);\n};</pre>\n<p>Still, this is ugly and should not be necessary with the myriad promise libraries in addition to the rollout of ES6 (We can currently use native Promises in Chrome and FF).</p>\n<h2>So what now?</h2>\n<p>Well, despite what I said about Mongo earlier it&#39;s still the database I know best. For this reason I&#39;m going to keep on using it in the interim while I survey the state of relational database support in the Node ecosystem. There are a number of interesting libraries currently out there. Here are a few:</p>\n<ul><li>https://github.com/tgriesser/knex</li></ul>\n<ul><li>https://github.com/tgriesser/bookshelf</li></ul>\n<ul><li>https://github.com/balderdashy/waterline</li></ul>\n<p>I&#39;m currently leaning toward Waterline, as I tried out Bookshelf and wasn&#39;t a fan of the API. That being said, the whole idea of query building with Knex is interesting, and allows simple application of existing relational DB knowledge to a Node app.</p>\n<p>I&#39;m not sure what my ideal stack will be in a couple months, but for now I&#39;m trying out some new things in the hope of discovering the &quot;ultimate&quot; stack. Maybe I&#39;ll get tired of writing out all my routing logic with Express and switch to <a href=\"https://github.com/balderdashy/sails\">Sails</a> or <a href=\"https://github.com/strongloop/loopback\">Loopback</a>... or better yet maybe I&#39;ll get fed up with JS all together and switch to a Clojure-ClojureScript stack. I&#39;d really love to start using <a href=\"https://github.com/omcljs/om\">Om</a> right now, but the overhead of getting up to speed with ClojureScript would cause a serious hit to my immediate productivity.</p>","properties":{"tags":"javascript,node","created":"2015-08-01T00:00:00.000Z","title":"Switching Away From Mongoose","disqusId":null}}},"pageContext":{"id":"59f5f588-9132-52a0-a994-62146220022e","prev":{"id":"cd87903c-4233-5682-bfc3-39e35fad29fc","slug":"use-ssh-forwardagent-for-fun-and-profit","properties":{"title":"Use SSH ForwardAgent for fun and profit","created":"2015-07-20T00:00:00.000Z"}}}}}