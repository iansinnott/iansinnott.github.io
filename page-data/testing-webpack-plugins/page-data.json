{"componentChunkName":"component---src-templates-post-js","path":"/testing-webpack-plugins/","result":{"data":{"post":{"canonicalURL":"https://blog.iansinnott.com/testing-webpack-plugins/","content_html":"<p><span class=\"bold italic\">TL;DR:</span><span class=\"italic\"> I&#39;m going to show you how to test Webpack plugins. I&#39;ll even show you how to integrate with a CI server üòÑ. The trick is to use the Webpack </span><a class=\"italic\" href=\"https://webpack.github.io/docs/node.js%E2%B8%BBapi.html\">Node API</a>.</p>\n<p>Ever built a <a href=\"https://github.com/webpack/docs/wiki/how%E2%B8%BBto%E2%B8%BBwrite%E2%B8%BBa%E2%B8%BBplugin\">Webpack Plugin</a>? Ever wondered how to test that awesome plugin you just built? If so, this article is for you.</p>\n<p>I scoured the internet (skimmed the first page of a google search) for resources on testing Webpack plugins and came up empty, so I decided it was time to take matters into my own hands!</p>\n<p>I recently built my own Webpack plugin for generating static sites from React Router routes. You can check it out <a href=\"https://github.com/iansinnott/react%E2%B8%BBstatic%E2%B8%BBwebpack%E2%B8%BBplugin\">here if interested</a>. Anyway, I was getting somewhat annoyed that I hadn&#39;t yet tested the plugin. I had seen some regressions as I added support for more features and it was no fun to have to resolve those issues when I really just anted to generate awesome static sites using React and Webpack.</p>\n<h2>Where to turn...</h2>\n<p>Even if the first page of a google search didn&#39;t answer my questions, I figured someone somewhere must have needed to test their Webpack plugins in the past, and I was right! My first move was to think about what popular Webpack plugins I was aware of. The first one that came to mind was the venerable <a href=\"https://github.com/webpack/extract%E2%B8%BBtext%E2%B8%BBwebpack%E2%B8%BBplugin\">Extract Text Webpack Plugin</a>. Little did I know, it was written by the same guy who wrote Webpack.</p>\n<p>I figured that such a high profile plugin is likely to be well tested and it is. The plugin has a whole <a href=\"https://github.com/webpack/extract%E2%B8%BBtext%E2%B8%BBwebpack%E2%B8%BBplugin/tree/master/test\">suite of tests</a> which you can check out and use as a reference for writing your own. Nice üí•</p>\n<h2>Writing the tests</h2>\n<p>Let&#39;s jump in. To write a tests for a Webpack plugin you will probably want to analyze the output of a build. To do so, you can simply use the <a href=\"https://webpack.github.io/docs/node.js%E2%B8%BBapi.html\">Node API</a>. It runs in Node so it probably runs in your favorite test runner. For me this is <a href=\"https://github.com/sindresorhus/ava\">Ava</a>, but it&#39;s just Node code so you can use whatever you like.</p>\n<p>The Webpack API let&#39;s you pass in options and a callback to Webpack. The callback will be called with an <code >err</code> object and some <code >stats</code> on how the build went. In short, here&#39;s the <a href=\"https://github.com/iansinnott/react%E2%B8%BBstatic%E2%B8%BBwebpack%E2%B8%BBplugin/blob/master/example/test.js\">exact test I use in my plugin</a>:</p>\n<pre>import test from &#39;ava&#39;;\nimport webpack from &#39;webpack&#39;;\n\n// 0. Import the config that uses my plugin\nimport options from &#39;./webpack.config.js&#39;;\n\ntest.cb(&#39;Compiles routes nested at one level&#39;, t =&gt; {\n\n// 1. Run webpack\nwebpack(options, function(err, stats) {\n\n// 2. Fail test if there are errors\nif (err) {\n  return t.end(err);\n} else if (stats.hasErrors()) {\n  return t.end(stats.toString());\n}\n\n// 3. Map asset objects to output filenames\nconst files = stats.toJson().assets.map(x =&gt; x.name);\n\n// 4. Run assertions. Make sure that the three expected\n//    HTML files were generated\nt.true(files.indexOf(&#39;index.html&#39;) !== -1);\nt.true(files.indexOf(&#39;about.html&#39;) !== -1);\nt.true(files.indexOf(&#39;404.html&#39;) !== -1);\n\nt.end();\n});\n});</pre>\n<p>This is a pretty simple test. Given the routes defined in <code href=\"https://github.com/iansinnott/react%E2%B8%BBstatic%E2%B8%BBwebpack%E2%B8%BBplugin/blob/master/example/src/routes.js\">routes.js</code>, the plugin should generate three HTML files: <code >index.html</code>, <code >about.html</code> and <code >404.html</code>. This test simply runs Webpack and checks the output to make sure those three files were generated. It doesn&#39;t check the contents of those files or check that they were written to disk, but this test already gives me infinitely more code coverage than I had before.</p>\n<p>Of course it should be noted that I had to create a whole new directory and give it its own <code >package.json</code> and <code >node_modules</code> in order to get this test to run, but it works.</p>\n<p>Also, looking at the Extract Plugin tests it looks like it may not be necessary to do a full <code >npm instal</code> for the subdirectory in order to run Webpack. In the future I may optimize the tests by looking more closely at how the tests are being run in the Extract Plugin.</p>\n<h2>Running your tests on a CI server</h2>\n<p>Now that you know how to write tests for a Webpack plugin you will also probably want to run them automatically whenever you push. Personally I use <a href=\"https://circleci.com/\">Circle CI</a> for this, but I&#39;m sure Travis or any other modern CI service would work fine.</p>\n<p>The key point to note is that you need to run <code >npm install</code> in whatever directory you&#39;re using for your tests. This will vary depending on your CI provider so I&#39;ll just show you the command I run and link you to my <code >circle.yml</code>.</p>\n<p>Install node modules in the <code >example/</code> directory using a <a href=\"http://www.tldp.org/LDP/abs/html/subshells.html\">subshell</a>:</p>\n<pre>(cd example; npm install)</pre>\n<p>You can see my full <code href=\"https://github.com/iansinnott/react%E2%B8%BBstatic%E2%B8%BBwebpack%E2%B8%BBplugin/blob/master/circle.yml#L9\">circle.yml</code><a href=\"https://github.com/iansinnott/react%E2%B8%BBstatic%E2%B8%BBwebpack%E2%B8%BBplugin/blob/master/circle.yml#L9\"> here</a>.</p>\n<h2>Conclusions</h2>\n<p>It wasn&#39;t as hard as I thought it would be to run tests on a Webpack plugin. That being said I didn&#39;t find this documented anywhere and google proved particularly useless since it turned up a ton of results related to Webpack plugins that run tests on your web app for you... I was looking for ways to run tests on Webpack plugins <span class=\"italic\">themselves</span>, so this is not what I was looking for.</p>\n<p>Hopefully this helps you out. Webpack plugins are crucial pieces of many build processes out there, so it&#39;s important that we know how to test them.</p>\n<p>Feel free to <a href=\"https://github.com/iansinnott/react%E2%B8%BBstatic%E2%B8%BBwebpack%E2%B8%BBplugin\">star my plugin repository</a> if you liked this write up, or leave me a comment if anything wasn&#39;t clear.</p>\n<p>Cheers üçª</p>","properties":{"tags":"javascript,webpack","created":"2016-05-11T00:00:00.000Z","title":"Testing Webpack Plugins","disqusId":null}}},"pageContext":{"id":"3b96f38a-91b2-5cab-b03d-2a4c4803db0d","prev":{"id":"dab21a7f-2a99-544a-b34e-2e1ed6ed99f8","slug":"going-fully-https-ssl-fo-free","properties":{"title":"Going fully HTTPS (SSL) fo' free","created":"2016-04-29T00:00:00.000Z"}}}}}