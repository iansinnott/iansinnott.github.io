{"componentChunkName":"component---src-templates-post-js","path":"/migrating-from-jekyll-to-hexo/","result":{"data":{"post":{"canonicalURL":"https://blog.iansinnott.com/migrating-from-jekyll-to-hexo/","content_html":"<p><span class=\"bold\">TL;DR:</span> I migrated my blog from Jekyll to Hexo. This is everything you need to know to do the same.</p>\n<h2>Initializing Hexo in your existing Jekyll project</h2>\n<p>Here&#39;s what I did:</p>\n<p>Back up your existing Jekyll blog to a subdirectory so you can wildly make changes with impunity:</p>\n<pre>mkdir jekyll.bak</pre>\n<p>Now move all the non-git files in the directory into <code >jekyll.bak</code>. Initially I just did it in finder, but then I got curious about how to do it in bash. So if you want to just run a nifty command here you go:</p>\n<pre>find . -maxdepth 1 -mindepth 1 ! -name &#39;.git&#39; ! -name &#39;jekyll.bak&#39; -exec mv &#39;{}&#39; ./jekyll.bak/ ;</pre>\n<p>We keep the <code >.git/</code> dir around so that we can cleanly iterate towards a Hexo blog from our Jekyll blog while maintaining all previous version control history. However, the <code >hexo init</code> command actually removed <code >.git/</code> on my system so we need to move it too, but only temporarily:</p>\n<pre>mv .git .git.bak</pre>\n<p>Now initialize Hexo in your project directory:</p>\n<pre>hexo init .</pre>\n<p>This should have left <code >jekyll.bak</code> and <code >.git.bak</code> intact while adding a bunch of new files. Now it&#39;s safe to bring back your Git history and add a commit:</p>\n<pre>mv .git.bak .git\ngit add .\ngit commit -m &#39;Add Hexo boilerplate&#39;</pre>\n<p>Now we&#39;ve succesffully initialize Hexo. From here on out everything we do will to customize Hexo to suit our needs.</p>\n<p>To make sure everything is running properly run the dev server:</p>\n<pre>hexo server</pre>\n<h2>Migrating Content</h2>\n<p>Now let&#39;s get all your blog posts migrated over to the new system. When running the server you should see the Hello World post as your first post on the homepage. You will also see the default Hexo theme. Here&#39;s what that looks like:</p>\n<figure><img src=\"https://dropsinn.s3.amazonaws.com/Screen%20Shot%202016-11-12%20at%203.09.34%20PM.png\" alt=\"Default hexo blog\"/><figcaption>Default hexo blog</figcaption></figure>\n<p>That &quot;Hello World&quot; post is the only post in your blog. Hexo keeps all your posts at <code >source/_posts</code>. Let&#39;s remove the default post.</p>\n<pre>rm source/_posts/hello-world.md</pre>\n<p>Now, since Hexo and Jekyll are very similar in how they store your posts it&#39;s very straightforward to migrate all your content. First, copy it all over. If you also used <code >jekyll.bak</code> to backup your original blog then you can do this:</p>\n<pre>mv jekyll.bak/_posts/* source/_posts/</pre>\n<p>Second, update your Hexo settings to recognize Jekyll-style post filenames. In <code >_config.yml</code> edit the line for <code >new_post_name</code>:</p>\n<pre>new_post_name: :year-:month-:day-:title.md # File name used to identify posts</pre>\n<p>Now restart the Hexo server and you should see all your content ðŸ˜Ž</p>\n<h2>Gripes</h2>\n<p>Hexo is not without its shortcomings. I&#39;ll outline those here, but take this with a grain of salt because I just started using Hexo yesterday so it may be that my gripes are due to lack of understanding rather than actual problems with the framework.</p>\n<h3>Not simple to create standalone pages</h3>\n<p>Hexo is highly content focused, meaning when you create a new &quot;page&quot; you are actually just creating a new Markdown file with some content. In my experience the &quot;content first&quot; approach is perfectly suited to blog posts, but not necessarily to pages which are often unique in layout.</p>\n<p>For example, I wanted to create a <code >/tags</code> page. This is simple enough using the Hexo API in a layout file:</p>\n<pre>&lt;% site.tags.each((tag) =&gt; { %&gt;\n\t&lt;a class=&#39;tag&#39; href=&#39;&lt;%= url_for(tag.path) %&gt;&#39;&gt;\n\t\t&lt;%= tag.name %&gt;\n\t&lt;/a&gt;\n&lt;% }) %&gt;</pre>\n<p>But I wanted to be able to do this on one single page. I.e. instead of writing markdown I wanted to write the above code and output all my tags. This didn&#39;t work, so I ended up creating a workaround where my <code >tags.md</code> file does nothing more than specify the layout I want to render.</p>\n<pre>---\ntitle: Tags\nlayout: tags\n---</pre>\n<p>This may seem minor, but I would have liked to be able to simply put the above EJS code into my &quot;page&quot; file and had it render.</p>\n<h3>Not simple to create helper functions</h3>\n<p>More than once I found myself wanting to refactor some view logic out of the EJS templates and into an external helper function. As of now it&#39;s still unclear to me how to do this. I ended up writing all my code inline in the EJS files but this is not pretty.</p>\n<h3>Documentation</h3>\n<p>This is a tough one since Hexo actually has quite a bit of documentation online. However, I found it didn&#39;t readily cover the things I really cared about. Namely, in-depth guides to creating themes.</p>\n<p>For example, things like:</p>\n<ul><li>How to loop through various content types (posts, tags, categories, etc)</li></ul>\n<ul><li>How to sort, filter, etc, those content types</li></ul>\n<ul><li>What methods and properties are available on all the Hexo objects</li></ul>\n<p>I ended up discovering these things through trial and error or viewing other peoples themes. This is fine, but it seems that it could be greatly improved to limit the time it takes someone new to the framework to get comfortable with it.</p>\n<h2>Development Takeaways</h2>\n<p>Regarding layouts and templating: If you want to create custom pages then create a new layout file with the desired name (say <code >about.ejs</code>) and then specify that layout file in the post/page markdown file:</p>\n<pre>---\nlayout: about\n---</pre>\n<p>Regarding helper functions: I didn&#39;t find a good way to add helpers yet but I haven&#39;t yet read through all the docs. Who knows, maybe there is an elegant solution.</p>\n<h2>Why</h2>\n<p>I&#39;ve been meaning to redo my blog for a while. Jekyll does it&#39;s job quite well, but I never liked liquid templates and my existing blog has needed some work for quote some time. For example, code snippets when rendered in post excerpts sometimes caused unclosed <code >&lt;pre&gt;</code> tags, which would really mess up rendering for the whole index page.</p>\n<p>Also, JavaScript. I write it all the time so it makes sense to use it for my blog. I also like the emphasis out of the box on Stylus as opposed to Sass or Less.</p>\n<p>Lastly, a good friend of mine recently told me he uses Hexo for his blog. Personal recommendations go a long way.</p>\n<h2>Outcome</h2>\n<p>So far I&#39;ve been quite happy. Things I like:</p>\n<ul><li>Drafts</li></ul>\n<ul><li>CLI for creating content</li></ul>\n<ul><li>Simple, multi-language support</li></ul>\n<ul><li>Powered by JavaScript</li></ul>","properties":{"tags":"blog,javascript","created":"2016-11-16T00:00:00.000Z","title":"Migrating from Jekyll to Hexo","disqusId":null}}},"pageContext":{"id":"cf6b2d41-03be-5446-9bce-81f79d5b8532","prev":{"id":"b25e2868-810d-5ac0-bc72-ee6972003093","slug":"a-refreshing-dose-of-minimalism","properties":{"title":"A refreshing dose of minimalism","created":"2016-11-16T00:00:00.000Z"}}}}}